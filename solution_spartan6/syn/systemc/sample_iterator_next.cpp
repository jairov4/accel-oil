// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sample_iterator_next.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sample_iterator_next::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sample_iterator_next::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sample_iterator_next::ap_ST_pp0_stg0_fsm_0 = "0";
const sc_lv<32> sample_iterator_next::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sample_iterator_next::ap_const_lv32_1 = "1";
const sc_lv<17> sample_iterator_next::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<16> sample_iterator_next::ap_const_lv16_1 = "1";
const sc_lv<16> sample_iterator_next::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> sample_iterator_next::ap_const_lv8_0 = "00000000";

sample_iterator_next::sample_iterator_next(sc_module_name name) : sc_module(name), mVcdFile(0) {
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30 = new nfa_accept_samples_generic_hw_add_17ns_17s_17_4<30,4,17,17,17>("nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30");
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->clk(ap_clk);
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->reset(ap_rst);
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->din0(grp_fu_77_p0);
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->din1(grp_fu_77_p1);
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->ce(grp_fu_77_ce);
    nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30->dout(grp_fu_77_p2);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31 = new nfa_accept_samples_generic_hw_add_16ns_16ns_16_4<31,4,16,16,16>("nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31");
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->clk(ap_clk);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->reset(ap_rst);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->din0(grp_fu_83_p0);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->din1(grp_fu_83_p1);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->ce(grp_fu_83_ce);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31->dout(grp_fu_83_p2);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32 = new nfa_accept_samples_generic_hw_add_16ns_16ns_16_4<32,4,16,16,16>("nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32");
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->clk(ap_clk);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->reset(ap_rst);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->din0(grp_fu_88_p0);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->din1(grp_fu_88_p1);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->ce(grp_fu_88_ce);
    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32->dout(grp_fu_88_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_index_write_assign_fu_111_p3);
    sensitive << ( ap_reg_ppstg_i_index_read_reg_134_pp0_it6 );
    sensitive << ( tmp_6_reg_160 );
    sensitive << ( tmp_7_reg_166 );

    SC_METHOD(thread_agg_result_sample_write_assign_fu_105_p3);
    sensitive << ( tmp_6_reg_160 );
    sensitive << ( tmp_8_reg_171 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( agg_result_index_write_assign_fu_111_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( agg_result_sample_write_assign_fu_105_p3 );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it6 );

    SC_METHOD(thread_grp_fu_77_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fu_77_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_samples_addr_read_reg_145 );

    SC_METHOD(thread_grp_fu_77_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_grp_fu_83_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fu_83_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppstg_i_index_read_reg_134_pp0_it2 );

    SC_METHOD(thread_grp_fu_83_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it3 );

    SC_METHOD(thread_grp_fu_88_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fu_88_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppstg_i_sample_read_reg_128_pp0_it2 );

    SC_METHOD(thread_grp_fu_88_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it3 );

    SC_METHOD(thread_indices_begin_address);

    SC_METHOD(thread_indices_begin_dataout);

    SC_METHOD(thread_indices_begin_req_din);

    SC_METHOD(thread_indices_begin_req_write);

    SC_METHOD(thread_indices_begin_rsp_read);

    SC_METHOD(thread_indices_begin_size);

    SC_METHOD(thread_indices_samples_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( tmp_s_fu_63_p1 );

    SC_METHOD(thread_indices_samples_dataout);

    SC_METHOD(thread_indices_samples_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_samples_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_samples_rsp_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_samples_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_stride_address);

    SC_METHOD(thread_indices_stride_dataout);

    SC_METHOD(thread_indices_stride_req_din);

    SC_METHOD(thread_indices_stride_req_write);

    SC_METHOD(thread_indices_stride_rsp_read);

    SC_METHOD(thread_indices_stride_size);

    SC_METHOD(thread_tmp_6_fu_99_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( tmp_5_reg_155 );

    SC_METHOD(thread_tmp_6_fu_99_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( tmp_cast_fu_93_p1 );
    sensitive << ( tmp_6_fu_99_p1 );

    SC_METHOD(thread_tmp_cast_fu_93_p1);
    sensitive << ( ap_reg_ppstg_i_sample_read_reg_128_pp0_it5 );

    SC_METHOD(thread_tmp_s_fu_63_p1);
    sensitive << ( i_index );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( indices_samples_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_CS_fsm = "0";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it5 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it6 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sample_iterator_next_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indices_samples_req_din, "(port)indices_samples_req_din");
    sc_trace(mVcdFile, indices_samples_req_full_n, "(port)indices_samples_req_full_n");
    sc_trace(mVcdFile, indices_samples_req_write, "(port)indices_samples_req_write");
    sc_trace(mVcdFile, indices_samples_rsp_empty_n, "(port)indices_samples_rsp_empty_n");
    sc_trace(mVcdFile, indices_samples_rsp_read, "(port)indices_samples_rsp_read");
    sc_trace(mVcdFile, indices_samples_address, "(port)indices_samples_address");
    sc_trace(mVcdFile, indices_samples_datain, "(port)indices_samples_datain");
    sc_trace(mVcdFile, indices_samples_dataout, "(port)indices_samples_dataout");
    sc_trace(mVcdFile, indices_samples_size, "(port)indices_samples_size");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, indices_begin_req_din, "(port)indices_begin_req_din");
    sc_trace(mVcdFile, indices_begin_req_full_n, "(port)indices_begin_req_full_n");
    sc_trace(mVcdFile, indices_begin_req_write, "(port)indices_begin_req_write");
    sc_trace(mVcdFile, indices_begin_rsp_empty_n, "(port)indices_begin_rsp_empty_n");
    sc_trace(mVcdFile, indices_begin_rsp_read, "(port)indices_begin_rsp_read");
    sc_trace(mVcdFile, indices_begin_address, "(port)indices_begin_address");
    sc_trace(mVcdFile, indices_begin_datain, "(port)indices_begin_datain");
    sc_trace(mVcdFile, indices_begin_dataout, "(port)indices_begin_dataout");
    sc_trace(mVcdFile, indices_begin_size, "(port)indices_begin_size");
    sc_trace(mVcdFile, indices_stride_req_din, "(port)indices_stride_req_din");
    sc_trace(mVcdFile, indices_stride_req_full_n, "(port)indices_stride_req_full_n");
    sc_trace(mVcdFile, indices_stride_req_write, "(port)indices_stride_req_write");
    sc_trace(mVcdFile, indices_stride_rsp_empty_n, "(port)indices_stride_rsp_empty_n");
    sc_trace(mVcdFile, indices_stride_rsp_read, "(port)indices_stride_rsp_read");
    sc_trace(mVcdFile, indices_stride_address, "(port)indices_stride_address");
    sc_trace(mVcdFile, indices_stride_datain, "(port)indices_stride_datain");
    sc_trace(mVcdFile, indices_stride_dataout, "(port)indices_stride_dataout");
    sc_trace(mVcdFile, indices_stride_size, "(port)indices_stride_size");
    sc_trace(mVcdFile, i_index, "(port)i_index");
    sc_trace(mVcdFile, i_sample, "(port)i_sample");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it4, "ap_reg_ppiten_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it5, "ap_reg_ppiten_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it6, "ap_reg_ppiten_pp0_it6");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it7, "ap_reg_ppiten_pp0_it7");
    sc_trace(mVcdFile, i_sample_read_reg_128, "i_sample_read_reg_128");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_128_pp0_it1, "ap_reg_ppstg_i_sample_read_reg_128_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_128_pp0_it2, "ap_reg_ppstg_i_sample_read_reg_128_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_128_pp0_it3, "ap_reg_ppstg_i_sample_read_reg_128_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_128_pp0_it4, "ap_reg_ppstg_i_sample_read_reg_128_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_128_pp0_it5, "ap_reg_ppstg_i_sample_read_reg_128_pp0_it5");
    sc_trace(mVcdFile, i_index_read_reg_134, "i_index_read_reg_134");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it1, "ap_reg_ppstg_i_index_read_reg_134_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it2, "ap_reg_ppstg_i_index_read_reg_134_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it3, "ap_reg_ppstg_i_index_read_reg_134_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it4, "ap_reg_ppstg_i_index_read_reg_134_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it5, "ap_reg_ppstg_i_index_read_reg_134_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_134_pp0_it6, "ap_reg_ppstg_i_index_read_reg_134_pp0_it6");
    sc_trace(mVcdFile, indices_samples_addr_read_reg_145, "indices_samples_addr_read_reg_145");
    sc_trace(mVcdFile, grp_fu_77_p2, "grp_fu_77_p2");
    sc_trace(mVcdFile, tmp_5_reg_155, "tmp_5_reg_155");
    sc_trace(mVcdFile, tmp_6_fu_99_p2, "tmp_6_fu_99_p2");
    sc_trace(mVcdFile, tmp_6_reg_160, "tmp_6_reg_160");
    sc_trace(mVcdFile, grp_fu_83_p2, "grp_fu_83_p2");
    sc_trace(mVcdFile, tmp_7_reg_166, "tmp_7_reg_166");
    sc_trace(mVcdFile, grp_fu_88_p2, "grp_fu_88_p2");
    sc_trace(mVcdFile, tmp_8_reg_171, "tmp_8_reg_171");
    sc_trace(mVcdFile, tmp_s_fu_63_p1, "tmp_s_fu_63_p1");
    sc_trace(mVcdFile, grp_fu_77_p0, "grp_fu_77_p0");
    sc_trace(mVcdFile, grp_fu_77_p1, "grp_fu_77_p1");
    sc_trace(mVcdFile, grp_fu_83_p0, "grp_fu_83_p0");
    sc_trace(mVcdFile, grp_fu_83_p1, "grp_fu_83_p1");
    sc_trace(mVcdFile, grp_fu_88_p0, "grp_fu_88_p0");
    sc_trace(mVcdFile, grp_fu_88_p1, "grp_fu_88_p1");
    sc_trace(mVcdFile, tmp_cast_fu_93_p1, "tmp_cast_fu_93_p1");
    sc_trace(mVcdFile, tmp_6_fu_99_p1, "tmp_6_fu_99_p1");
    sc_trace(mVcdFile, agg_result_index_write_assign_fu_111_p3, "agg_result_index_write_assign_fu_111_p3");
    sc_trace(mVcdFile, agg_result_sample_write_assign_fu_105_p3, "agg_result_sample_write_assign_fu_105_p3");
    sc_trace(mVcdFile, grp_fu_77_ce, "grp_fu_77_ce");
    sc_trace(mVcdFile, grp_fu_83_ce, "grp_fu_83_ce");
    sc_trace(mVcdFile, grp_fu_88_ce, "grp_fu_88_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
#endif

    }
}

sample_iterator_next::~sample_iterator_next() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30;
    delete nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31;
    delete nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32;
}

void sample_iterator_next::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it4 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it4 = ap_reg_ppiten_pp0_it3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it5 = ap_reg_ppiten_pp0_it4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it6 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it6 = ap_reg_ppiten_pp0_it5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it7 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it7 = ap_reg_ppiten_pp0_it6.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_reg_ppstg_i_index_read_reg_134_pp0_it1 = i_index_read_reg_134.read();
        ap_reg_ppstg_i_index_read_reg_134_pp0_it2 = ap_reg_ppstg_i_index_read_reg_134_pp0_it1.read();
        ap_reg_ppstg_i_index_read_reg_134_pp0_it3 = ap_reg_ppstg_i_index_read_reg_134_pp0_it2.read();
        ap_reg_ppstg_i_index_read_reg_134_pp0_it4 = ap_reg_ppstg_i_index_read_reg_134_pp0_it3.read();
        ap_reg_ppstg_i_index_read_reg_134_pp0_it5 = ap_reg_ppstg_i_index_read_reg_134_pp0_it4.read();
        ap_reg_ppstg_i_index_read_reg_134_pp0_it6 = ap_reg_ppstg_i_index_read_reg_134_pp0_it5.read();
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it1 = i_sample_read_reg_128.read();
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it2 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it1.read();
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it3 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it2.read();
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it4 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it3.read();
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it5 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it4.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        i_index_read_reg_134 = i_index.read();
        i_sample_read_reg_128 = i_sample.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_samples_addr_read_reg_145 = indices_samples_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        tmp_5_reg_155 = grp_fu_77_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it6.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        tmp_6_reg_160 = tmp_6_fu_99_p2.read();
        tmp_7_reg_166 = grp_fu_83_p2.read();
        tmp_8_reg_171 = grp_fu_88_p2.read();
    }
}

void sample_iterator_next::thread_agg_result_index_write_assign_fu_111_p3() {
    agg_result_index_write_assign_fu_111_p3 = (!tmp_6_reg_160.read()[0].is_01())? sc_lv<16>(): ((tmp_6_reg_160.read()[0].to_bool())? ap_reg_ppstg_i_index_read_reg_134_pp0_it6.read(): tmp_7_reg_166.read());
}

void sample_iterator_next::thread_agg_result_sample_write_assign_fu_105_p3() {
    agg_result_sample_write_assign_fu_105_p3 = (!tmp_6_reg_160.read()[0].is_01())? sc_lv<16>(): ((tmp_6_reg_160.read()[0].to_bool())? tmp_8_reg_171.read(): ap_const_lv16_0);
}

void sample_iterator_next::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it7.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it7.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void sample_iterator_next::thread_ap_return_0() {
    ap_return_0 = agg_result_index_write_assign_fu_111_p3.read();
}

void sample_iterator_next::thread_ap_return_1() {
    ap_return_1 = agg_result_sample_write_assign_fu_105_p3.read();
}

void sample_iterator_next::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_grp_fu_77_ce() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fu_77_ce = ap_const_logic_1;
    } else {
        grp_fu_77_ce = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_grp_fu_77_p0() {
    grp_fu_77_p0 = esl_zext<17,16>(indices_samples_addr_read_reg_145.read());
}

void sample_iterator_next::thread_grp_fu_77_p1() {
    grp_fu_77_p1 = ap_const_lv17_1FFFF;
}

void sample_iterator_next::thread_grp_fu_83_ce() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fu_83_ce = ap_const_logic_1;
    } else {
        grp_fu_83_ce = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_grp_fu_83_p0() {
    grp_fu_83_p0 = ap_reg_ppstg_i_index_read_reg_134_pp0_it2.read();
}

void sample_iterator_next::thread_grp_fu_83_p1() {
    grp_fu_83_p1 = ap_const_lv16_1;
}

void sample_iterator_next::thread_grp_fu_88_ce() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fu_88_ce = ap_const_logic_1;
    } else {
        grp_fu_88_ce = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_grp_fu_88_p0() {
    grp_fu_88_p0 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it2.read();
}

void sample_iterator_next::thread_grp_fu_88_p1() {
    grp_fu_88_p1 = ap_const_lv16_1;
}

void sample_iterator_next::thread_indices_begin_address() {
    indices_begin_address = ap_const_lv32_0;
}

void sample_iterator_next::thread_indices_begin_dataout() {
    indices_begin_dataout = ap_const_lv32_0;
}

void sample_iterator_next::thread_indices_begin_req_din() {
    indices_begin_req_din = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_begin_req_write() {
    indices_begin_req_write = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_begin_rsp_read() {
    indices_begin_rsp_read = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_begin_size() {
    indices_begin_size = ap_const_lv32_0;
}

void sample_iterator_next::thread_indices_samples_address() {
    indices_samples_address = tmp_s_fu_63_p1.read();
}

void sample_iterator_next::thread_indices_samples_dataout() {
    indices_samples_dataout = ap_const_lv16_0;
}

void sample_iterator_next::thread_indices_samples_req_din() {
    indices_samples_req_din = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_samples_req_write() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_samples_req_write = ap_const_logic_1;
    } else {
        indices_samples_req_write = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_samples_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_samples_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_samples_rsp_read = ap_const_logic_1;
    } else {
        indices_samples_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_samples_size() {
    indices_samples_size = ap_const_lv32_1;
}

void sample_iterator_next::thread_indices_stride_address() {
    indices_stride_address = ap_const_lv32_0;
}

void sample_iterator_next::thread_indices_stride_dataout() {
    indices_stride_dataout = ap_const_lv8_0;
}

void sample_iterator_next::thread_indices_stride_req_din() {
    indices_stride_req_din = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_stride_req_write() {
    indices_stride_req_write = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_stride_rsp_read() {
    indices_stride_rsp_read = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_stride_size() {
    indices_stride_size = ap_const_lv32_0;
}

void sample_iterator_next::thread_tmp_6_fu_99_p1() {
    tmp_6_fu_99_p1 = esl_sext<18,17>(tmp_5_reg_155.read());
}

void sample_iterator_next::thread_tmp_6_fu_99_p2() {
    tmp_6_fu_99_p2 = (!tmp_cast_fu_93_p1.read().is_01() || !tmp_6_fu_99_p1.read().is_01())? sc_lv<1>(): (sc_bigint<18>(tmp_cast_fu_93_p1.read()) < sc_bigint<18>(tmp_6_fu_99_p1.read()));
}

void sample_iterator_next::thread_tmp_cast_fu_93_p1() {
    tmp_cast_fu_93_p1 = esl_zext<18,16>(ap_reg_ppstg_i_sample_read_reg_128_pp0_it5.read());
}

void sample_iterator_next::thread_tmp_s_fu_63_p1() {
    tmp_s_fu_63_p1 = esl_zext<32,16>(i_index.read());
}

void sample_iterator_next::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}
}

