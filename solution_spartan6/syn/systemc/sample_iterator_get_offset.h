// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _sample_iterator_get_offset_HH_
#define _sample_iterator_get_offset_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4.h"
#include "nfa_accept_samples_generic_hw_add_32ns_32ns_32_8.h"

namespace ap_rtl {

struct sample_iterator_get_offset : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > indices_stride_req_din;
    sc_in< sc_logic > indices_stride_req_full_n;
    sc_out< sc_logic > indices_stride_req_write;
    sc_in< sc_logic > indices_stride_rsp_empty_n;
    sc_out< sc_logic > indices_stride_rsp_read;
    sc_out< sc_lv<32> > indices_stride_address;
    sc_in< sc_lv<8> > indices_stride_datain;
    sc_out< sc_lv<8> > indices_stride_dataout;
    sc_out< sc_lv<32> > indices_stride_size;
    sc_out< sc_logic > indices_begin_req_din;
    sc_in< sc_logic > indices_begin_req_full_n;
    sc_out< sc_logic > indices_begin_req_write;
    sc_in< sc_logic > indices_begin_rsp_empty_n;
    sc_out< sc_logic > indices_begin_rsp_read;
    sc_out< sc_lv<32> > indices_begin_address;
    sc_in< sc_lv<32> > indices_begin_datain;
    sc_out< sc_lv<32> > indices_begin_dataout;
    sc_out< sc_lv<32> > indices_begin_size;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<16> > i_index;
    sc_in< sc_lv<16> > i_sample;
    sc_out< sc_logic > indices_samples_req_din;
    sc_in< sc_logic > indices_samples_req_full_n;
    sc_out< sc_logic > indices_samples_req_write;
    sc_in< sc_logic > indices_samples_rsp_empty_n;
    sc_out< sc_logic > indices_samples_rsp_read;
    sc_out< sc_lv<32> > indices_samples_address;
    sc_in< sc_lv<16> > indices_samples_datain;
    sc_out< sc_lv<16> > indices_samples_dataout;
    sc_out< sc_lv<32> > indices_samples_size;
    sc_in< sc_lv<32> > sample_buffer_size;
    sc_in< sc_lv<16> > sample_length;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    sample_iterator_get_offset(sc_module_name name);
    SC_HAS_PROCESS(sample_iterator_get_offset);

    ~sample_iterator_get_offset();

    sc_trace_file* mVcdFile;

    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4<0,4,16,8,24>* nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0;
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8<1,8,32,32,32>* nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it4;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it5;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it6;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it7;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it8;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it9;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it10;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it11;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it12;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it13;
    sc_signal< sc_lv<16> > i_sample_read_reg_130;
    sc_signal< sc_lv<16> > ap_reg_ppstg_i_sample_read_reg_130_pp0_it1;
    sc_signal< sc_lv<32> > tmp_fu_93_p1;
    sc_signal< sc_lv<32> > tmp_reg_135;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_reg_135_pp0_it1;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_reg_135_pp0_it2;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_reg_135_pp0_it3;
    sc_signal< sc_lv<8> > indices_stride_addr_read_reg_145;
    sc_signal< sc_lv<32> > indices_begin_addr_read_reg_165;
    sc_signal< sc_lv<24> > grp_fu_110_p2;
    sc_signal< sc_lv<24> > tmp_1_reg_170;
    sc_signal< sc_lv<16> > grp_fu_110_p0;
    sc_signal< sc_lv<8> > grp_fu_110_p1;
    sc_signal< sc_lv<32> > grp_fu_125_p0;
    sc_signal< sc_lv<32> > grp_fu_125_p1;
    sc_signal< sc_logic > grp_fu_110_ce;
    sc_signal< sc_lv<32> > grp_fu_125_p2;
    sc_signal< sc_logic > grp_fu_125_ce;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    sc_signal< sc_lv<24> > grp_fu_110_p00;
    sc_signal< sc_lv<24> > grp_fu_110_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_return();
    void thread_ap_sig_pprstidle_pp0();
    void thread_grp_fu_110_ce();
    void thread_grp_fu_110_p0();
    void thread_grp_fu_110_p00();
    void thread_grp_fu_110_p1();
    void thread_grp_fu_110_p10();
    void thread_grp_fu_125_ce();
    void thread_grp_fu_125_p0();
    void thread_grp_fu_125_p1();
    void thread_indices_begin_address();
    void thread_indices_begin_dataout();
    void thread_indices_begin_req_din();
    void thread_indices_begin_req_write();
    void thread_indices_begin_rsp_read();
    void thread_indices_begin_size();
    void thread_indices_samples_address();
    void thread_indices_samples_dataout();
    void thread_indices_samples_req_din();
    void thread_indices_samples_req_write();
    void thread_indices_samples_rsp_read();
    void thread_indices_samples_size();
    void thread_indices_stride_address();
    void thread_indices_stride_dataout();
    void thread_indices_stride_req_din();
    void thread_indices_stride_req_write();
    void thread_indices_stride_rsp_read();
    void thread_indices_stride_size();
    void thread_tmp_fu_93_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
