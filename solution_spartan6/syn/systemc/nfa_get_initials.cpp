// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "nfa_get_initials.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nfa_get_initials::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nfa_get_initials::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> nfa_get_initials::ap_ST_pp0_stg0_fsm_0 = "1";
const sc_lv<1> nfa_get_initials::ap_ST_pp0_stg1_fsm_1 = "0";
const sc_lv<32> nfa_get_initials::ap_const_lv32_1 = "1";
const sc_lv<32> nfa_get_initials::ap_const_lv32_0 = "00000000000000000000000000000000";

nfa_get_initials::nfa_get_initials(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0_preg );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( nfa_initials_buckets_read_reg_55 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( nfa_initials_buckets_datain );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_sig_bdd_116);
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_sig_bdd_117);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );

    SC_METHOD(thread_ap_sig_bdd_119);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_nfa_initials_buckets_address);
    sensitive << ( ap_sig_bdd_117 );
    sensitive << ( ap_sig_bdd_119 );
    sensitive << ( ap_sig_bdd_116 );

    SC_METHOD(thread_nfa_initials_buckets_dataout);

    SC_METHOD(thread_nfa_initials_buckets_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_nfa_initials_buckets_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_nfa_initials_buckets_rsp_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_nfa_initials_buckets_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( nfa_initials_buckets_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_CS_fsm = "1";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it0_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nfa_get_initials_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, nfa_initials_buckets_req_din, "(port)nfa_initials_buckets_req_din");
    sc_trace(mVcdFile, nfa_initials_buckets_req_full_n, "(port)nfa_initials_buckets_req_full_n");
    sc_trace(mVcdFile, nfa_initials_buckets_req_write, "(port)nfa_initials_buckets_req_write");
    sc_trace(mVcdFile, nfa_initials_buckets_rsp_empty_n, "(port)nfa_initials_buckets_rsp_empty_n");
    sc_trace(mVcdFile, nfa_initials_buckets_rsp_read, "(port)nfa_initials_buckets_rsp_read");
    sc_trace(mVcdFile, nfa_initials_buckets_address, "(port)nfa_initials_buckets_address");
    sc_trace(mVcdFile, nfa_initials_buckets_datain, "(port)nfa_initials_buckets_datain");
    sc_trace(mVcdFile, nfa_initials_buckets_dataout, "(port)nfa_initials_buckets_dataout");
    sc_trace(mVcdFile, nfa_initials_buckets_size, "(port)nfa_initials_buckets_size");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, nfa_initials_buckets_read_reg_55, "nfa_initials_buckets_read_reg_55");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0_preg, "ap_reg_ppiten_pp0_it0_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
    sc_trace(mVcdFile, ap_sig_bdd_117, "ap_sig_bdd_117");
    sc_trace(mVcdFile, ap_sig_bdd_119, "ap_sig_bdd_119");
    sc_trace(mVcdFile, ap_sig_bdd_116, "ap_sig_bdd_116");
#endif

    }
}

nfa_get_initials::~nfa_get_initials() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void nfa_get_initials::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !(!esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0))))) {
            ap_reg_ppiten_pp0_it0_preg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !(!esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0))) && 
             !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        nfa_initials_buckets_read_reg_55 = nfa_initials_buckets_datain.read();
    }
}

void nfa_get_initials::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_ap_reg_ppiten_pp0_it0() {
    if (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read())) {
        ap_reg_ppiten_pp0_it0 = ap_start.read();
    } else {
        ap_reg_ppiten_pp0_it0 = ap_reg_ppiten_pp0_it0_preg.read();
    }
}

void nfa_get_initials::thread_ap_return_0() {
    ap_return_0 = nfa_initials_buckets_read_reg_55.read();
}

void nfa_get_initials::thread_ap_return_1() {
    ap_return_1 = nfa_initials_buckets_datain.read();
}

void nfa_get_initials::thread_ap_sig_bdd_116() {
    ap_sig_bdd_116 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()));
}

void nfa_get_initials::thread_ap_sig_bdd_117() {
    ap_sig_bdd_117 = (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0))));
}

void nfa_get_initials::thread_ap_sig_bdd_119() {
    ap_sig_bdd_119 = (esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)));
}

void nfa_get_initials::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_nfa_initials_buckets_address() {
    if (ap_sig_bdd_116.read()) {
        if (ap_sig_bdd_119.read()) {
            nfa_initials_buckets_address = ap_const_lv32_1;
        } else if (ap_sig_bdd_117.read()) {
            nfa_initials_buckets_address = ap_const_lv32_0;
        } else {
            nfa_initials_buckets_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        nfa_initials_buckets_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void nfa_get_initials::thread_nfa_initials_buckets_dataout() {
    nfa_initials_buckets_dataout = ap_const_lv32_0;
}

void nfa_get_initials::thread_nfa_initials_buckets_req_din() {
    nfa_initials_buckets_req_din = ap_const_logic_0;
}

void nfa_get_initials::thread_nfa_initials_buckets_req_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)))))) {
        nfa_initials_buckets_req_write = ap_const_logic_1;
    } else {
        nfa_initials_buckets_req_write = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_nfa_initials_buckets_rsp_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg1_fsm_1, ap_CS_fsm.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)))))) {
        nfa_initials_buckets_rsp_read = ap_const_logic_1;
    } else {
        nfa_initials_buckets_rsp_read = ap_const_logic_0;
    }
}

void nfa_get_initials::thread_nfa_initials_buckets_size() {
    nfa_initials_buckets_size = ap_const_lv32_1;
}

void nfa_get_initials::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 1 : 
            if ((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_pprstidle_pp0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            } else if ((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_pprstidle_pp0.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            }
            break;
        case 0 : 
            if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(nfa_initials_buckets_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}
}

