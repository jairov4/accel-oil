// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sample_iterator_next (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indices_samples_req_din,
        indices_samples_req_full_n,
        indices_samples_req_write,
        indices_samples_rsp_empty_n,
        indices_samples_rsp_read,
        indices_samples_address,
        indices_samples_datain,
        indices_samples_dataout,
        indices_samples_size,
        ap_ce,
        indices_begin_req_din,
        indices_begin_req_full_n,
        indices_begin_req_write,
        indices_begin_rsp_empty_n,
        indices_begin_rsp_read,
        indices_begin_address,
        indices_begin_datain,
        indices_begin_dataout,
        indices_begin_size,
        indices_stride_req_din,
        indices_stride_req_full_n,
        indices_stride_req_write,
        indices_stride_rsp_empty_n,
        indices_stride_rsp_read,
        indices_stride_address,
        indices_stride_datain,
        indices_stride_dataout,
        indices_stride_size,
        i_index,
        i_sample,
        ap_return_0,
        ap_return_1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   indices_samples_req_din;
input   indices_samples_req_full_n;
output   indices_samples_req_write;
input   indices_samples_rsp_empty_n;
output   indices_samples_rsp_read;
output  [31:0] indices_samples_address;
input  [15:0] indices_samples_datain;
output  [15:0] indices_samples_dataout;
output  [31:0] indices_samples_size;
input   ap_ce;
output   indices_begin_req_din;
input   indices_begin_req_full_n;
output   indices_begin_req_write;
input   indices_begin_rsp_empty_n;
output   indices_begin_rsp_read;
output  [31:0] indices_begin_address;
input  [31:0] indices_begin_datain;
output  [31:0] indices_begin_dataout;
output  [31:0] indices_begin_size;
output   indices_stride_req_din;
input   indices_stride_req_full_n;
output   indices_stride_req_write;
input   indices_stride_rsp_empty_n;
output   indices_stride_rsp_read;
output  [31:0] indices_stride_address;
input  [7:0] indices_stride_datain;
output  [7:0] indices_stride_dataout;
output  [31:0] indices_stride_size;
input  [15:0] i_index;
input  [15:0] i_sample;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg indices_samples_req_write;
reg indices_samples_rsp_read;
reg   [0:0] ap_CS_fsm = 1'b0;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg   [15:0] i_sample_read_reg_128;
reg   [15:0] ap_reg_ppstg_i_sample_read_reg_128_pp0_it1;
reg   [15:0] ap_reg_ppstg_i_sample_read_reg_128_pp0_it2;
reg   [15:0] ap_reg_ppstg_i_sample_read_reg_128_pp0_it3;
reg   [15:0] ap_reg_ppstg_i_sample_read_reg_128_pp0_it4;
reg   [15:0] ap_reg_ppstg_i_sample_read_reg_128_pp0_it5;
reg   [15:0] i_index_read_reg_134;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it1;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it2;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it3;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it4;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it5;
reg   [15:0] ap_reg_ppstg_i_index_read_reg_134_pp0_it6;
reg   [15:0] indices_samples_addr_read_reg_145;
wire   [16:0] grp_fu_77_p2;
reg   [16:0] tmp_5_reg_155;
wire   [0:0] tmp_6_fu_99_p2;
reg   [0:0] tmp_6_reg_160;
wire   [15:0] grp_fu_83_p2;
reg   [15:0] tmp_7_reg_166;
wire   [15:0] grp_fu_88_p2;
reg   [15:0] tmp_8_reg_171;
wire   [31:0] tmp_s_fu_63_p1;
wire   [16:0] grp_fu_77_p0;
wire   [16:0] grp_fu_77_p1;
wire   [15:0] grp_fu_83_p0;
wire   [15:0] grp_fu_83_p1;
wire   [15:0] grp_fu_88_p0;
wire   [15:0] grp_fu_88_p1;
wire   [17:0] tmp_cast_fu_93_p1;
wire   [17:0] tmp_6_fu_99_p1;
wire   [15:0] agg_result_index_write_assign_fu_111_p3;
wire   [15:0] agg_result_sample_write_assign_fu_105_p3;
reg    grp_fu_77_ce;
reg    grp_fu_83_ce;
reg    grp_fu_88_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv17_1FFFF = 17'b11111111111111111;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;


nfa_accept_samples_generic_hw_add_17ns_17s_17_4 #(
    .ID( 30 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
nfa_accept_samples_generic_hw_add_17ns_17s_17_4_U30(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_77_p0 ),
    .din1( grp_fu_77_p1 ),
    .ce( grp_fu_77_ce ),
    .dout( grp_fu_77_p2 )
);

nfa_accept_samples_generic_hw_add_16ns_16ns_16_4 #(
    .ID( 31 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U31(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_83_p0 ),
    .din1( grp_fu_83_p1 ),
    .ce( grp_fu_83_ce ),
    .dout( grp_fu_83_p2 )
);

nfa_accept_samples_generic_hw_add_16ns_16ns_16_4 #(
    .ID( 32 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U32(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_88_p0 ),
    .din1( grp_fu_88_p1 ),
    .ce( grp_fu_88_ce ),
    .dout( grp_fu_88_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
        end
    end
end

/// ap_reg_ppiten_pp0_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_ppstg_i_index_read_reg_134_pp0_it1 <= i_index_read_reg_134;
        ap_reg_ppstg_i_index_read_reg_134_pp0_it2 <= ap_reg_ppstg_i_index_read_reg_134_pp0_it1;
        ap_reg_ppstg_i_index_read_reg_134_pp0_it3 <= ap_reg_ppstg_i_index_read_reg_134_pp0_it2;
        ap_reg_ppstg_i_index_read_reg_134_pp0_it4 <= ap_reg_ppstg_i_index_read_reg_134_pp0_it3;
        ap_reg_ppstg_i_index_read_reg_134_pp0_it5 <= ap_reg_ppstg_i_index_read_reg_134_pp0_it4;
        ap_reg_ppstg_i_index_read_reg_134_pp0_it6 <= ap_reg_ppstg_i_index_read_reg_134_pp0_it5;
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it1 <= i_sample_read_reg_128;
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it2 <= ap_reg_ppstg_i_sample_read_reg_128_pp0_it1;
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it3 <= ap_reg_ppstg_i_sample_read_reg_128_pp0_it2;
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it4 <= ap_reg_ppstg_i_sample_read_reg_128_pp0_it3;
        ap_reg_ppstg_i_sample_read_reg_128_pp0_it5 <= ap_reg_ppstg_i_sample_read_reg_128_pp0_it4;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        i_index_read_reg_134 <= i_index;
        i_sample_read_reg_128 <= i_sample;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        indices_samples_addr_read_reg_145 <= indices_samples_datain;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        tmp_5_reg_155 <= grp_fu_77_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        tmp_6_reg_160 <= tmp_6_fu_99_p2;
        tmp_7_reg_166 <= grp_fu_83_p2;
        tmp_8_reg_171 <= grp_fu_88_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it7 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6 or ap_reg_ppiten_pp0_it7)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it4) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it5) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it6) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it7))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it4) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it5) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it6) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// grp_fu_77_ce assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        grp_fu_77_ce = ap_const_logic_1;
    end else begin
        grp_fu_77_ce = ap_const_logic_0;
    end
end

/// grp_fu_83_ce assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        grp_fu_83_ce = ap_const_logic_1;
    end else begin
        grp_fu_83_ce = ap_const_logic_0;
    end
end

/// grp_fu_88_ce assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        grp_fu_88_ce = ap_const_logic_1;
    end else begin
        grp_fu_88_ce = ap_const_logic_0;
    end
end

/// indices_samples_req_write assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        indices_samples_req_write = ap_const_logic_1;
    end else begin
        indices_samples_req_write = ap_const_logic_0;
    end
end

/// indices_samples_rsp_read assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (indices_samples_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        indices_samples_rsp_read = ap_const_logic_1;
    end else begin
        indices_samples_rsp_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or indices_samples_rsp_empty_n or ap_ce or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign agg_result_index_write_assign_fu_111_p3 = ((tmp_6_reg_160)? ap_reg_ppstg_i_index_read_reg_134_pp0_it6: tmp_7_reg_166);
assign agg_result_sample_write_assign_fu_105_p3 = ((tmp_6_reg_160)? tmp_8_reg_171: ap_const_lv16_0);
assign ap_reg_ppiten_pp0_it0 = ap_start;
assign ap_return_0 = agg_result_index_write_assign_fu_111_p3;
assign ap_return_1 = agg_result_sample_write_assign_fu_105_p3;
assign grp_fu_77_p0 = $unsigned(indices_samples_addr_read_reg_145);
assign grp_fu_77_p1 = ap_const_lv17_1FFFF;
assign grp_fu_83_p0 = ap_reg_ppstg_i_index_read_reg_134_pp0_it2;
assign grp_fu_83_p1 = ap_const_lv16_1;
assign grp_fu_88_p0 = ap_reg_ppstg_i_sample_read_reg_128_pp0_it2;
assign grp_fu_88_p1 = ap_const_lv16_1;
assign indices_begin_address = ap_const_lv32_0;
assign indices_begin_dataout = ap_const_lv32_0;
assign indices_begin_req_din = ap_const_logic_0;
assign indices_begin_req_write = ap_const_logic_0;
assign indices_begin_rsp_read = ap_const_logic_0;
assign indices_begin_size = ap_const_lv32_0;
assign indices_samples_address = tmp_s_fu_63_p1;
assign indices_samples_dataout = ap_const_lv16_0;
assign indices_samples_req_din = ap_const_logic_0;
assign indices_samples_size = ap_const_lv32_1;
assign indices_stride_address = ap_const_lv32_0;
assign indices_stride_dataout = ap_const_lv8_0;
assign indices_stride_req_din = ap_const_logic_0;
assign indices_stride_req_write = ap_const_logic_0;
assign indices_stride_rsp_read = ap_const_logic_0;
assign indices_stride_size = ap_const_lv32_0;
assign tmp_6_fu_99_p1 = $signed(tmp_5_reg_155);
assign tmp_6_fu_99_p2 = ($signed(tmp_cast_fu_93_p1) < $signed(tmp_6_fu_99_p1)? 1'b1: 1'b0);
assign tmp_cast_fu_93_p1 = $unsigned(ap_reg_ppstg_i_sample_read_reg_128_pp0_it5);
assign tmp_s_fu_63_p1 = $unsigned(i_index);


endmodule //sample_iterator_next

