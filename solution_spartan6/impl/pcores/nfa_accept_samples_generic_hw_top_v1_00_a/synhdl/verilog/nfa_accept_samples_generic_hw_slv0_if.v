// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module nfa_accept_samples_generic_hw_slv0_if
#(parameter
    C_ADDR_WIDTH = 7,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    output wire                      interrupt,
    // user signals
    output wire [7:0]                I_nfa_symbols,
    output wire [31:0]               I_sample_buffer_length,
    output wire [15:0]               I_sample_length,
    output wire [15:0]               I_i_size,
    output wire [15:0]               I_begin_index,
    output wire [15:0]               I_begin_sample,
    output wire [15:0]               I_end_index,
    output wire [15:0]               I_end_sample,
    output wire [0:0]                I_stop_on_first,
    output wire [0:0]                I_accept,
    output wire                      I_ap_start,
    input  wire                      O_ap_ready,
    input  wire                      O_ap_done,
    input  wire                      O_ap_idle,
    input  wire [31:0]               O_ap_return
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : reserved
// 0x14 : Data signal of nfa_symbols
//        bit 7~0 - nfa_symbols[7:0] (Read/Write)
//        others  - reserved
// 0x18 : reserved
// 0x1c : Data signal of sample_buffer_length
//        bit 31~0 - sample_buffer_length[31:0] (Read/Write)
// 0x20 : reserved
// 0x24 : Data signal of sample_length
//        bit 15~0 - sample_length[15:0] (Read/Write)
//        others   - reserved
// 0x28 : reserved
// 0x2c : Data signal of i_size
//        bit 15~0 - i_size[15:0] (Read/Write)
//        others   - reserved
// 0x30 : reserved
// 0x34 : Data signal of begin_index
//        bit 15~0 - begin_index[15:0] (Read/Write)
//        others   - reserved
// 0x38 : reserved
// 0x3c : Data signal of begin_sample
//        bit 15~0 - begin_sample[15:0] (Read/Write)
//        others   - reserved
// 0x40 : reserved
// 0x44 : Data signal of end_index
//        bit 15~0 - end_index[15:0] (Read/Write)
//        others   - reserved
// 0x48 : reserved
// 0x4c : Data signal of end_sample
//        bit 15~0 - end_sample[15:0] (Read/Write)
//        others   - reserved
// 0x50 : reserved
// 0x54 : Data signal of stop_on_first
//        bit 0  - stop_on_first[0] (Read/Write)
//        others - reserved
// 0x58 : reserved
// 0x5c : Data signal of accept
//        bit 0  - accept[0] (Read/Write)
//        others - reserved
// 0x60 : Data signal of ap_return
//        bit 31~0 - ap_return[31:0] (Read)
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 7;

// address
localparam
    ADDR_AP_CTRL                     = 7'h00,
    ADDR_GIE                         = 7'h04,
    ADDR_IER                         = 7'h08,
    ADDR_ISR                         = 7'h0c,
    ADDR_NFA_SYMBOLS_CTRL            = 7'h10,
    ADDR_NFA_SYMBOLS_DATA_0          = 7'h14,
    ADDR_SAMPLE_BUFFER_LENGTH_CTRL   = 7'h18,
    ADDR_SAMPLE_BUFFER_LENGTH_DATA_0 = 7'h1c,
    ADDR_SAMPLE_LENGTH_CTRL          = 7'h20,
    ADDR_SAMPLE_LENGTH_DATA_0        = 7'h24,
    ADDR_I_SIZE_CTRL                 = 7'h28,
    ADDR_I_SIZE_DATA_0               = 7'h2c,
    ADDR_BEGIN_INDEX_CTRL            = 7'h30,
    ADDR_BEGIN_INDEX_DATA_0          = 7'h34,
    ADDR_BEGIN_SAMPLE_CTRL           = 7'h38,
    ADDR_BEGIN_SAMPLE_DATA_0         = 7'h3c,
    ADDR_END_INDEX_CTRL              = 7'h40,
    ADDR_END_INDEX_DATA_0            = 7'h44,
    ADDR_END_SAMPLE_CTRL             = 7'h48,
    ADDR_END_SAMPLE_DATA_0           = 7'h4c,
    ADDR_STOP_ON_FIRST_CTRL          = 7'h50,
    ADDR_STOP_ON_FIRST_DATA_0        = 7'h54,
    ADDR_ACCEPT_CTRL                 = 7'h58,
    ADDR_ACCEPT_DATA_0               = 7'h5c,
    ADDR_AP_RETURN_0                 = 7'h60;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire                 ap_idle;
reg                  ap_done;
wire                 ap_ready;
reg                  ap_start;
reg                  auto_restart;
reg                  gie;
reg  [1:0]           ier;
reg  [1:0]           isr;
reg  [7:0]           _nfa_symbols;
reg  [31:0]          _sample_buffer_length;
reg  [15:0]          _sample_length;
reg  [15:0]          _i_size;
reg  [15:0]          _begin_index;
reg  [15:0]          _begin_sample;
reg  [15:0]          _end_index;
reg  [15:0]          _end_sample;
reg  [0:0]           _stop_on_first;
reg  [0:0]           _accept;
wire [31:0]          ap_return;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_AP_CTRL: begin
                rdata[0] <= ap_start;
                rdata[1] <= ap_done;
                rdata[2] <= ap_idle;
                rdata[3] <= ap_ready;
                rdata[7] <= auto_restart;
            end
            ADDR_GIE: begin
                rdata <= gie;
            end
            ADDR_IER: begin
                rdata <= ier;
            end
            ADDR_ISR: begin
                rdata <= isr;
            end
            ADDR_NFA_SYMBOLS_DATA_0: begin
                rdata <= _nfa_symbols[7:0];
            end
            ADDR_SAMPLE_BUFFER_LENGTH_DATA_0: begin
                rdata <= _sample_buffer_length[31:0];
            end
            ADDR_SAMPLE_LENGTH_DATA_0: begin
                rdata <= _sample_length[15:0];
            end
            ADDR_I_SIZE_DATA_0: begin
                rdata <= _i_size[15:0];
            end
            ADDR_BEGIN_INDEX_DATA_0: begin
                rdata <= _begin_index[15:0];
            end
            ADDR_BEGIN_SAMPLE_DATA_0: begin
                rdata <= _begin_sample[15:0];
            end
            ADDR_END_INDEX_DATA_0: begin
                rdata <= _end_index[15:0];
            end
            ADDR_END_SAMPLE_DATA_0: begin
                rdata <= _end_sample[15:0];
            end
            ADDR_STOP_ON_FIRST_DATA_0: begin
                rdata <= _stop_on_first[0:0];
            end
            ADDR_ACCEPT_DATA_0: begin
                rdata <= _accept[0:0];
            end
            ADDR_AP_RETURN_0: begin
                rdata <= ap_return[31:0];
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign interrupt              = gie & (|isr);
assign I_ap_start             = ap_start;
assign ap_idle                = O_ap_idle;
assign ap_ready               = O_ap_ready;
assign I_nfa_symbols          = _nfa_symbols;
assign I_sample_buffer_length = _sample_buffer_length;
assign I_sample_length        = _sample_length;
assign I_i_size               = _i_size;
assign I_begin_index          = _begin_index;
assign I_begin_sample         = _begin_sample;
assign I_end_index            = _end_index;
assign I_end_sample           = _end_sample;
assign I_stop_on_first        = _stop_on_first;
assign I_accept               = _accept;
assign ap_return              = O_ap_return;

// ap_start
always @(posedge ACLK) begin
    if (~ARESETN)
        ap_start <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
        ap_start <= 1'b1;
    else if (O_ap_ready)
        ap_start <= auto_restart; // clear on handshake/auto restart
end

// ap_done
always @(posedge ACLK) begin
    if (~ARESETN)
        ap_done <= 1'b0;
    else if (O_ap_done)
        ap_done <= 1'b1;
    else if (ar_hs && raddr == ADDR_AP_CTRL)
        ap_done <= 1'b0; // clear on read
end

// auto_restart
always @(posedge ACLK) begin
    if (~ARESETN)
        auto_restart <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
        auto_restart <=  WDATA[7];
end

// gie
always @(posedge ACLK) begin
    if (~ARESETN)
        gie <= 1'b0;
    else if (w_hs && waddr == ADDR_GIE && WSTRB[0])
        gie <= WDATA[0];
end

// ier
always @(posedge ACLK) begin
    if (~ARESETN)
        ier <= 1'b0;
    else if (w_hs && waddr == ADDR_IER && WSTRB[0])
        ier <= WDATA[1:0];
end

// isr[0]
always @(posedge ACLK) begin
    if (~ARESETN)
        isr[0] <= 1'b0;
    else if (ier[0] & O_ap_done)
        isr[0] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        isr[0] <= isr[0] ^ WDATA[0]; // toggle on write
end

// isr[1]
always @(posedge ACLK) begin
    if (~ARESETN)
        isr[1] <= 1'b0;
    else if (ier[1] & O_ap_ready)
        isr[1] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        isr[1] <= isr[1] ^ WDATA[1]; // toggle on write
end

// _nfa_symbols[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_NFA_SYMBOLS_DATA_0)
        _nfa_symbols[7:0] <= (WDATA[31:0] & wmask) | (_nfa_symbols[7:0] & ~wmask);
end

// _sample_buffer_length[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SAMPLE_BUFFER_LENGTH_DATA_0)
        _sample_buffer_length[31:0] <= (WDATA[31:0] & wmask) | (_sample_buffer_length[31:0] & ~wmask);
end

// _sample_length[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SAMPLE_LENGTH_DATA_0)
        _sample_length[15:0] <= (WDATA[31:0] & wmask) | (_sample_length[15:0] & ~wmask);
end

// _i_size[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_I_SIZE_DATA_0)
        _i_size[15:0] <= (WDATA[31:0] & wmask) | (_i_size[15:0] & ~wmask);
end

// _begin_index[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_BEGIN_INDEX_DATA_0)
        _begin_index[15:0] <= (WDATA[31:0] & wmask) | (_begin_index[15:0] & ~wmask);
end

// _begin_sample[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_BEGIN_SAMPLE_DATA_0)
        _begin_sample[15:0] <= (WDATA[31:0] & wmask) | (_begin_sample[15:0] & ~wmask);
end

// _end_index[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_END_INDEX_DATA_0)
        _end_index[15:0] <= (WDATA[31:0] & wmask) | (_end_index[15:0] & ~wmask);
end

// _end_sample[15:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_END_SAMPLE_DATA_0)
        _end_sample[15:0] <= (WDATA[31:0] & wmask) | (_end_sample[15:0] & ~wmask);
end

// _stop_on_first[0:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_STOP_ON_FIRST_DATA_0)
        _stop_on_first[0:0] <= (WDATA[31:0] & wmask) | (_stop_on_first[0:0] & ~wmask);
end

// _accept[0:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_ACCEPT_DATA_0)
        _accept[0:0] <= (WDATA[31:0] & wmask) | (_accept[0:0] & ~wmask);
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule
