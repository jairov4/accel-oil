## ==============================================================
## File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
## Version: 2013.4
## Copyright (C) 2013 Xilinx Inc. All rights reserved.
## 
## ==============================================================


BEGIN nfa_accept_samples_generic_hw_top

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VERILOG
OPTION ARCH_SUPPORT_MAP = (spartan6=DEVELOPMENT)
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION DESC = nfa_accept_samples_generic_hw_top

# OPTION STYLE = MIX
# OPTION RUN_NGCBUILD = TRUE

PORT aclk = "", DIR = I, SIGIS = Clk, BUS = M_AXI_NFA_INITIALS_BUCKETS:M_AXI_NFA_FINALS_BUCKETS:M_AXI_NFA_FORWARD_BUCKETS:M_AXI_SAMPLE_BUFFER:M_AXI_INDICES_BEGIN:M_AXI_INDICES_SAMPLES:M_AXI_INDICES_STRIDE:S_AXI_SLV0, ASSIGNMENT = REQUIRE
PORT aresetn = ARESETN, DIR = I, SIGIS = Rst, BUS = M_AXI_NFA_INITIALS_BUCKETS:M_AXI_NFA_FINALS_BUCKETS:M_AXI_NFA_FORWARD_BUCKETS:M_AXI_SAMPLE_BUFFER:M_AXI_INDICES_BEGIN:M_AXI_INDICES_SAMPLES:M_AXI_INDICES_STRIDE:S_AXI_SLV0, ASSIGNMENT = REQUIRE

#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_INDICES_BEGIN, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_INDICES_BEGIN_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_ID_WIDTH = 1, DT = integer, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_INDICES_BEGIN
PARAMETER C_M_AXI_INDICES_BEGIN_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_INDICES_BEGIN
## Ports
PORT m_axi_indices_begin_AWID = AWID, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_ID_WIDTH-1):0]
PORT m_axi_indices_begin_AWADDR = AWADDR, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_ADDR_WIDTH-1):0]
PORT m_axi_indices_begin_AWLEN = AWLEN, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [7:0]
PORT m_axi_indices_begin_AWSIZE = AWSIZE, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [2:0]
PORT m_axi_indices_begin_AWBURST = AWBURST, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [1:0]
PORT m_axi_indices_begin_AWLOCK = AWLOCK, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [1:0]
PORT m_axi_indices_begin_AWCACHE = AWCACHE, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [3:0]
PORT m_axi_indices_begin_AWPROT = AWPROT, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [2:0]
PORT m_axi_indices_begin_AWQOS = AWQOS, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [3:0]
PORT m_axi_indices_begin_AWUSER = AWUSER, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_begin_AWVALID = AWVALID, BUS = M_AXI_INDICES_BEGIN, DIR = O
PORT m_axi_indices_begin_AWREADY = AWREADY, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_WDATA = WDATA, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_DATA_WIDTH-1):0]
PORT m_axi_indices_begin_WSTRB = WSTRB, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [((C_M_AXI_INDICES_BEGIN_DATA_WIDTH/8)-1):0]
PORT m_axi_indices_begin_WLAST = WLAST, BUS = M_AXI_INDICES_BEGIN, DIR = O
PORT m_axi_indices_begin_WUSER = WUSER, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_begin_WVALID = WVALID, BUS = M_AXI_INDICES_BEGIN, DIR = O
PORT m_axi_indices_begin_WREADY = WREADY, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_BID = BID, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [(C_M_AXI_INDICES_BEGIN_ID_WIDTH-1):0]
PORT m_axi_indices_begin_BRESP = BRESP, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [1:0]
PORT m_axi_indices_begin_BUSER = BUSER, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [(C_M_AXI_INDICES_BEGIN_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_begin_BVALID = BVALID, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_BREADY = BREADY, BUS = M_AXI_INDICES_BEGIN, DIR = O
PORT m_axi_indices_begin_ARID = ARID, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_ID_WIDTH-1):0]
PORT m_axi_indices_begin_ARADDR = ARADDR, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_ADDR_WIDTH-1):0]
PORT m_axi_indices_begin_ARLEN = ARLEN, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [7:0]
PORT m_axi_indices_begin_ARSIZE = ARSIZE, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [2:0]
PORT m_axi_indices_begin_ARBURST = ARBURST, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [1:0]
PORT m_axi_indices_begin_ARLOCK = ARLOCK, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [1:0]
PORT m_axi_indices_begin_ARCACHE = ARCACHE, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [3:0]
PORT m_axi_indices_begin_ARPROT = ARPROT, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [2:0]
PORT m_axi_indices_begin_ARQOS = ARQOS, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [3:0]
PORT m_axi_indices_begin_ARUSER = ARUSER, BUS = M_AXI_INDICES_BEGIN, DIR = O, VEC = [(C_M_AXI_INDICES_BEGIN_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_begin_ARVALID = ARVALID, BUS = M_AXI_INDICES_BEGIN, DIR = O
PORT m_axi_indices_begin_ARREADY = ARREADY, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_RID = RID, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [(C_M_AXI_INDICES_BEGIN_ID_WIDTH-1):0]
PORT m_axi_indices_begin_RDATA = RDATA, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [(C_M_AXI_INDICES_BEGIN_DATA_WIDTH-1):0]
PORT m_axi_indices_begin_RRESP = RRESP, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [1:0]
PORT m_axi_indices_begin_RLAST = RLAST, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_RUSER = RUSER, BUS = M_AXI_INDICES_BEGIN, DIR = I, VEC = [(C_M_AXI_INDICES_BEGIN_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_BEGIN_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_begin_RVALID = RVALID, BUS = M_AXI_INDICES_BEGIN, DIR = I
PORT m_axi_indices_begin_RREADY = RREADY, BUS = M_AXI_INDICES_BEGIN, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_INDICES_SAMPLES, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_INDICES_SAMPLES_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_ID_WIDTH = 1, DT = integer, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_INDICES_SAMPLES
PARAMETER C_M_AXI_INDICES_SAMPLES_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_INDICES_SAMPLES
## Ports
PORT m_axi_indices_samples_AWID = AWID, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_ID_WIDTH-1):0]
PORT m_axi_indices_samples_AWADDR = AWADDR, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_ADDR_WIDTH-1):0]
PORT m_axi_indices_samples_AWLEN = AWLEN, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [7:0]
PORT m_axi_indices_samples_AWSIZE = AWSIZE, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [2:0]
PORT m_axi_indices_samples_AWBURST = AWBURST, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [1:0]
PORT m_axi_indices_samples_AWLOCK = AWLOCK, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [1:0]
PORT m_axi_indices_samples_AWCACHE = AWCACHE, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [3:0]
PORT m_axi_indices_samples_AWPROT = AWPROT, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [2:0]
PORT m_axi_indices_samples_AWQOS = AWQOS, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [3:0]
PORT m_axi_indices_samples_AWUSER = AWUSER, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_samples_AWVALID = AWVALID, BUS = M_AXI_INDICES_SAMPLES, DIR = O
PORT m_axi_indices_samples_AWREADY = AWREADY, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_WDATA = WDATA, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_DATA_WIDTH-1):0]
PORT m_axi_indices_samples_WSTRB = WSTRB, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [((C_M_AXI_INDICES_SAMPLES_DATA_WIDTH/8)-1):0]
PORT m_axi_indices_samples_WLAST = WLAST, BUS = M_AXI_INDICES_SAMPLES, DIR = O
PORT m_axi_indices_samples_WUSER = WUSER, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_samples_WVALID = WVALID, BUS = M_AXI_INDICES_SAMPLES, DIR = O
PORT m_axi_indices_samples_WREADY = WREADY, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_BID = BID, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [(C_M_AXI_INDICES_SAMPLES_ID_WIDTH-1):0]
PORT m_axi_indices_samples_BRESP = BRESP, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [1:0]
PORT m_axi_indices_samples_BUSER = BUSER, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [(C_M_AXI_INDICES_SAMPLES_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_samples_BVALID = BVALID, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_BREADY = BREADY, BUS = M_AXI_INDICES_SAMPLES, DIR = O
PORT m_axi_indices_samples_ARID = ARID, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_ID_WIDTH-1):0]
PORT m_axi_indices_samples_ARADDR = ARADDR, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_ADDR_WIDTH-1):0]
PORT m_axi_indices_samples_ARLEN = ARLEN, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [7:0]
PORT m_axi_indices_samples_ARSIZE = ARSIZE, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [2:0]
PORT m_axi_indices_samples_ARBURST = ARBURST, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [1:0]
PORT m_axi_indices_samples_ARLOCK = ARLOCK, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [1:0]
PORT m_axi_indices_samples_ARCACHE = ARCACHE, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [3:0]
PORT m_axi_indices_samples_ARPROT = ARPROT, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [2:0]
PORT m_axi_indices_samples_ARQOS = ARQOS, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [3:0]
PORT m_axi_indices_samples_ARUSER = ARUSER, BUS = M_AXI_INDICES_SAMPLES, DIR = O, VEC = [(C_M_AXI_INDICES_SAMPLES_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_samples_ARVALID = ARVALID, BUS = M_AXI_INDICES_SAMPLES, DIR = O
PORT m_axi_indices_samples_ARREADY = ARREADY, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_RID = RID, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [(C_M_AXI_INDICES_SAMPLES_ID_WIDTH-1):0]
PORT m_axi_indices_samples_RDATA = RDATA, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [(C_M_AXI_INDICES_SAMPLES_DATA_WIDTH-1):0]
PORT m_axi_indices_samples_RRESP = RRESP, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [1:0]
PORT m_axi_indices_samples_RLAST = RLAST, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_RUSER = RUSER, BUS = M_AXI_INDICES_SAMPLES, DIR = I, VEC = [(C_M_AXI_INDICES_SAMPLES_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_SAMPLES_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_samples_RVALID = RVALID, BUS = M_AXI_INDICES_SAMPLES, DIR = I
PORT m_axi_indices_samples_RREADY = RREADY, BUS = M_AXI_INDICES_SAMPLES, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_INDICES_STRIDE, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_INDICES_STRIDE_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_ID_WIDTH = 1, DT = integer, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_INDICES_STRIDE
PARAMETER C_M_AXI_INDICES_STRIDE_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_INDICES_STRIDE
## Ports
PORT m_axi_indices_stride_AWID = AWID, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_ID_WIDTH-1):0]
PORT m_axi_indices_stride_AWADDR = AWADDR, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_ADDR_WIDTH-1):0]
PORT m_axi_indices_stride_AWLEN = AWLEN, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [7:0]
PORT m_axi_indices_stride_AWSIZE = AWSIZE, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [2:0]
PORT m_axi_indices_stride_AWBURST = AWBURST, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [1:0]
PORT m_axi_indices_stride_AWLOCK = AWLOCK, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [1:0]
PORT m_axi_indices_stride_AWCACHE = AWCACHE, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [3:0]
PORT m_axi_indices_stride_AWPROT = AWPROT, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [2:0]
PORT m_axi_indices_stride_AWQOS = AWQOS, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [3:0]
PORT m_axi_indices_stride_AWUSER = AWUSER, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_stride_AWVALID = AWVALID, BUS = M_AXI_INDICES_STRIDE, DIR = O
PORT m_axi_indices_stride_AWREADY = AWREADY, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_WDATA = WDATA, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_DATA_WIDTH-1):0]
PORT m_axi_indices_stride_WSTRB = WSTRB, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [((C_M_AXI_INDICES_STRIDE_DATA_WIDTH/8)-1):0]
PORT m_axi_indices_stride_WLAST = WLAST, BUS = M_AXI_INDICES_STRIDE, DIR = O
PORT m_axi_indices_stride_WUSER = WUSER, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_stride_WVALID = WVALID, BUS = M_AXI_INDICES_STRIDE, DIR = O
PORT m_axi_indices_stride_WREADY = WREADY, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_BID = BID, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [(C_M_AXI_INDICES_STRIDE_ID_WIDTH-1):0]
PORT m_axi_indices_stride_BRESP = BRESP, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [1:0]
PORT m_axi_indices_stride_BUSER = BUSER, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [(C_M_AXI_INDICES_STRIDE_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_stride_BVALID = BVALID, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_BREADY = BREADY, BUS = M_AXI_INDICES_STRIDE, DIR = O
PORT m_axi_indices_stride_ARID = ARID, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_ID_WIDTH-1):0]
PORT m_axi_indices_stride_ARADDR = ARADDR, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_ADDR_WIDTH-1):0]
PORT m_axi_indices_stride_ARLEN = ARLEN, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [7:0]
PORT m_axi_indices_stride_ARSIZE = ARSIZE, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [2:0]
PORT m_axi_indices_stride_ARBURST = ARBURST, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [1:0]
PORT m_axi_indices_stride_ARLOCK = ARLOCK, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [1:0]
PORT m_axi_indices_stride_ARCACHE = ARCACHE, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [3:0]
PORT m_axi_indices_stride_ARPROT = ARPROT, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [2:0]
PORT m_axi_indices_stride_ARQOS = ARQOS, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [3:0]
PORT m_axi_indices_stride_ARUSER = ARUSER, BUS = M_AXI_INDICES_STRIDE, DIR = O, VEC = [(C_M_AXI_INDICES_STRIDE_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_stride_ARVALID = ARVALID, BUS = M_AXI_INDICES_STRIDE, DIR = O
PORT m_axi_indices_stride_ARREADY = ARREADY, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_RID = RID, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [(C_M_AXI_INDICES_STRIDE_ID_WIDTH-1):0]
PORT m_axi_indices_stride_RDATA = RDATA, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [(C_M_AXI_INDICES_STRIDE_DATA_WIDTH-1):0]
PORT m_axi_indices_stride_RRESP = RRESP, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [1:0]
PORT m_axi_indices_stride_RLAST = RLAST, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_RUSER = RUSER, BUS = M_AXI_INDICES_STRIDE, DIR = I, VEC = [(C_M_AXI_INDICES_STRIDE_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_INDICES_STRIDE_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_indices_stride_RVALID = RVALID, BUS = M_AXI_INDICES_STRIDE, DIR = I
PORT m_axi_indices_stride_RREADY = RREADY, BUS = M_AXI_INDICES_STRIDE, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_NFA_FINALS_BUCKETS, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_ID_WIDTH = 1, DT = integer, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_NFA_FINALS_BUCKETS
PARAMETER C_M_AXI_NFA_FINALS_BUCKETS_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_NFA_FINALS_BUCKETS
## Ports
PORT m_axi_nfa_finals_buckets_AWID = AWID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_AWADDR = AWADDR, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_AWLEN = AWLEN, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_finals_buckets_AWSIZE = AWSIZE, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_finals_buckets_AWBURST = AWBURST, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_AWLOCK = AWLOCK, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_AWCACHE = AWCACHE, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_finals_buckets_AWPROT = AWPROT, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_finals_buckets_AWQOS = AWQOS, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_finals_buckets_AWUSER = AWUSER, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_finals_buckets_AWVALID = AWVALID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
PORT m_axi_nfa_finals_buckets_AWREADY = AWREADY, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_WDATA = WDATA, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_WSTRB = WSTRB, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [((C_M_AXI_NFA_FINALS_BUCKETS_DATA_WIDTH/8)-1):0]
PORT m_axi_nfa_finals_buckets_WLAST = WLAST, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
PORT m_axi_nfa_finals_buckets_WUSER = WUSER, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_finals_buckets_WVALID = WVALID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
PORT m_axi_nfa_finals_buckets_WREADY = WREADY, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_BID = BID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_BRESP = BRESP, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_BUSER = BUSER, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_finals_buckets_BVALID = BVALID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_BREADY = BREADY, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
PORT m_axi_nfa_finals_buckets_ARID = ARID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_ARADDR = ARADDR, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_ARLEN = ARLEN, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_finals_buckets_ARSIZE = ARSIZE, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_finals_buckets_ARBURST = ARBURST, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_ARLOCK = ARLOCK, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_ARCACHE = ARCACHE, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_finals_buckets_ARPROT = ARPROT, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_finals_buckets_ARQOS = ARQOS, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_finals_buckets_ARUSER = ARUSER, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_finals_buckets_ARVALID = ARVALID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
PORT m_axi_nfa_finals_buckets_ARREADY = ARREADY, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_RID = RID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_RDATA = RDATA, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_finals_buckets_RRESP = RRESP, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_finals_buckets_RLAST = RLAST, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_RUSER = RUSER, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FINALS_BUCKETS_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FINALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_finals_buckets_RVALID = RVALID, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = I
PORT m_axi_nfa_finals_buckets_RREADY = RREADY, BUS = M_AXI_NFA_FINALS_BUCKETS, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_NFA_FORWARD_BUCKETS, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_ID_WIDTH = 1, DT = integer, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_NFA_FORWARD_BUCKETS
PARAMETER C_M_AXI_NFA_FORWARD_BUCKETS_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_NFA_FORWARD_BUCKETS
## Ports
PORT m_axi_nfa_forward_buckets_AWID = AWID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_AWADDR = AWADDR, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_AWLEN = AWLEN, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_forward_buckets_AWSIZE = AWSIZE, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_forward_buckets_AWBURST = AWBURST, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_AWLOCK = AWLOCK, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_AWCACHE = AWCACHE, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_forward_buckets_AWPROT = AWPROT, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_forward_buckets_AWQOS = AWQOS, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_forward_buckets_AWUSER = AWUSER, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_forward_buckets_AWVALID = AWVALID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
PORT m_axi_nfa_forward_buckets_AWREADY = AWREADY, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_WDATA = WDATA, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_WSTRB = WSTRB, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [((C_M_AXI_NFA_FORWARD_BUCKETS_DATA_WIDTH/8)-1):0]
PORT m_axi_nfa_forward_buckets_WLAST = WLAST, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
PORT m_axi_nfa_forward_buckets_WUSER = WUSER, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_forward_buckets_WVALID = WVALID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
PORT m_axi_nfa_forward_buckets_WREADY = WREADY, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_BID = BID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_BRESP = BRESP, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_BUSER = BUSER, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_forward_buckets_BVALID = BVALID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_BREADY = BREADY, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
PORT m_axi_nfa_forward_buckets_ARID = ARID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_ARADDR = ARADDR, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_ARLEN = ARLEN, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_forward_buckets_ARSIZE = ARSIZE, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_forward_buckets_ARBURST = ARBURST, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_ARLOCK = ARLOCK, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_ARCACHE = ARCACHE, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_forward_buckets_ARPROT = ARPROT, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_forward_buckets_ARQOS = ARQOS, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_forward_buckets_ARUSER = ARUSER, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_forward_buckets_ARVALID = ARVALID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
PORT m_axi_nfa_forward_buckets_ARREADY = ARREADY, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_RID = RID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_RDATA = RDATA, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_forward_buckets_RRESP = RRESP, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_forward_buckets_RLAST = RLAST, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_RUSER = RUSER, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_FORWARD_BUCKETS_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_FORWARD_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_forward_buckets_RVALID = RVALID, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = I
PORT m_axi_nfa_forward_buckets_RREADY = RREADY, BUS = M_AXI_NFA_FORWARD_BUCKETS, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_NFA_INITIALS_BUCKETS, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_ID_WIDTH = 1, DT = integer, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_NFA_INITIALS_BUCKETS
PARAMETER C_M_AXI_NFA_INITIALS_BUCKETS_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_NFA_INITIALS_BUCKETS
## Ports
PORT m_axi_nfa_initials_buckets_AWID = AWID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_AWADDR = AWADDR, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_AWLEN = AWLEN, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_initials_buckets_AWSIZE = AWSIZE, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_initials_buckets_AWBURST = AWBURST, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_AWLOCK = AWLOCK, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_AWCACHE = AWCACHE, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_initials_buckets_AWPROT = AWPROT, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_initials_buckets_AWQOS = AWQOS, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_initials_buckets_AWUSER = AWUSER, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_initials_buckets_AWVALID = AWVALID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
PORT m_axi_nfa_initials_buckets_AWREADY = AWREADY, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_WDATA = WDATA, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_WSTRB = WSTRB, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [((C_M_AXI_NFA_INITIALS_BUCKETS_DATA_WIDTH/8)-1):0]
PORT m_axi_nfa_initials_buckets_WLAST = WLAST, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
PORT m_axi_nfa_initials_buckets_WUSER = WUSER, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_initials_buckets_WVALID = WVALID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
PORT m_axi_nfa_initials_buckets_WREADY = WREADY, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_BID = BID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_BRESP = BRESP, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_BUSER = BUSER, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_initials_buckets_BVALID = BVALID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_BREADY = BREADY, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
PORT m_axi_nfa_initials_buckets_ARID = ARID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_ARADDR = ARADDR, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ADDR_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_ARLEN = ARLEN, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [7:0]
PORT m_axi_nfa_initials_buckets_ARSIZE = ARSIZE, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_initials_buckets_ARBURST = ARBURST, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_ARLOCK = ARLOCK, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_ARCACHE = ARCACHE, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_initials_buckets_ARPROT = ARPROT, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [2:0]
PORT m_axi_nfa_initials_buckets_ARQOS = ARQOS, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [3:0]
PORT m_axi_nfa_initials_buckets_ARUSER = ARUSER, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_initials_buckets_ARVALID = ARVALID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
PORT m_axi_nfa_initials_buckets_ARREADY = ARREADY, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_RID = RID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_ID_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_RDATA = RDATA, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_DATA_WIDTH-1):0]
PORT m_axi_nfa_initials_buckets_RRESP = RRESP, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [1:0]
PORT m_axi_nfa_initials_buckets_RLAST = RLAST, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_RUSER = RUSER, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I, VEC = [(C_M_AXI_NFA_INITIALS_BUCKETS_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_NFA_INITIALS_BUCKETS_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_nfa_initials_buckets_RVALID = RVALID, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = I
PORT m_axi_nfa_initials_buckets_RREADY = RREADY, BUS = M_AXI_NFA_INITIALS_BUCKETS, DIR = O
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_SAMPLE_BUFFER, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_SAMPLE_BUFFER_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_ID_WIDTH = 1, DT = integer, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_USER_VALUE = 0b0000, DT = std_logic_vector, ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_SAMPLE_BUFFER
PARAMETER C_M_AXI_SAMPLE_BUFFER_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_SAMPLE_BUFFER
## Ports
PORT m_axi_sample_buffer_AWID = AWID, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_ID_WIDTH-1):0]
PORT m_axi_sample_buffer_AWADDR = AWADDR, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_ADDR_WIDTH-1):0]
PORT m_axi_sample_buffer_AWLEN = AWLEN, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [7:0]
PORT m_axi_sample_buffer_AWSIZE = AWSIZE, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [2:0]
PORT m_axi_sample_buffer_AWBURST = AWBURST, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [1:0]
PORT m_axi_sample_buffer_AWLOCK = AWLOCK, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [1:0]
PORT m_axi_sample_buffer_AWCACHE = AWCACHE, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [3:0]
PORT m_axi_sample_buffer_AWPROT = AWPROT, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [2:0]
PORT m_axi_sample_buffer_AWQOS = AWQOS, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [3:0]
PORT m_axi_sample_buffer_AWUSER = AWUSER, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_sample_buffer_AWVALID = AWVALID, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
PORT m_axi_sample_buffer_AWREADY = AWREADY, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_WDATA = WDATA, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_DATA_WIDTH-1):0]
PORT m_axi_sample_buffer_WSTRB = WSTRB, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [((C_M_AXI_SAMPLE_BUFFER_DATA_WIDTH/8)-1):0]
PORT m_axi_sample_buffer_WLAST = WLAST, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
PORT m_axi_sample_buffer_WUSER = WUSER, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_sample_buffer_WVALID = WVALID, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
PORT m_axi_sample_buffer_WREADY = WREADY, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_BID = BID, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [(C_M_AXI_SAMPLE_BUFFER_ID_WIDTH-1):0]
PORT m_axi_sample_buffer_BRESP = BRESP, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [1:0]
PORT m_axi_sample_buffer_BUSER = BUSER, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [(C_M_AXI_SAMPLE_BUFFER_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_sample_buffer_BVALID = BVALID, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_BREADY = BREADY, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
PORT m_axi_sample_buffer_ARID = ARID, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_ID_WIDTH-1):0]
PORT m_axi_sample_buffer_ARADDR = ARADDR, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_ADDR_WIDTH-1):0]
PORT m_axi_sample_buffer_ARLEN = ARLEN, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [7:0]
PORT m_axi_sample_buffer_ARSIZE = ARSIZE, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [2:0]
PORT m_axi_sample_buffer_ARBURST = ARBURST, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [1:0]
PORT m_axi_sample_buffer_ARLOCK = ARLOCK, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [1:0]
PORT m_axi_sample_buffer_ARCACHE = ARCACHE, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [3:0]
PORT m_axi_sample_buffer_ARPROT = ARPROT, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [2:0]
PORT m_axi_sample_buffer_ARQOS = ARQOS, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [3:0]
PORT m_axi_sample_buffer_ARUSER = ARUSER, BUS = M_AXI_SAMPLE_BUFFER, DIR = O, VEC = [(C_M_AXI_SAMPLE_BUFFER_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_sample_buffer_ARVALID = ARVALID, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
PORT m_axi_sample_buffer_ARREADY = ARREADY, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_RID = RID, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [(C_M_AXI_SAMPLE_BUFFER_ID_WIDTH-1):0]
PORT m_axi_sample_buffer_RDATA = RDATA, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [(C_M_AXI_SAMPLE_BUFFER_DATA_WIDTH-1):0]
PORT m_axi_sample_buffer_RRESP = RRESP, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [1:0]
PORT m_axi_sample_buffer_RLAST = RLAST, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_RUSER = RUSER, BUS = M_AXI_SAMPLE_BUFFER, DIR = I, VEC = [(C_M_AXI_SAMPLE_BUFFER_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_SAMPLE_BUFFER_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_sample_buffer_RVALID = RVALID, BUS = M_AXI_SAMPLE_BUFFER, DIR = I
PORT m_axi_sample_buffer_RREADY = RREADY, BUS = M_AXI_SAMPLE_BUFFER, DIR = O
########################################################



#####################AXI4-Lite Slave####################
## Bus Interfaces
BUS_INTERFACE BUS = S_AXI_SLV0, BUS_STD = AXI, BUS_TYPE = SLAVE
## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_SLV0_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_SLV0_HIGHADDR, ADDRESS = BASE, MIN_SIZE = 0x80, TYPE = NON_HDL, BUS = S_AXI_SLV0
PARAMETER C_S_AXI_SLV0_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_SLV0_BASEADDR, ADDRESS = HIGH, TYPE = NON_HDL, BUS = S_AXI_SLV0
PARAMETER C_S_AXI_SLV0_ADDR_WIDTH = 7, DT = INTEGER, RANGE = (7:32), BUS = S_AXI_SLV0
PARAMETER C_S_AXI_SLV0_DATA_WIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT, BUS = S_AXI_SLV0
PARAMETER C_S_AXI_SLV0_PROTOCOL = AXI4LITE, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI_SLV0
## Ports
PORT s_axi_slv0_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_SLV0_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_SLV0
PORT s_axi_slv0_AWVALID = AWVALID, DIR = I, BUS = S_AXI_SLV0
PORT s_axi_slv0_AWREADY = AWREADY, DIR = O, BUS = S_AXI_SLV0
PORT s_axi_slv0_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_SLV0_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_SLV0
PORT s_axi_slv0_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_SLV0_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_SLV0
PORT s_axi_slv0_WVALID = WVALID, DIR = I, BUS = S_AXI_SLV0
PORT s_axi_slv0_WREADY = WREADY, DIR = O, BUS = S_AXI_SLV0
PORT s_axi_slv0_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_SLV0
PORT s_axi_slv0_BVALID = BVALID, DIR = O, BUS = S_AXI_SLV0
PORT s_axi_slv0_BREADY = BREADY, DIR = I, BUS = S_AXI_SLV0
PORT s_axi_slv0_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_SLV0_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_SLV0
PORT s_axi_slv0_ARVALID = ARVALID, DIR = I, BUS = S_AXI_SLV0
PORT s_axi_slv0_ARREADY = ARREADY, DIR = O, BUS = S_AXI_SLV0
PORT s_axi_slv0_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_SLV0_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_SLV0
PORT s_axi_slv0_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_SLV0
PORT s_axi_slv0_RVALID = RVALID, DIR = O, BUS = S_AXI_SLV0
PORT s_axi_slv0_RREADY = RREADY, DIR = I, BUS = S_AXI_SLV0
PORT interrupt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM
########################################################


END
