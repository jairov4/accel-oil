-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;
use proc_common_v3_00_a.ipif_pkg.all;

library plbv46_slave_single_v1_01_a;
use plbv46_slave_single_v1_01_a.plbv46_slave_single;

entity slv0_if is
  generic
  (
    C_BASEADDR                     : std_logic_vector     := X"FFFFFFFF";
    C_HIGHADDR                     : std_logic_vector     := X"00000000";
    C_SPLB_AWIDTH                  : integer              := 32;
    C_SPLB_DWIDTH                  : integer              := 32;
    C_SPLB_NUM_MASTERS             : integer              := 8;
    C_SPLB_MID_WIDTH               : integer              := 3;
    C_SPLB_NATIVE_DWIDTH           : integer              := 32;
    C_SPLB_P2P                     : integer              := 0;
    C_SPLB_SUPPORT_BURSTS          : integer              := 0;
    C_SPLB_SMALLEST_MASTER         : integer              := 32;
    C_SPLB_CLK_PERIOD_PS           : integer              := 10000;
    C_INCLUDE_DPHASE_TIMER         : integer              := 0;
    C_FAMILY                       : string               := "virtex5"
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    --USER ports added here
    -- ADD USER PORTS ABOVE THIS LINE ------------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol ports, do not add to or delete
    SPLB_Clk                       : in  std_logic;
    SPLB_Rst                       : in  std_logic;
    PLB_ABus                       : in  std_logic_vector(0 to 31);
    PLB_UABus                      : in  std_logic_vector(0 to 31);
    PLB_PAValid                    : in  std_logic;
    PLB_SAValid                    : in  std_logic;
    PLB_rdPrim                     : in  std_logic;
    PLB_wrPrim                     : in  std_logic;
    PLB_masterID                   : in  std_logic_vector(0 to C_SPLB_MID_WIDTH-1);
    PLB_abort                      : in  std_logic;
    PLB_busLock                    : in  std_logic;
    PLB_RNW                        : in  std_logic;
    PLB_BE                         : in  std_logic_vector(0 to C_SPLB_DWIDTH/8-1);
    PLB_MSize                      : in  std_logic_vector(0 to 1);
    PLB_size                       : in  std_logic_vector(0 to 3);
    PLB_type                       : in  std_logic_vector(0 to 2);
    PLB_lockErr                    : in  std_logic;
    PLB_wrDBus                     : in  std_logic_vector(0 to C_SPLB_DWIDTH-1);
    PLB_wrBurst                    : in  std_logic;
    PLB_rdBurst                    : in  std_logic;
    PLB_wrPendReq                  : in  std_logic;
    PLB_rdPendReq                  : in  std_logic;
    PLB_wrPendPri                  : in  std_logic_vector(0 to 1);
    PLB_rdPendPri                  : in  std_logic_vector(0 to 1);
    PLB_reqPri                     : in  std_logic_vector(0 to 1);
    PLB_TAttribute                 : in  std_logic_vector(0 to 15);
    Sl_addrAck                     : out std_logic;
    Sl_SSize                       : out std_logic_vector(0 to 1);
    Sl_wait                        : out std_logic;
    Sl_rearbitrate                 : out std_logic;
    Sl_wrDAck                      : out std_logic;
    Sl_wrComp                      : out std_logic;
    Sl_wrBTerm                     : out std_logic;
    Sl_rdDBus                      : out std_logic_vector(0 to C_SPLB_DWIDTH-1);
    Sl_rdWdAddr                    : out std_logic_vector(0 to 3);
    Sl_rdDAck                      : out std_logic;
    Sl_rdComp                      : out std_logic;
    Sl_rdBTerm                     : out std_logic;
    Sl_MBusy                       : out std_logic_vector(0 to C_SPLB_NUM_MASTERS-1);
    Sl_MWrErr                      : out std_logic_vector(0 to C_SPLB_NUM_MASTERS-1);
    Sl_MRdErr                      : out std_logic_vector(0 to C_SPLB_NUM_MASTERS-1);
    Sl_MIRQ                        : out std_logic_vector(0 to C_SPLB_NUM_MASTERS-1);
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
    DOUT_nfa_symbols              : out std_logic_vector(8-1 downto 0);
    DOUT_sample_buffer_length              : out std_logic_vector(32-1 downto 0);
    DOUT_sample_length              : out std_logic_vector(16-1 downto 0);
    DOUT_i_size              : out std_logic_vector(16-1 downto 0);
    DOUT_begin_index              : out std_logic_vector(16-1 downto 0);
    DOUT_begin_sample              : out std_logic_vector(16-1 downto 0);
    DOUT_end_index              : out std_logic_vector(16-1 downto 0);
    DOUT_end_sample              : out std_logic_vector(16-1 downto 0);
    DOUT_stop_on_first              : out std_logic_vector(1-1 downto 0);
    DOUT_accept              : out std_logic_vector(1-1 downto 0);
    DOUT_ap_start              : out std_logic;
    DIN_ap_ready               : in std_logic;
    DIN_ap_done               : in std_logic;
    DIN_ap_idle               : in std_logic;
    DIN_ap_return               : in std_logic_vector(32-1 downto 0)
  );

  attribute SIGIS : string;
  attribute SIGIS of SPLB_Clk      : signal is "CLK";
  attribute SIGIS of SPLB_Rst      : signal is "RST";

end entity;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of slv0_if is

  ------------------------------------------
  -- Array of base/high address pairs for each address range
  ------------------------------------------
  constant ZERO_ADDR_PAD                  : std_logic_vector(0 to 31) := (others => '0');
  constant USER_SLV_BASEADDR              : std_logic_vector     := C_BASEADDR;
  constant USER_SLV_HIGHADDR              : std_logic_vector     := C_HIGHADDR;

  constant IPIF_ARD_ADDR_RANGE_ARRAY      : SLV64_ARRAY_TYPE     := 
    (
      ZERO_ADDR_PAD & USER_SLV_BASEADDR,  -- user logic slave space base address
      ZERO_ADDR_PAD & USER_SLV_HIGHADDR   -- user logic slave space high address
    );

  ------------------------------------------
  -- Array of desired number of chip enables for each address range
  ------------------------------------------
  constant USER_SLV_NUM_REG               : integer              := 15;
  constant USER_NUM_REG                   : integer              := USER_SLV_NUM_REG;

  constant IPIF_ARD_NUM_CE_ARRAY          : INTEGER_ARRAY_TYPE   := 
    (
      0  => pad_power2(USER_SLV_NUM_REG)  -- number of ce for user logic slave space
    );

  ------------------------------------------
  -- Ratio of bus clock to core clock (for use in dual clock systems)
  -- 1 = ratio is 1:1
  -- 2 = ratio is 2:1
  ------------------------------------------
  constant IPIF_BUS2CORE_CLK_RATIO        : integer              := 1;

  ------------------------------------------
  -- Width of the slave data bus (non-burst slave support 32 only)
  ------------------------------------------
  constant USER_SLV_DWIDTH                : integer              := C_SPLB_NATIVE_DWIDTH;

  constant IPIF_SLV_DWIDTH                : integer              := C_SPLB_NATIVE_DWIDTH;

  ------------------------------------------
  -- Index for CS/CE
  ------------------------------------------
  constant USER_SLV_CS_INDEX              : integer              := 0;
  constant USER_SLV_CE_INDEX              : integer              := calc_start_ce_index(IPIF_ARD_NUM_CE_ARRAY, USER_SLV_CS_INDEX);

  constant USER_CE_INDEX                  : integer              := USER_SLV_CE_INDEX;

  ------------------------------------------
  -- IP Interconnect (IPIC) signal declarations
  ------------------------------------------
  signal iBus2IP_Clk                : std_logic;
  signal iBus2IP_Reset              : std_logic;
  signal iIP2Bus_Data               : std_logic_vector(0 to IPIF_SLV_DWIDTH-1);
  signal iIP2Bus_WrAck              : std_logic;
  signal iIP2Bus_RdAck              : std_logic;
  signal iIP2Bus_Error              : std_logic;
  signal iBus2IP_Addr               : std_logic_vector(0 to C_SPLB_AWIDTH-1);
  signal iBus2IP_Data               : std_logic_vector(0 to IPIF_SLV_DWIDTH-1);
  signal iBus2IP_RNW                : std_logic;
  signal iBus2IP_BE                 : std_logic_vector(0 to IPIF_SLV_DWIDTH/8-1);
  signal iBus2IP_CS                 : std_logic_vector(0 to ((IPIF_ARD_ADDR_RANGE_ARRAY'length)/2)-1);
  signal iBus2IP_RdCE               : std_logic_vector(0 to calc_num_ce(IPIF_ARD_NUM_CE_ARRAY)-1);
  signal iBus2IP_WrCE               : std_logic_vector(0 to calc_num_ce(IPIF_ARD_NUM_CE_ARRAY)-1);
  signal user_Bus2IP_RdCE           : std_logic_vector(0 to USER_NUM_REG-1);
  signal user_Bus2IP_WrCE           : std_logic_vector(0 to USER_NUM_REG-1);
  signal user_IP2Bus_Data           : std_logic_vector(0 to USER_SLV_DWIDTH-1);
  signal user_IP2Bus_RdAck          : std_logic;
  signal user_IP2Bus_WrAck          : std_logic;
  signal user_IP2Bus_Error          : std_logic;

  -- signals for user logic
  constant USER_DWIDTH                  : integer   := USER_SLV_DWIDTH;
  constant USER_NUM_CE                  : integer   := 15;
  signal uBus2IP_Data  : std_logic_vector(0 to USER_DWIDTH-1);
  signal uBus2IP_BE    : std_logic_vector(0 to USER_DWIDTH/8-1);
  signal uBus2IP_RdCE  : std_logic_vector(0 to USER_NUM_CE-1);
  signal uBus2IP_WrCE  : std_logic_vector(0 to USER_NUM_CE-1);
  signal uIP2Bus_Data  : std_logic_vector(0 to USER_DWIDTH-1);

  -- signals for slave port nfa_symbols
  signal sig_nfa_symbols  : std_logic_vector(32-1 downto 0); -- offset: 0
  -- signals for slave port sample_buffer_length
  signal sig_sample_buffer_length  : std_logic_vector(32-1 downto 0); -- offset: 1
  -- signals for slave port sample_length
  signal sig_sample_length  : std_logic_vector(32-1 downto 0); -- offset: 2
  -- signals for slave port i_size
  signal sig_i_size  : std_logic_vector(32-1 downto 0); -- offset: 3
  -- signals for slave port begin_index
  signal sig_begin_index  : std_logic_vector(32-1 downto 0); -- offset: 4
  -- signals for slave port begin_sample
  signal sig_begin_sample  : std_logic_vector(32-1 downto 0); -- offset: 5
  -- signals for slave port end_index
  signal sig_end_index  : std_logic_vector(32-1 downto 0); -- offset: 6
  -- signals for slave port end_sample
  signal sig_end_sample  : std_logic_vector(32-1 downto 0); -- offset: 7
  -- signals for slave port stop_on_first
  signal sig_stop_on_first  : std_logic_vector(32-1 downto 0); -- offset: 8
  -- signals for slave port accept
  signal sig_accept  : std_logic_vector(32-1 downto 0); -- offset: 9
  -- signals for slave port ap_start
  signal sig_ap_start  : std_logic; -- offset: 10
  -- signals for slave port ap_ready
  signal sig_ap_ready  : std_logic; -- offset: 11
  -- signals for slave port ap_done
  signal sig_ap_done  : std_logic; -- offset: 12
  -- signals for slave port ap_idle
  signal sig_ap_idle  : std_logic; -- offset: 13
  -- signals for slave port ap_return
  signal sig_ap_return  : std_logic_vector(32-1 downto 0); -- offset: 14

  type mem_array is array (USER_NUM_REG-1 downto 0) of std_logic_vector (USER_DWIDTH-1 downto 0);
  signal slave_read_mem : mem_array;
  signal sig_ap_start_reg  : std_logic;
  signal slv_read_ack  : std_logic;
  signal slv_write_ack : std_logic;

begin

  ------------------------------------------
  -- instantiate plbv46_slave_single
  ------------------------------------------
  PLBV46_SLAVE_SINGLE_I : entity plbv46_slave_single_v1_01_a.plbv46_slave_single
    generic map
    (
      C_ARD_ADDR_RANGE_ARRAY         => IPIF_ARD_ADDR_RANGE_ARRAY,
      C_ARD_NUM_CE_ARRAY             => IPIF_ARD_NUM_CE_ARRAY,
      C_SPLB_P2P                     => C_SPLB_P2P,
      C_BUS2CORE_CLK_RATIO           => IPIF_BUS2CORE_CLK_RATIO,
      C_SPLB_MID_WIDTH               => C_SPLB_MID_WIDTH,
      C_SPLB_NUM_MASTERS             => C_SPLB_NUM_MASTERS,
      C_SPLB_AWIDTH                  => C_SPLB_AWIDTH,
      C_SPLB_DWIDTH                  => C_SPLB_DWIDTH,
      C_SIPIF_DWIDTH                 => IPIF_SLV_DWIDTH,
      C_INCLUDE_DPHASE_TIMER         => C_INCLUDE_DPHASE_TIMER,
      C_FAMILY                       => C_FAMILY
    )
    port map
    (
      SPLB_Clk                       => SPLB_Clk,
      SPLB_Rst                       => SPLB_Rst,
      PLB_ABus                       => PLB_ABus,
      PLB_UABus                      => PLB_UABus,
      PLB_PAValid                    => PLB_PAValid,
      PLB_SAValid                    => PLB_SAValid,
      PLB_rdPrim                     => PLB_rdPrim,
      PLB_wrPrim                     => PLB_wrPrim,
      PLB_masterID                   => PLB_masterID,
      PLB_abort                      => PLB_abort,
      PLB_busLock                    => PLB_busLock,
      PLB_RNW                        => PLB_RNW,
      PLB_BE                         => PLB_BE,
      PLB_MSize                      => PLB_MSize,
      PLB_size                       => PLB_size,
      PLB_type                       => PLB_type,
      PLB_lockErr                    => PLB_lockErr,
      PLB_wrDBus                     => PLB_wrDBus,
      PLB_wrBurst                    => PLB_wrBurst,
      PLB_rdBurst                    => PLB_rdBurst,
      PLB_wrPendReq                  => PLB_wrPendReq,
      PLB_rdPendReq                  => PLB_rdPendReq,
      PLB_wrPendPri                  => PLB_wrPendPri,
      PLB_rdPendPri                  => PLB_rdPendPri,
      PLB_reqPri                     => PLB_reqPri,
      PLB_TAttribute                 => PLB_TAttribute,
      Sl_addrAck                     => Sl_addrAck,
      Sl_SSize                       => Sl_SSize,
      Sl_wait                        => Sl_wait,
      Sl_rearbitrate                 => Sl_rearbitrate,
      Sl_wrDAck                      => Sl_wrDAck,
      Sl_wrComp                      => Sl_wrComp,
      Sl_wrBTerm                     => Sl_wrBTerm,
      Sl_rdDBus                      => Sl_rdDBus,
      Sl_rdWdAddr                    => Sl_rdWdAddr,
      Sl_rdDAck                      => Sl_rdDAck,
      Sl_rdComp                      => Sl_rdComp,
      Sl_rdBTerm                     => Sl_rdBTerm,
      Sl_MBusy                       => Sl_MBusy,
      Sl_MWrErr                      => Sl_MWrErr,
      Sl_MRdErr                      => Sl_MRdErr,
      Sl_MIRQ                        => Sl_MIRQ,
      Bus2IP_Clk                     => iBus2IP_Clk,
      Bus2IP_Reset                   => iBus2IP_Reset,
      IP2Bus_Data                    => iIP2Bus_Data,
      IP2Bus_WrAck                   => iIP2Bus_WrAck,
      IP2Bus_RdAck                   => iIP2Bus_RdAck,
      IP2Bus_Error                   => iIP2Bus_Error,
      Bus2IP_Addr                    => iBus2IP_Addr,
      Bus2IP_Data                    => iBus2IP_Data,
      Bus2IP_RNW                     => iBus2IP_RNW,
      Bus2IP_BE                      => iBus2IP_BE,
      Bus2IP_CS                      => iBus2IP_CS,
      Bus2IP_RdCE                    => iBus2IP_RdCE,
      Bus2IP_WrCE                    => iBus2IP_WrCE
    );

  ------------------------------------------
  -- hooking up signal slicing
  ------------------------------------------
  uBus2IP_BE <= iBus2IP_BE(0 to USER_DWIDTH/8-1);
  uBus2IP_Data <= iBus2IP_Data(0 to USER_DWIDTH-1);
  uBus2IP_RdCE <= iBus2IP_RdCE(USER_CE_INDEX to USER_CE_INDEX+USER_NUM_CE-1);
  uBus2IP_WrCE <= iBus2IP_WrCE(USER_CE_INDEX to USER_CE_INDEX+USER_NUM_CE-1);
  iIP2Bus_Data(0 to USER_DWIDTH-1) <= uIP2Bus_Data;

  slv_write_ack <= '1' when uBus2IP_WrCE /= CONV_STD_LOGIC_VECTOR(0,USER_NUM_CE) else '0';
  slv_read_ack  <= '1' when uBus2IP_RdCE /= CONV_STD_LOGIC_VECTOR(0,USER_NUM_CE) else '0';

  iIP2Bus_WrAck       <= slv_write_ack;
  iIP2Bus_RdAck       <= slv_read_ack;
  iIP2Bus_Error       <= '0';

  -- data from slave_if to DUT
  DOUT_nfa_symbols <= sig_nfa_symbols(8-1 downto 0);
  DOUT_sample_buffer_length <= sig_sample_buffer_length(32-1 downto 0);
  DOUT_sample_length <= sig_sample_length(16-1 downto 0);
  DOUT_i_size <= sig_i_size(16-1 downto 0);
  DOUT_begin_index <= sig_begin_index(16-1 downto 0);
  DOUT_begin_sample <= sig_begin_sample(16-1 downto 0);
  DOUT_end_index <= sig_end_index(16-1 downto 0);
  DOUT_end_sample <= sig_end_sample(16-1 downto 0);
  DOUT_stop_on_first <= sig_stop_on_first(1-1 downto 0);
  DOUT_accept <= sig_accept(1-1 downto 0);
  DOUT_ap_start <= '1' when sig_ap_start = '1' and sig_ap_start_reg = '0' else '0';

  -- implement slave model register read mux
  SLAVE_REG_REGULAR_PROC : process(
  sig_nfa_symbols,sig_sample_buffer_length,sig_sample_length,sig_i_size,sig_begin_index,
  sig_begin_sample,sig_end_index,sig_end_sample,sig_stop_on_first,sig_accept,
  sig_ap_start,sig_ap_ready,sig_ap_done,sig_ap_idle,sig_ap_return
    ) is
  begin
      slave_read_mem(0) <= sig_nfa_symbols(31 downto 0);
      slave_read_mem(1) <= sig_sample_buffer_length(31 downto 0);
      slave_read_mem(2) <= sig_sample_length(31 downto 0);
      slave_read_mem(3) <= sig_i_size(31 downto 0);
      slave_read_mem(4) <= sig_begin_index(31 downto 0);
      slave_read_mem(5) <= sig_begin_sample(31 downto 0);
      slave_read_mem(6) <= sig_end_index(31 downto 0);
      slave_read_mem(7) <= sig_end_sample(31 downto 0);
      slave_read_mem(8) <= sig_stop_on_first(31 downto 0);
      slave_read_mem(9) <= sig_accept(31 downto 0);
      slave_read_mem(10)(31 downto 1) <= (others => '0');
      slave_read_mem(10)(0) <= sig_ap_start;
      slave_read_mem(11)(31 downto 1) <= (others => '0');
      slave_read_mem(11)(0) <= sig_ap_ready;
      slave_read_mem(12)(31 downto 1) <= (others => '0');
      slave_read_mem(12)(0) <= sig_ap_done;
      slave_read_mem(13)(31 downto 1) <= (others => '0');
      slave_read_mem(13)(0) <= sig_ap_idle;
      slave_read_mem(14) <= sig_ap_return(31 downto 0);
  end process SLAVE_REG_REGULAR_PROC;

  SLAVE_REG_READ_PROC : process( uBus2IP_RdCE, slave_read_mem) is
    variable i : integer;
  begin
    uIP2Bus_Data  <= (others => '0');
    for i in 0 to USER_NUM_CE - 1 loop
        if (uBus2IP_RdCE(i) = '1') then
            uIP2Bus_Data  <= slave_read_mem(i);
            exit;
        end if;
    end loop;
  end process SLAVE_REG_READ_PROC;

  -- implement slave model register(s)
  SLAVE_REG_WRITE_PROC : process( iBus2IP_Clk ) is
    variable i, hi, lo : integer;
  begin
    if iBus2IP_Clk'event and iBus2IP_Clk = '1' then
      -- slave_reg : nfa_symbols
      if iBus2IP_Reset = '1' then
          sig_nfa_symbols <= (others => '0');
      else
          if (uBus2IP_WrCE(0) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_nfa_symbols(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : sample_buffer_length
      if iBus2IP_Reset = '1' then
          sig_sample_buffer_length <= (others => '0');
      else
          if (uBus2IP_WrCE(1) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_sample_buffer_length(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : sample_length
      if iBus2IP_Reset = '1' then
          sig_sample_length <= (others => '0');
      else
          if (uBus2IP_WrCE(2) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_sample_length(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : i_size
      if iBus2IP_Reset = '1' then
          sig_i_size <= (others => '0');
      else
          if (uBus2IP_WrCE(3) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_i_size(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : begin_index
      if iBus2IP_Reset = '1' then
          sig_begin_index <= (others => '0');
      else
          if (uBus2IP_WrCE(4) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_begin_index(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : begin_sample
      if iBus2IP_Reset = '1' then
          sig_begin_sample <= (others => '0');
      else
          if (uBus2IP_WrCE(5) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_begin_sample(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : end_index
      if iBus2IP_Reset = '1' then
          sig_end_index <= (others => '0');
      else
          if (uBus2IP_WrCE(6) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_end_index(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : end_sample
      if iBus2IP_Reset = '1' then
          sig_end_sample <= (others => '0');
      else
          if (uBus2IP_WrCE(7) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_end_sample(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : stop_on_first
      if iBus2IP_Reset = '1' then
          sig_stop_on_first <= (others => '0');
      else
          if (uBus2IP_WrCE(8) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_stop_on_first(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : accept
      if iBus2IP_Reset = '1' then
          sig_accept <= (others => '0');
      else
          if (uBus2IP_WrCE(9) = '1') then
            for byte_index in 0 to USER_SLV_DWIDTH/8-1 loop
              if ( uBus2IP_BE(byte_index) = '1' ) then
                hi := (1-0)*USER_SLV_DWIDTH - byte_index*8 - 1;
                lo := hi - 7;
                sig_accept(hi downto lo) <= uBus2IP_Data(byte_index*8 to byte_index*8+7);
              end if;
            end loop;
          end if;
      end if;

      -- slave_reg : ap_start
      if iBus2IP_Reset = '1' then
          sig_ap_start_reg <= '0';
          sig_ap_start <= '0';
      else
          sig_ap_start_reg <= sig_ap_start;
          if (uBus2IP_WrCE(10) = '1') then
              if ( uBus2IP_BE(USER_SLV_DWIDTH/8-1) = '1' ) then
                sig_ap_start <= uBus2IP_Data(USER_SLV_DWIDTH-1);
              end if;
          end if;
      end if;

      -- slave_reg : ap_ready
      if iBus2IP_Reset = '1' then
          sig_ap_ready <= '0';
      else
          sig_ap_ready <= DIN_ap_ready ;
      end if;

      -- slave_reg : ap_done
      if iBus2IP_Reset = '1' then
          sig_ap_done <= '0';
      else
          sig_ap_done <= DIN_ap_done ;
      end if;

      -- slave_reg : ap_idle
      if iBus2IP_Reset = '1' then
          sig_ap_idle <= '0';
      else
          sig_ap_idle <= DIN_ap_idle ;
      end if;

      -- slave_reg : ap_return
      if iBus2IP_Reset = '1' then
          sig_ap_return <= (others => '0');
      else
          sig_ap_return(32-1 downto 0) <= DIN_ap_return ;
      end if;

    end if;
  end process SLAVE_REG_WRITE_PROC;

end IMP;

