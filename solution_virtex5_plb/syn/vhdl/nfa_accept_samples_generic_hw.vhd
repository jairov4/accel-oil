-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nfa_accept_samples_generic_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nfa_initials_buckets_req_din : OUT STD_LOGIC;
    nfa_initials_buckets_req_full_n : IN STD_LOGIC;
    nfa_initials_buckets_req_write : OUT STD_LOGIC;
    nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
    nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (63 downto 0);
    nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (63 downto 0);
    nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_req_din : OUT STD_LOGIC;
    nfa_finals_buckets_req_full_n : IN STD_LOGIC;
    nfa_finals_buckets_req_write : OUT STD_LOGIC;
    nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
    nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (63 downto 0);
    nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (63 downto 0);
    nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_req_din : OUT STD_LOGIC;
    nfa_forward_buckets_req_full_n : IN STD_LOGIC;
    nfa_forward_buckets_req_write : OUT STD_LOGIC;
    nfa_forward_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_forward_buckets_rsp_read : OUT STD_LOGIC;
    nfa_forward_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_symbols : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_req_din : OUT STD_LOGIC;
    sample_buffer_req_full_n : IN STD_LOGIC;
    sample_buffer_req_write : OUT STD_LOGIC;
    sample_buffer_rsp_empty_n : IN STD_LOGIC;
    sample_buffer_rsp_read : OUT STD_LOGIC;
    sample_buffer_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_buffer_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_length : IN STD_LOGIC_VECTOR (15 downto 0);
    indices_req_din : OUT STD_LOGIC;
    indices_req_full_n : IN STD_LOGIC;
    indices_req_write : OUT STD_LOGIC;
    indices_rsp_empty_n : IN STD_LOGIC;
    indices_rsp_read : OUT STD_LOGIC;
    indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
    indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
    indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_size : IN STD_LOGIC_VECTOR (15 downto 0);
    begin_index : IN STD_LOGIC_VECTOR (15 downto 0);
    begin_sample : IN STD_LOGIC_VECTOR (15 downto 0);
    end_index : IN STD_LOGIC_VECTOR (15 downto 0);
    end_sample : IN STD_LOGIC_VECTOR (15 downto 0);
    stop_on_first : IN STD_LOGIC_VECTOR (0 downto 0);
    accept : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nfa_accept_samples_generic_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nfa_accept_samples_generic_hw,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc5vlx50tff1136-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal units_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal units_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_index_load_reg_504 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_sample_load_reg_510 : STD_LOGIC_VECTOR (15 downto 0);
    signal finished_3_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal stop_on_first_meet_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_ap_done : STD_LOGIC;
    signal k_2_fu_398_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_412_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal finished_2_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_indices_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal start_indices_ce0 : STD_LOGIC;
    signal start_indices_we0 : STD_LOGIC;
    signal start_indices_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_indices_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_ap_start : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_ap_idle : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_ap_ready : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_din : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_write : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_datain : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_dataout : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_din : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_write : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_datain : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_dataout : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_din : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_write : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_nfa_symbols : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_sample_req_din : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_sample_req_full_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_sample_req_write : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_sample_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_sample_rsp_read : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_sample_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_sample_datain : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_sample_dataout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_sample_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_length_r : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_start_indices_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_start_indices_ce0 : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_start_indices_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_stop_on_first : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_accept : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_units : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_result_ce0 : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_result_we0 : STD_LOGIC;
    signal grp_nfa_accept_sample_multi_fu_268_result_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_result_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sample_iterator_next_fu_289_ap_start : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_ap_done : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_ap_idle : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_ap_ready : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_req_din : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_req_full_n : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_req_write : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_rsp_empty_n : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_rsp_read : STD_LOGIC;
    signal grp_sample_iterator_next_fu_289_indices_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_next_fu_289_indices_datain : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_next_fu_289_indices_dataout : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_next_fu_289_indices_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_next_fu_289_i_index : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_289_i_sample : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_289_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_289_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_ap_start : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_ap_done : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_ap_idle : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_ap_ready : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_i_index : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_i_sample : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_indices_req_din : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_indices_req_full_n : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_indices_req_write : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_indices_rsp_empty_n : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_indices_rsp_read : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_297_indices_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_indices_datain : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_indices_dataout : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_indices_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_sample_buffer_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_sample_length : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_297_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal finished_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal finished_1_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal brmerge_demorgan_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_256 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sample_iterator_next_fu_289_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_1_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_c_1_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_index_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_sample_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_16_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_409_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_1_fu_419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_287 : BOOLEAN;

    component nfa_accept_sample_multi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nfa_initials_buckets_req_din : OUT STD_LOGIC;
        nfa_initials_buckets_req_full_n : IN STD_LOGIC;
        nfa_initials_buckets_req_write : OUT STD_LOGIC;
        nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
        nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (63 downto 0);
        nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (63 downto 0);
        nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_req_din : OUT STD_LOGIC;
        nfa_finals_buckets_req_full_n : IN STD_LOGIC;
        nfa_finals_buckets_req_write : OUT STD_LOGIC;
        nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
        nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (63 downto 0);
        nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (63 downto 0);
        nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_forward_buckets_req_din : OUT STD_LOGIC;
        nfa_forward_buckets_req_full_n : IN STD_LOGIC;
        nfa_forward_buckets_req_write : OUT STD_LOGIC;
        nfa_forward_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_forward_buckets_rsp_read : OUT STD_LOGIC;
        nfa_forward_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_forward_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_forward_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_forward_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_symbols : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_req_din : OUT STD_LOGIC;
        sample_req_full_n : IN STD_LOGIC;
        sample_req_write : OUT STD_LOGIC;
        sample_rsp_empty_n : IN STD_LOGIC;
        sample_rsp_read : OUT STD_LOGIC;
        sample_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        sample_datain : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
        sample_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : IN STD_LOGIC_VECTOR (15 downto 0);
        start_indices_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        start_indices_ce0 : OUT STD_LOGIC;
        start_indices_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        stop_on_first : IN STD_LOGIC_VECTOR (0 downto 0);
        accept : IN STD_LOGIC_VECTOR (0 downto 0);
        units : IN STD_LOGIC_VECTOR (4 downto 0);
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        result_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sample_iterator_next IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indices_req_din : OUT STD_LOGIC;
        indices_req_full_n : IN STD_LOGIC;
        indices_req_write : OUT STD_LOGIC;
        indices_rsp_empty_n : IN STD_LOGIC;
        indices_rsp_read : OUT STD_LOGIC;
        indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
        indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
        indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_index : IN STD_LOGIC_VECTOR (15 downto 0);
        i_sample : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sample_iterator_get_offset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i_index : IN STD_LOGIC_VECTOR (15 downto 0);
        i_sample : IN STD_LOGIC_VECTOR (15 downto 0);
        indices_req_din : OUT STD_LOGIC;
        indices_req_full_n : IN STD_LOGIC;
        indices_req_write : OUT STD_LOGIC;
        indices_rsp_empty_n : IN STD_LOGIC;
        indices_rsp_read : OUT STD_LOGIC;
        indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
        indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
        indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        sample_buffer_size : IN STD_LOGIC_VECTOR (31 downto 0);
        sample_length : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_start_indices IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    result_U : component nfa_accept_samples_generic_hw_result
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0);

    start_indices_U : component nfa_accept_samples_generic_hw_start_indices
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => start_indices_address0,
        ce0 => start_indices_ce0,
        we0 => start_indices_we0,
        d0 => start_indices_d0,
        q0 => start_indices_q0);

    grp_nfa_accept_sample_multi_fu_268 : component nfa_accept_sample_multi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_accept_sample_multi_fu_268_ap_start,
        ap_done => grp_nfa_accept_sample_multi_fu_268_ap_done,
        ap_idle => grp_nfa_accept_sample_multi_fu_268_ap_idle,
        ap_ready => grp_nfa_accept_sample_multi_fu_268_ap_ready,
        nfa_initials_buckets_req_din => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_din,
        nfa_initials_buckets_req_full_n => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_full_n,
        nfa_initials_buckets_req_write => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_write,
        nfa_initials_buckets_rsp_empty_n => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_empty_n,
        nfa_initials_buckets_rsp_read => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_read,
        nfa_initials_buckets_address => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_address,
        nfa_initials_buckets_datain => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_datain,
        nfa_initials_buckets_dataout => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_dataout,
        nfa_initials_buckets_size => grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_size,
        nfa_finals_buckets_req_din => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_din,
        nfa_finals_buckets_req_full_n => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_full_n,
        nfa_finals_buckets_req_write => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_write,
        nfa_finals_buckets_rsp_empty_n => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_empty_n,
        nfa_finals_buckets_rsp_read => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_read,
        nfa_finals_buckets_address => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_address,
        nfa_finals_buckets_datain => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_datain,
        nfa_finals_buckets_dataout => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_dataout,
        nfa_finals_buckets_size => grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_size,
        nfa_forward_buckets_req_din => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_din,
        nfa_forward_buckets_req_full_n => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_full_n,
        nfa_forward_buckets_req_write => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_write,
        nfa_forward_buckets_rsp_empty_n => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_empty_n,
        nfa_forward_buckets_rsp_read => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_read,
        nfa_forward_buckets_address => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_address,
        nfa_forward_buckets_datain => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_datain,
        nfa_forward_buckets_dataout => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_dataout,
        nfa_forward_buckets_size => grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_size,
        nfa_symbols => grp_nfa_accept_sample_multi_fu_268_nfa_symbols,
        sample_req_din => grp_nfa_accept_sample_multi_fu_268_sample_req_din,
        sample_req_full_n => grp_nfa_accept_sample_multi_fu_268_sample_req_full_n,
        sample_req_write => grp_nfa_accept_sample_multi_fu_268_sample_req_write,
        sample_rsp_empty_n => grp_nfa_accept_sample_multi_fu_268_sample_rsp_empty_n,
        sample_rsp_read => grp_nfa_accept_sample_multi_fu_268_sample_rsp_read,
        sample_address => grp_nfa_accept_sample_multi_fu_268_sample_address,
        sample_datain => grp_nfa_accept_sample_multi_fu_268_sample_datain,
        sample_dataout => grp_nfa_accept_sample_multi_fu_268_sample_dataout,
        sample_size => grp_nfa_accept_sample_multi_fu_268_sample_size,
        length_r => grp_nfa_accept_sample_multi_fu_268_length_r,
        start_indices_address0 => grp_nfa_accept_sample_multi_fu_268_start_indices_address0,
        start_indices_ce0 => grp_nfa_accept_sample_multi_fu_268_start_indices_ce0,
        start_indices_q0 => grp_nfa_accept_sample_multi_fu_268_start_indices_q0,
        stop_on_first => grp_nfa_accept_sample_multi_fu_268_stop_on_first,
        accept => grp_nfa_accept_sample_multi_fu_268_accept,
        units => grp_nfa_accept_sample_multi_fu_268_units,
        result_address0 => grp_nfa_accept_sample_multi_fu_268_result_address0,
        result_ce0 => grp_nfa_accept_sample_multi_fu_268_result_ce0,
        result_we0 => grp_nfa_accept_sample_multi_fu_268_result_we0,
        result_d0 => grp_nfa_accept_sample_multi_fu_268_result_d0,
        result_q0 => grp_nfa_accept_sample_multi_fu_268_result_q0,
        ap_return => grp_nfa_accept_sample_multi_fu_268_ap_return);

    grp_sample_iterator_next_fu_289 : component sample_iterator_next
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_iterator_next_fu_289_ap_start,
        ap_done => grp_sample_iterator_next_fu_289_ap_done,
        ap_idle => grp_sample_iterator_next_fu_289_ap_idle,
        ap_ready => grp_sample_iterator_next_fu_289_ap_ready,
        indices_req_din => grp_sample_iterator_next_fu_289_indices_req_din,
        indices_req_full_n => grp_sample_iterator_next_fu_289_indices_req_full_n,
        indices_req_write => grp_sample_iterator_next_fu_289_indices_req_write,
        indices_rsp_empty_n => grp_sample_iterator_next_fu_289_indices_rsp_empty_n,
        indices_rsp_read => grp_sample_iterator_next_fu_289_indices_rsp_read,
        indices_address => grp_sample_iterator_next_fu_289_indices_address,
        indices_datain => grp_sample_iterator_next_fu_289_indices_datain,
        indices_dataout => grp_sample_iterator_next_fu_289_indices_dataout,
        indices_size => grp_sample_iterator_next_fu_289_indices_size,
        i_index => grp_sample_iterator_next_fu_289_i_index,
        i_sample => grp_sample_iterator_next_fu_289_i_sample,
        ap_return_0 => grp_sample_iterator_next_fu_289_ap_return_0,
        ap_return_1 => grp_sample_iterator_next_fu_289_ap_return_1);

    grp_sample_iterator_get_offset_fu_297 : component sample_iterator_get_offset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_iterator_get_offset_fu_297_ap_start,
        ap_done => grp_sample_iterator_get_offset_fu_297_ap_done,
        ap_idle => grp_sample_iterator_get_offset_fu_297_ap_idle,
        ap_ready => grp_sample_iterator_get_offset_fu_297_ap_ready,
        i_index => grp_sample_iterator_get_offset_fu_297_i_index,
        i_sample => grp_sample_iterator_get_offset_fu_297_i_sample,
        indices_req_din => grp_sample_iterator_get_offset_fu_297_indices_req_din,
        indices_req_full_n => grp_sample_iterator_get_offset_fu_297_indices_req_full_n,
        indices_req_write => grp_sample_iterator_get_offset_fu_297_indices_req_write,
        indices_rsp_empty_n => grp_sample_iterator_get_offset_fu_297_indices_rsp_empty_n,
        indices_rsp_read => grp_sample_iterator_get_offset_fu_297_indices_rsp_read,
        indices_address => grp_sample_iterator_get_offset_fu_297_indices_address,
        indices_datain => grp_sample_iterator_get_offset_fu_297_indices_datain,
        indices_dataout => grp_sample_iterator_get_offset_fu_297_indices_dataout,
        indices_size => grp_sample_iterator_get_offset_fu_297_indices_size,
        sample_buffer_size => grp_sample_iterator_get_offset_fu_297_sample_buffer_size,
        sample_length => grp_sample_iterator_get_offset_fu_297_sample_length,
        ap_return => grp_sample_iterator_get_offset_fu_297_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg assign process. --
    grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (not((tmp_3_fu_326_p3 = ap_const_lv1_0)) or not((ap_const_lv1_0 = finished_3_fu_358_p2))))) then 
                    grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_nfa_accept_sample_multi_fu_268_ap_ready)) then 
                    grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg assign process. --
    grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2))) then 
                    grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sample_iterator_get_offset_fu_297_ap_ready)) then 
                    grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sample_iterator_next_fu_289_ap_start_ap_start_reg assign process. --
    grp_sample_iterator_next_fu_289_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_iterator_next_fu_289_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                    grp_sample_iterator_next_fu_289_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sample_iterator_next_fu_289_ap_ready)) then 
                    grp_sample_iterator_next_fu_289_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- c_fu_106 assign process. --
    c_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                c_fu_106 <= p_c_1_fu_425_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                c_fu_106 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- finished_1_reg_220 assign process. --
    finished_1_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_done)))) then 
                finished_1_reg_220 <= ap_const_lv1_0;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                finished_1_reg_220 <= finished_reg_196;
            end if; 
        end if;
    end process;

    -- finished_2_reg_233 assign process. --
    finished_2_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                if (ap_sig_bdd_287) then 
                    finished_2_reg_233 <= finished_3_fu_358_p2;
                elsif (not((tmp_3_fu_326_p3 = ap_const_lv1_0))) then 
                    finished_2_reg_233 <= finished_1_reg_220;
                end if;
            end if; 
        end if;
    end process;

    -- finished_reg_196 assign process. --
    finished_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_392_p2)) and (ap_const_lv1_0 = finished_2_reg_233))) then 
                finished_reg_196 <= finished_2_reg_233;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                finished_reg_196 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- i_index_fu_110 assign process. --
    i_index_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_done)))) then 
                i_index_fu_110 <= grp_sample_iterator_next_fu_289_ap_return_0;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_index_fu_110 <= begin_index;
            end if; 
        end if;
    end process;

    -- i_sample_fu_114 assign process. --
    i_sample_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_done)))) then 
                i_sample_fu_114 <= grp_sample_iterator_next_fu_289_ap_return_1;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_sample_fu_114 <= begin_sample;
            end if; 
        end if;
    end process;

    -- indvars_iv_reg_208 assign process. --
    indvars_iv_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_done)))) then 
                indvars_iv_reg_208 <= units_reg_499;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                indvars_iv_reg_208 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_245 assign process. --
    k_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_logic_0 = grp_nfa_accept_sample_multi_fu_268_ap_done)) and (ap_const_lv1_0 = brmerge_demorgan_fu_387_p2))) then 
                k_1_reg_245 <= ap_const_lv5_0;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                k_1_reg_245 <= k_2_reg_532;
            end if; 
        end if;
    end process;

    -- p_0_reg_256 assign process. --
    p_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_logic_0 = grp_nfa_accept_sample_multi_fu_268_ap_done)) and not((ap_const_lv1_0 = brmerge_demorgan_fu_387_p2)))) then 
                p_0_reg_256 <= ap_const_lv16_1;
            elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_392_p2)) and not((ap_const_lv1_0 = finished_2_reg_233)))) then 
                p_0_reg_256 <= tmp_5_fu_412_p3;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0))) then
                i_index_load_reg_504 <= i_index_fu_110;
                i_sample_load_reg_510 <= i_sample_fu_114;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                k_2_reg_532 <= k_2_fu_398_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_logic_0 = grp_nfa_accept_sample_multi_fu_268_ap_done)))) then
                stop_on_first_meet_reg_521 <= grp_nfa_accept_sample_multi_fu_268_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                units_reg_499 <= units_fu_334_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_3_fu_326_p3 , finished_3_fu_358_p2 , grp_nfa_accept_sample_multi_fu_268_ap_done , exitcond_fu_392_p2 , finished_2_reg_233 , grp_sample_iterator_next_fu_289_ap_done , grp_sample_iterator_get_offset_fu_297_ap_done , brmerge_demorgan_fu_387_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (((tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((not((ap_const_logic_0 = grp_nfa_accept_sample_multi_fu_268_ap_done)) and not((ap_const_lv1_0 = brmerge_demorgan_fu_387_p2)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                elsif ((not((ap_const_logic_0 = grp_nfa_accept_sample_multi_fu_268_ap_done)) and (ap_const_lv1_0 = brmerge_demorgan_fu_387_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_392_p2)) and not((ap_const_lv1_0 = finished_2_reg_233)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                elsif ((not((ap_const_lv1_0 = exitcond_fu_392_p2)) and (ap_const_lv1_0 = finished_2_reg_233))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(resize(unsigned(p_0_reg_256),32));

    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(tmp_3_fu_326_p3, finished_3_fu_358_p2)
    begin
                ap_sig_bdd_287 <= ((tmp_3_fu_326_p3 = ap_const_lv1_0) and not((ap_const_lv1_0 = finished_3_fu_358_p2)));
    end process;

    brmerge_demorgan_fu_387_p2 <= (grp_nfa_accept_sample_multi_fu_268_ap_return and stop_on_first);
    c_1_fu_419_p2 <= std_logic_vector(unsigned(c_fu_106) + unsigned(ap_const_lv16_1));
    exitcond_fu_392_p2 <= "1" when (k_1_reg_245 = indvars_iv_reg_208) else "0";
    finished_3_fu_358_p2 <= (tmp_i_fu_348_p2 and tmp_i_16_fu_353_p2);
    grp_nfa_accept_sample_multi_fu_268_accept <= accept;
    grp_nfa_accept_sample_multi_fu_268_ap_start <= grp_nfa_accept_sample_multi_fu_268_ap_start_ap_start_reg;
    grp_nfa_accept_sample_multi_fu_268_length_r <= sample_length;
    grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_datain <= nfa_finals_buckets_datain;
    grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_full_n <= nfa_finals_buckets_req_full_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_empty_n <= nfa_finals_buckets_rsp_empty_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_datain <= nfa_forward_buckets_datain;
    grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_full_n <= nfa_forward_buckets_req_full_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_empty_n <= nfa_forward_buckets_rsp_empty_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_datain <= nfa_initials_buckets_datain;
    grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_full_n <= nfa_initials_buckets_req_full_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_empty_n <= nfa_initials_buckets_rsp_empty_n;
    grp_nfa_accept_sample_multi_fu_268_nfa_symbols <= nfa_symbols;
    grp_nfa_accept_sample_multi_fu_268_result_q0 <= result_q0;
    grp_nfa_accept_sample_multi_fu_268_sample_datain <= sample_buffer_datain;
    grp_nfa_accept_sample_multi_fu_268_sample_req_full_n <= sample_buffer_req_full_n;
    grp_nfa_accept_sample_multi_fu_268_sample_rsp_empty_n <= sample_buffer_rsp_empty_n;
    grp_nfa_accept_sample_multi_fu_268_start_indices_q0 <= start_indices_q0;
    grp_nfa_accept_sample_multi_fu_268_stop_on_first <= stop_on_first;
    grp_nfa_accept_sample_multi_fu_268_units <= indvars_iv_reg_208;
    grp_sample_iterator_get_offset_fu_297_ap_start <= grp_sample_iterator_get_offset_fu_297_ap_start_ap_start_reg;
    grp_sample_iterator_get_offset_fu_297_i_index <= i_index_load_reg_504;
    grp_sample_iterator_get_offset_fu_297_i_sample <= i_sample_load_reg_510;
    grp_sample_iterator_get_offset_fu_297_indices_datain <= indices_datain;
    grp_sample_iterator_get_offset_fu_297_indices_req_full_n <= indices_req_full_n;
    grp_sample_iterator_get_offset_fu_297_indices_rsp_empty_n <= indices_rsp_empty_n;
    grp_sample_iterator_get_offset_fu_297_sample_buffer_size <= sample_buffer_length;
    grp_sample_iterator_get_offset_fu_297_sample_length <= sample_length;
    grp_sample_iterator_next_fu_289_ap_start <= grp_sample_iterator_next_fu_289_ap_start_ap_start_reg;
    grp_sample_iterator_next_fu_289_i_index <= i_index_load_reg_504;
    grp_sample_iterator_next_fu_289_i_sample <= i_sample_load_reg_510;
    grp_sample_iterator_next_fu_289_indices_datain <= indices_datain;
    grp_sample_iterator_next_fu_289_indices_req_full_n <= indices_req_full_n;
    grp_sample_iterator_next_fu_289_indices_rsp_empty_n <= indices_rsp_empty_n;

    -- indices_address assign process. --
    indices_address_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_address, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_address)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_address <= grp_sample_iterator_get_offset_fu_297_indices_address;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_address <= grp_sample_iterator_next_fu_289_indices_address;
        else 
            indices_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- indices_dataout assign process. --
    indices_dataout_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_dataout, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_dataout)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_dataout <= grp_sample_iterator_get_offset_fu_297_indices_dataout;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_dataout <= grp_sample_iterator_next_fu_289_indices_dataout;
        else 
            indices_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- indices_req_din assign process. --
    indices_req_din_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_req_din, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_req_din)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_req_din <= grp_sample_iterator_get_offset_fu_297_indices_req_din;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_req_din <= grp_sample_iterator_next_fu_289_indices_req_din;
        else 
            indices_req_din <= 'X';
        end if; 
    end process;


    -- indices_req_write assign process. --
    indices_req_write_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_req_write, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_req_write)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_req_write <= grp_sample_iterator_get_offset_fu_297_indices_req_write;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_req_write <= grp_sample_iterator_next_fu_289_indices_req_write;
        else 
            indices_req_write <= 'X';
        end if; 
    end process;


    -- indices_rsp_read assign process. --
    indices_rsp_read_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_rsp_read, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_rsp_read)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_rsp_read <= grp_sample_iterator_get_offset_fu_297_indices_rsp_read;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_rsp_read <= grp_sample_iterator_next_fu_289_indices_rsp_read;
        else 
            indices_rsp_read <= 'X';
        end if; 
    end process;


    -- indices_size assign process. --
    indices_size_assign_proc : process(ap_CS_fsm, tmp_3_fu_326_p3, finished_3_fu_358_p2, grp_sample_iterator_next_fu_289_ap_idle, grp_sample_iterator_next_fu_289_indices_size, grp_sample_iterator_get_offset_fu_297_ap_idle, grp_sample_iterator_get_offset_fu_297_indices_size)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_3_fu_326_p3 = ap_const_lv1_0) and (ap_const_lv1_0 = finished_3_fu_358_p2)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_idle)))) then 
            indices_size <= grp_sample_iterator_get_offset_fu_297_indices_size;
        elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_logic_0 = grp_sample_iterator_next_fu_289_ap_idle)))) then 
            indices_size <= grp_sample_iterator_next_fu_289_indices_size;
        else 
            indices_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    k_2_fu_398_p2 <= std_logic_vector(unsigned(k_1_reg_245) + unsigned(ap_const_lv5_1));
    nfa_finals_buckets_address <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_address;
    nfa_finals_buckets_dataout <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_dataout;
    nfa_finals_buckets_req_din <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_din;
    nfa_finals_buckets_req_write <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_req_write;
    nfa_finals_buckets_rsp_read <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_rsp_read;
    nfa_finals_buckets_size <= grp_nfa_accept_sample_multi_fu_268_nfa_finals_buckets_size;
    nfa_forward_buckets_address <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_address;
    nfa_forward_buckets_dataout <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_dataout;
    nfa_forward_buckets_req_din <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_din;
    nfa_forward_buckets_req_write <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_req_write;
    nfa_forward_buckets_rsp_read <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_rsp_read;
    nfa_forward_buckets_size <= grp_nfa_accept_sample_multi_fu_268_nfa_forward_buckets_size;
    nfa_initials_buckets_address <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_address;
    nfa_initials_buckets_dataout <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_dataout;
    nfa_initials_buckets_req_din <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_din;
    nfa_initials_buckets_req_write <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_req_write;
    nfa_initials_buckets_rsp_read <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_rsp_read;
    nfa_initials_buckets_size <= grp_nfa_accept_sample_multi_fu_268_nfa_initials_buckets_size;
    p_c_1_fu_425_p3 <= 
        c_1_fu_419_p2 when (result_q0(0) = '1') else 
        c_fu_106;

    -- result_address0 assign process. --
    result_address0_assign_proc : process(ap_CS_fsm, grp_nfa_accept_sample_multi_fu_268_result_address0, tmp_2_fu_404_p1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            result_address0 <= tmp_2_fu_404_p1(4 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            result_address0 <= grp_nfa_accept_sample_multi_fu_268_result_address0;
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    -- result_ce0 assign process. --
    result_ce0_assign_proc : process(ap_CS_fsm, grp_nfa_accept_sample_multi_fu_268_result_ce0)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            result_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            result_ce0 <= grp_nfa_accept_sample_multi_fu_268_result_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= grp_nfa_accept_sample_multi_fu_268_result_d0;

    -- result_we0 assign process. --
    result_we0_assign_proc : process(ap_CS_fsm, grp_nfa_accept_sample_multi_fu_268_result_we0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            result_we0 <= grp_nfa_accept_sample_multi_fu_268_result_we0;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_buffer_address <= grp_nfa_accept_sample_multi_fu_268_sample_address;
    sample_buffer_dataout <= grp_nfa_accept_sample_multi_fu_268_sample_dataout;
    sample_buffer_req_din <= grp_nfa_accept_sample_multi_fu_268_sample_req_din;
    sample_buffer_req_write <= grp_nfa_accept_sample_multi_fu_268_sample_req_write;
    sample_buffer_rsp_read <= grp_nfa_accept_sample_multi_fu_268_sample_rsp_read;
    sample_buffer_size <= grp_nfa_accept_sample_multi_fu_268_sample_size;

    -- start_indices_address0 assign process. --
    start_indices_address0_assign_proc : process(ap_CS_fsm, grp_nfa_accept_sample_multi_fu_268_start_indices_address0, tmp_1_fu_364_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            start_indices_address0 <= tmp_1_fu_364_p1(4 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            start_indices_address0 <= grp_nfa_accept_sample_multi_fu_268_start_indices_address0;
        else 
            start_indices_address0 <= "XXXX";
        end if; 
    end process;


    -- start_indices_ce0 assign process. --
    start_indices_ce0_assign_proc : process(ap_CS_fsm, grp_nfa_accept_sample_multi_fu_268_start_indices_ce0, grp_sample_iterator_get_offset_fu_297_ap_done)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_done)))) then 
            start_indices_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            start_indices_ce0 <= grp_nfa_accept_sample_multi_fu_268_start_indices_ce0;
        else 
            start_indices_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    start_indices_d0 <= grp_sample_iterator_get_offset_fu_297_ap_return;

    -- start_indices_we0 assign process. --
    start_indices_we0_assign_proc : process(ap_CS_fsm, grp_sample_iterator_get_offset_fu_297_ap_done)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_logic_0 = grp_sample_iterator_get_offset_fu_297_ap_done))))) then 
            start_indices_we0 <= ap_const_logic_1;
        else 
            start_indices_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_364_p1 <= std_logic_vector(resize(unsigned(indvars_iv_reg_208),64));
    tmp_2_fu_404_p1 <= std_logic_vector(resize(unsigned(k_1_reg_245),64));
    tmp_3_cast_fu_409_p1 <= std_logic_vector(resize(unsigned(stop_on_first_meet_reg_521),16));
    tmp_3_fu_326_p3 <= indvars_iv_reg_208(4 downto 4);
    tmp_5_fu_412_p3 <= 
        tmp_3_cast_fu_409_p1 when (stop_on_first(0) = '1') else 
        c_fu_106;
    tmp_i_16_fu_353_p2 <= "1" when (i_index_fu_110 = end_index) else "0";
    tmp_i_fu_348_p2 <= "1" when (i_sample_fu_114 = end_sample) else "0";
    units_fu_334_p2 <= std_logic_vector(unsigned(indvars_iv_reg_208) + unsigned(ap_const_lv5_1));
end behav;
