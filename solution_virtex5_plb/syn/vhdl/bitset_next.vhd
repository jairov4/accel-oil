-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitset_next is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of bitset_next is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_true : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal grp_p_bsf32_hw_fu_118_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_123 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_1_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_1_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_bit_read_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_202_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_127_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_210_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_assign_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_bus_assign_reg_216_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_1_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_1_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_bsf32_hw_fu_118_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_write_assign_phi_fu_58_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_end_write_assign_phi_fu_73_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bucket_index_write_assign_phi_fu_91_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bit_write_assign_trunc3_ext_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_phi_fu_107_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_trunc_ext_fu_158_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_index_write_assign_cast_fu_168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal ap_sig_bdd_59 : BOOLEAN;

    component p_bsf32_hw IS
    port (
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_p_bsf32_hw_fu_118 : component p_bsf32_hw
    port map (
        bus_r => grp_p_bsf32_hw_fu_118_bus_r,
        ap_return => grp_p_bsf32_hw_fu_118_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 assign process. --
    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_9_1_fu_148_p2)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)) and not((ap_const_lv1_0 = tmp_11_1_fu_153_p2))))) then 
                ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 <= r_bit_read_reg_196;
            elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
                ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it1;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 assign process. --
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_9_1_fu_148_p2)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)) and not((ap_const_lv1_0 = tmp_11_1_fu_153_p2))))) then 
                ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 <= ap_const_lv2_2;
            elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
                ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it1;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 assign process. --
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_61) then
                if (ap_sig_bdd_125) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 <= p_read_1_reg_202;
                elsif (ap_sig_bdd_121) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 <= ap_const_lv32_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2 assign process. --
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                ap_reg_ppstg_bus_assign_reg_216_pp0_it1 <= bus_assign_reg_216;
                ap_reg_ppstg_p_read_1_reg_202_pp0_it1 <= p_read_1_reg_202;
                ap_reg_ppstg_tmp_reg_210_pp0_it1 <= tmp_reg_210;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                bus_assign_reg_216 <= bus_assign_fu_137_p2;
                p_read_1_reg_202 <= p_read;
                r_bit_read_reg_196 <= r_bit;
                tmp_reg_210 <= tmp_fu_127_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (tmp_5_fu_143_p2 = ap_const_lv1_0)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)) and (ap_const_lv1_0 = tmp_11_1_fu_153_p2)))) then
                reg_123 <= grp_p_bsf32_hw_fu_118_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)))) then
                tmp_11_1_reg_231 <= tmp_11_1_fu_153_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                tmp_5_reg_223 <= tmp_5_fu_143_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and not((tmp_5_fu_143_p2 = ap_const_lv1_0)))) then
                tmp_9_1_reg_227 <= tmp_9_1_fu_148_p2;
            end if;
        end if;
    end process;
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_reg_ppiten_pp0_it0 , ap_ce , ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- agg_result_bit_write_assign_phi_fu_107_p8 assign process. --
    agg_result_bit_write_assign_phi_fu_107_p8_assign_proc : process(tmp_5_reg_223, agg_result_bit_write_assign_trunc3_ext_fu_163_p1, ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2, agg_result_bit_write_assign_trunc_ext_fu_158_p1, ap_sig_bdd_113, ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then
            if ((ap_const_lv1_0 = tmp_5_reg_223)) then 
                agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc_ext_fu_158_p1;
            elsif (ap_sig_bdd_113) then 
                agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc3_ext_fu_163_p1;
            else 
                agg_result_bit_write_assign_phi_fu_107_p8 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2;
            end if;
        else 
            agg_result_bit_write_assign_phi_fu_107_p8 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2;
        end if; 
    end process;

    agg_result_bit_write_assign_trunc3_ext_fu_163_p1 <= std_logic_vector(resize(unsigned(reg_123),8));
    agg_result_bit_write_assign_trunc_ext_fu_158_p1 <= std_logic_vector(resize(unsigned(reg_123),8));
    agg_result_bucket_index_write_assign_cast_fu_168_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_write_assign_phi_fu_91_p8),8));

    -- agg_result_bucket_index_write_assign_phi_fu_91_p8 assign process. --
    agg_result_bucket_index_write_assign_phi_fu_91_p8_assign_proc : process(ap_reg_ppstg_tmp_reg_210_pp0_it1, tmp_5_reg_223, ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2, ap_sig_bdd_113, ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then
            if ((ap_const_lv1_0 = tmp_5_reg_223)) then 
                agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_ppstg_tmp_reg_210_pp0_it1;
            elsif (ap_sig_bdd_113) then 
                agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_const_lv2_1;
            else 
                agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2;
            end if;
        else 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2;
        end if; 
    end process;


    -- agg_result_bucket_write_assign_phi_fu_58_p8 assign process. --
    agg_result_bucket_write_assign_phi_fu_58_p8_assign_proc : process(ap_reg_ppstg_p_read_1_reg_202_pp0_it1, ap_reg_ppstg_bus_assign_reg_216_pp0_it1, tmp_5_reg_223, ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2, ap_sig_bdd_113, ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then
            if ((ap_const_lv1_0 = tmp_5_reg_223)) then 
                agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_bus_assign_reg_216_pp0_it1;
            elsif (ap_sig_bdd_113) then 
                agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_p_read_1_reg_202_pp0_it1;
            else 
                agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2;
            end if;
        else 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2;
        end if; 
    end process;


    -- agg_result_end_write_assign_phi_fu_73_p8 assign process. --
    agg_result_end_write_assign_phi_fu_73_p8_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, tmp_5_reg_223, tmp_9_1_reg_227, tmp_11_1_reg_231, ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2)
    begin
        if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_lv1_0 = tmp_5_reg_223)) and not((ap_const_lv1_0 = tmp_9_1_reg_227)) and (ap_const_lv1_0 = tmp_11_1_reg_231)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = tmp_5_reg_223)))) then 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_const_lv1_0;
        else 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_ce)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it1 <= ap_const_lv8_1;
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it1 <= ap_const_lv2_1;
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1 <= ap_const_lv32_1;
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1 <= ap_const_lv1_1;
    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return_0 <= agg_result_bit_write_assign_phi_fu_107_p8;
    ap_return_1 <= agg_result_bucket_index_write_assign_cast_fu_168_p1;
    ap_return_2 <= agg_result_bucket_write_assign_phi_fu_58_p8;
    ap_return_3 <= agg_result_end_write_assign_phi_fu_73_p8;

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_104 <= ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(tmp_5_reg_223, tmp_9_1_reg_227, tmp_11_1_reg_231)
    begin
                ap_sig_bdd_113 <= (not((ap_const_lv1_0 = tmp_5_reg_223)) and not((ap_const_lv1_0 = tmp_9_1_reg_227)) and (ap_const_lv1_0 = tmp_11_1_reg_231));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(tmp_5_fu_143_p2, tmp_9_1_fu_148_p2)
    begin
                ap_sig_bdd_121 <= (not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_9_1_fu_148_p2));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(tmp_5_fu_143_p2, tmp_9_1_fu_148_p2, tmp_11_1_fu_153_p2)
    begin
                ap_sig_bdd_125 <= (not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)) and not((ap_const_lv1_0 = tmp_11_1_fu_153_p2)));
    end process;


    -- ap_sig_bdd_59 assign process. --
    ap_sig_bdd_59_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_59 <= ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_ce)
    begin
                ap_sig_bdd_61 <= ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce));
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(tmp_5_fu_143_p2, tmp_9_1_fu_148_p2, tmp_11_1_fu_153_p2)
    begin
                ap_sig_bdd_73 <= (not((tmp_5_fu_143_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_1_fu_148_p2)) and (ap_const_lv1_0 = tmp_11_1_fu_153_p2));
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bus_assign_fu_137_p2 <= (tmp_3_fu_131_p2 and r_bucket);

    -- grp_p_bsf32_hw_fu_118_bus_r assign process. --
    grp_p_bsf32_hw_fu_118_bus_r_assign_proc : process(tmp_5_fu_143_p2, p_read_1_reg_202, bus_assign_reg_216, ap_sig_bdd_73, ap_sig_bdd_59)
    begin
        if (ap_sig_bdd_59) then
            if (ap_sig_bdd_73) then 
                grp_p_bsf32_hw_fu_118_bus_r <= p_read_1_reg_202;
            elsif ((tmp_5_fu_143_p2 = ap_const_lv1_0)) then 
                grp_p_bsf32_hw_fu_118_bus_r <= bus_assign_reg_216;
            else 
                grp_p_bsf32_hw_fu_118_bus_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_p_bsf32_hw_fu_118_bus_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_11_1_fu_153_p2 <= "1" when (p_read_1_reg_202 = ap_const_lv32_0) else "0";
    tmp_3_fu_131_p2 <= std_logic_vector(unsigned(r_bucket) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_5_fu_143_p2 <= "1" when (bus_assign_reg_216 = ap_const_lv32_0) else "0";
    tmp_9_1_fu_148_p2 <= "1" when (tmp_reg_210 = ap_const_lv2_0) else "0";
    tmp_fu_127_p1 <= r_bucket_index(2 - 1 downto 0);
end behav;
