-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sample_iterator_get_offset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_index : IN STD_LOGIC_VECTOR (15 downto 0);
    i_sample : IN STD_LOGIC_VECTOR (15 downto 0);
    indices_req_din : OUT STD_LOGIC;
    indices_req_full_n : IN STD_LOGIC;
    indices_req_write : OUT STD_LOGIC;
    indices_rsp_empty_n : IN STD_LOGIC;
    indices_rsp_read : OUT STD_LOGIC;
    indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
    indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
    indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_buffer_size : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_length : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sample_iterator_get_offset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tmp_4_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal indices_stride_load_new_reg_139 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_113_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_113_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_113_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_cast_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_113_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_113_p10 : STD_LOGIC_VECTOR (23 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((indices_rsp_empty_n = ap_const_logic_0)))) then
                indices_stride_load_new_reg_139 <= indices_datain(55 downto 48);
                tmp_4_reg_134 <= tmp_4_fu_92_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , indices_rsp_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((indices_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp_17_cast_fu_119_p1) + unsigned(tmp_4_reg_134));
    indices_address <= tmp_fu_81_p1(32 - 1 downto 0);
    indices_dataout <= ap_const_lv56_0;
    indices_req_din <= ap_const_logic_0;

    -- indices_req_write assign process. --
    indices_req_write_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            indices_req_write <= ap_const_logic_1;
        else 
            indices_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- indices_rsp_read assign process. --
    indices_rsp_read_assign_proc : process(ap_CS_fsm, indices_rsp_empty_n)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((indices_rsp_empty_n = ap_const_logic_0)))) then 
            indices_rsp_read <= ap_const_logic_1;
        else 
            indices_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    indices_size <= ap_const_lv32_1;
    tmp_17_cast_fu_119_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_113_p2),32));
    tmp_4_fu_92_p1 <= indices_datain(32 - 1 downto 0);
    tmp_fu_81_p1 <= std_logic_vector(resize(unsigned(i_index),64));
    tmp_s_fu_113_p0 <= tmp_s_fu_113_p00(16 - 1 downto 0);
    tmp_s_fu_113_p00 <= std_logic_vector(resize(unsigned(i_sample),24));
    tmp_s_fu_113_p1 <= tmp_s_fu_113_p10(8 - 1 downto 0);
    tmp_s_fu_113_p10 <= std_logic_vector(resize(unsigned(indices_stride_load_new_reg_139),24));
    tmp_s_fu_113_p2 <= std_logic_vector(resize(unsigned(tmp_s_fu_113_p0) * unsigned(tmp_s_fu_113_p1), 24));
end behav;
