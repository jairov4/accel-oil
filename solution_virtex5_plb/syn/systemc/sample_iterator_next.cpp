// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sample_iterator_next.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sample_iterator_next::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sample_iterator_next::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> sample_iterator_next::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> sample_iterator_next::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> sample_iterator_next::ap_ST_st3_fsm_2 = "10";
const sc_lv<2> sample_iterator_next::ap_ST_st4_fsm_3 = "11";
const sc_lv<32> sample_iterator_next::ap_const_lv32_1 = "1";
const sc_lv<32> sample_iterator_next::ap_const_lv32_20 = "100000";
const sc_lv<32> sample_iterator_next::ap_const_lv32_2F = "101111";
const sc_lv<17> sample_iterator_next::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<16> sample_iterator_next::ap_const_lv16_1 = "1";
const sc_lv<16> sample_iterator_next::ap_const_lv16_0 = "0000000000000000";
const sc_lv<56> sample_iterator_next::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";

sample_iterator_next::sample_iterator_next(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_index_write_assign_fu_130_p3);
    sensitive << ( i_index );
    sensitive << ( tmp_5_fu_105_p2 );
    sensitive << ( tmp_6_fu_111_p2 );

    SC_METHOD(thread_agg_result_sample_write_assign_fu_122_p3);
    sensitive << ( tmp_5_fu_105_p2 );
    sensitive << ( tmp_7_fu_116_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( agg_result_index_write_assign_fu_130_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( agg_result_sample_write_assign_fu_122_p3 );

    SC_METHOD(thread_indices_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_fu_67_p1 );

    SC_METHOD(thread_indices_dataout);

    SC_METHOD(thread_indices_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_indices_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_indices_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( indices_rsp_empty_n );

    SC_METHOD(thread_indices_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_tmp_4_fu_95_p2);
    sensitive << ( tmp_9_cast_fu_92_p1 );

    SC_METHOD(thread_tmp_5_fu_105_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_fu_95_p2 );

    SC_METHOD(thread_tmp_5_fu_105_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_cast_fu_88_p1 );
    sensitive << ( tmp_5_fu_105_p1 );

    SC_METHOD(thread_tmp_6_fu_111_p2);
    sensitive << ( i_index );

    SC_METHOD(thread_tmp_7_fu_116_p2);
    sensitive << ( i_sample );

    SC_METHOD(thread_tmp_9_cast_fu_92_p1);
    sensitive << ( indices_samples_load_new5_reg_161 );

    SC_METHOD(thread_tmp_cast_fu_88_p1);
    sensitive << ( i_sample );

    SC_METHOD(thread_tmp_s_fu_67_p1);
    sensitive << ( i_index );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( indices_rsp_empty_n );

    ap_CS_fsm = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sample_iterator_next_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indices_req_din, "(port)indices_req_din");
    sc_trace(mVcdFile, indices_req_full_n, "(port)indices_req_full_n");
    sc_trace(mVcdFile, indices_req_write, "(port)indices_req_write");
    sc_trace(mVcdFile, indices_rsp_empty_n, "(port)indices_rsp_empty_n");
    sc_trace(mVcdFile, indices_rsp_read, "(port)indices_rsp_read");
    sc_trace(mVcdFile, indices_address, "(port)indices_address");
    sc_trace(mVcdFile, indices_datain, "(port)indices_datain");
    sc_trace(mVcdFile, indices_dataout, "(port)indices_dataout");
    sc_trace(mVcdFile, indices_size, "(port)indices_size");
    sc_trace(mVcdFile, i_index, "(port)i_index");
    sc_trace(mVcdFile, i_sample, "(port)i_sample");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, indices_samples_load_new5_reg_161, "indices_samples_load_new5_reg_161");
    sc_trace(mVcdFile, tmp_s_fu_67_p1, "tmp_s_fu_67_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_92_p1, "tmp_9_cast_fu_92_p1");
    sc_trace(mVcdFile, tmp_4_fu_95_p2, "tmp_4_fu_95_p2");
    sc_trace(mVcdFile, tmp_cast_fu_88_p1, "tmp_cast_fu_88_p1");
    sc_trace(mVcdFile, tmp_5_fu_105_p1, "tmp_5_fu_105_p1");
    sc_trace(mVcdFile, tmp_5_fu_105_p2, "tmp_5_fu_105_p2");
    sc_trace(mVcdFile, tmp_7_fu_116_p2, "tmp_7_fu_116_p2");
    sc_trace(mVcdFile, tmp_6_fu_111_p2, "tmp_6_fu_111_p2");
    sc_trace(mVcdFile, agg_result_index_write_assign_fu_130_p3, "agg_result_index_write_assign_fu_130_p3");
    sc_trace(mVcdFile, agg_result_sample_write_assign_fu_122_p3, "agg_result_sample_write_assign_fu_122_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sample_iterator_next::~sample_iterator_next() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sample_iterator_next::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) {
        indices_samples_load_new5_reg_161 = indices_datain.read().range(47, 32);
    }
}

void sample_iterator_next::thread_agg_result_index_write_assign_fu_130_p3() {
    agg_result_index_write_assign_fu_130_p3 = (!tmp_5_fu_105_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_5_fu_105_p2.read()[0].to_bool())? i_index.read(): tmp_6_fu_111_p2.read());
}

void sample_iterator_next::thread_agg_result_sample_write_assign_fu_122_p3() {
    agg_result_sample_write_assign_fu_122_p3 = (!tmp_5_fu_105_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_5_fu_105_p2.read()[0].to_bool())? tmp_7_fu_116_p2.read(): ap_const_lv16_0);
}

void sample_iterator_next::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) || 
         esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_ready() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_return_0() {
    ap_return_0 = agg_result_index_write_assign_fu_130_p3.read();
}

void sample_iterator_next::thread_ap_return_1() {
    ap_return_1 = agg_result_sample_write_assign_fu_122_p3.read();
}

void sample_iterator_next::thread_indices_address() {
    indices_address =  (sc_lv<32>) (tmp_s_fu_67_p1.read());
}

void sample_iterator_next::thread_indices_dataout() {
    indices_dataout = ap_const_lv56_0;
}

void sample_iterator_next::thread_indices_req_din() {
    indices_req_din = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_req_write() {
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        indices_req_write = ap_const_logic_1;
    } else {
        indices_req_write = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_rsp_read() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) {
        indices_rsp_read = ap_const_logic_1;
    } else {
        indices_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_size() {
    indices_size = ap_const_lv32_1;
}

void sample_iterator_next::thread_tmp_4_fu_95_p2() {
    tmp_4_fu_95_p2 = (!tmp_9_cast_fu_92_p1.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_bigint<17>(tmp_9_cast_fu_92_p1.read()) + sc_biguint<17>(ap_const_lv17_1FFFF));
}

void sample_iterator_next::thread_tmp_5_fu_105_p1() {
    tmp_5_fu_105_p1 = esl_sext<18,17>(tmp_4_fu_95_p2.read());
}

void sample_iterator_next::thread_tmp_5_fu_105_p2() {
    tmp_5_fu_105_p2 = (!tmp_cast_fu_88_p1.read().is_01() || !tmp_5_fu_105_p1.read().is_01())? sc_lv<1>(): (sc_bigint<18>(tmp_cast_fu_88_p1.read()) < sc_bigint<18>(tmp_5_fu_105_p1.read()));
}

void sample_iterator_next::thread_tmp_6_fu_111_p2() {
    tmp_6_fu_111_p2 = (!i_index.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(i_index.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void sample_iterator_next::thread_tmp_7_fu_116_p2() {
    tmp_7_fu_116_p2 = (!i_sample.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(i_sample.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void sample_iterator_next::thread_tmp_9_cast_fu_92_p1() {
    tmp_9_cast_fu_92_p1 = esl_zext<17,16>(indices_samples_load_new5_reg_161.read());
}

void sample_iterator_next::thread_tmp_cast_fu_88_p1() {
    tmp_cast_fu_88_p1 = esl_zext<18,16>(i_sample.read());
}

void sample_iterator_next::thread_tmp_s_fu_67_p1() {
    tmp_s_fu_67_p1 = esl_zext<64,16>(i_index.read());
}

void sample_iterator_next::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
}

