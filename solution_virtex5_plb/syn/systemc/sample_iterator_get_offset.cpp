// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sample_iterator_get_offset.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sample_iterator_get_offset::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sample_iterator_get_offset::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> sample_iterator_get_offset::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> sample_iterator_get_offset::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> sample_iterator_get_offset::ap_ST_st3_fsm_2 = "10";
const sc_lv<2> sample_iterator_get_offset::ap_ST_st4_fsm_3 = "11";
const sc_lv<32> sample_iterator_get_offset::ap_const_lv32_1 = "1";
const sc_lv<32> sample_iterator_get_offset::ap_const_lv32_30 = "110000";
const sc_lv<32> sample_iterator_get_offset::ap_const_lv32_37 = "110111";
const sc_lv<56> sample_iterator_get_offset::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";

sample_iterator_get_offset::sample_iterator_get_offset(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_4_reg_134 );
    sensitive << ( tmp_17_cast_fu_119_p1 );

    SC_METHOD(thread_indices_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_81_p1 );

    SC_METHOD(thread_indices_dataout);

    SC_METHOD(thread_indices_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_indices_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_indices_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( indices_rsp_empty_n );

    SC_METHOD(thread_indices_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_tmp_17_cast_fu_119_p1);
    sensitive << ( tmp_s_fu_113_p2 );

    SC_METHOD(thread_tmp_4_fu_92_p1);
    sensitive << ( indices_datain );

    SC_METHOD(thread_tmp_fu_81_p1);
    sensitive << ( i_index );

    SC_METHOD(thread_tmp_s_fu_113_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_fu_113_p00 );

    SC_METHOD(thread_tmp_s_fu_113_p00);
    sensitive << ( i_sample );

    SC_METHOD(thread_tmp_s_fu_113_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_fu_113_p10 );

    SC_METHOD(thread_tmp_s_fu_113_p10);
    sensitive << ( indices_stride_load_new_reg_139 );

    SC_METHOD(thread_tmp_s_fu_113_p2);
    sensitive << ( tmp_s_fu_113_p0 );
    sensitive << ( tmp_s_fu_113_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( indices_rsp_empty_n );

    ap_CS_fsm = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sample_iterator_get_offset_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, i_index, "(port)i_index");
    sc_trace(mVcdFile, i_sample, "(port)i_sample");
    sc_trace(mVcdFile, indices_req_din, "(port)indices_req_din");
    sc_trace(mVcdFile, indices_req_full_n, "(port)indices_req_full_n");
    sc_trace(mVcdFile, indices_req_write, "(port)indices_req_write");
    sc_trace(mVcdFile, indices_rsp_empty_n, "(port)indices_rsp_empty_n");
    sc_trace(mVcdFile, indices_rsp_read, "(port)indices_rsp_read");
    sc_trace(mVcdFile, indices_address, "(port)indices_address");
    sc_trace(mVcdFile, indices_datain, "(port)indices_datain");
    sc_trace(mVcdFile, indices_dataout, "(port)indices_dataout");
    sc_trace(mVcdFile, indices_size, "(port)indices_size");
    sc_trace(mVcdFile, sample_buffer_size, "(port)sample_buffer_size");
    sc_trace(mVcdFile, sample_length, "(port)sample_length");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, tmp_4_fu_92_p1, "tmp_4_fu_92_p1");
    sc_trace(mVcdFile, tmp_4_reg_134, "tmp_4_reg_134");
    sc_trace(mVcdFile, indices_stride_load_new_reg_139, "indices_stride_load_new_reg_139");
    sc_trace(mVcdFile, tmp_fu_81_p1, "tmp_fu_81_p1");
    sc_trace(mVcdFile, tmp_s_fu_113_p0, "tmp_s_fu_113_p0");
    sc_trace(mVcdFile, tmp_s_fu_113_p1, "tmp_s_fu_113_p1");
    sc_trace(mVcdFile, tmp_s_fu_113_p2, "tmp_s_fu_113_p2");
    sc_trace(mVcdFile, tmp_17_cast_fu_119_p1, "tmp_17_cast_fu_119_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp_s_fu_113_p00, "tmp_s_fu_113_p00");
    sc_trace(mVcdFile, tmp_s_fu_113_p10, "tmp_s_fu_113_p10");
#endif

    }
}

sample_iterator_get_offset::~sample_iterator_get_offset() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sample_iterator_get_offset::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) {
        indices_stride_load_new_reg_139 = indices_datain.read().range(55, 48);
        tmp_4_reg_134 = tmp_4_fu_92_p1.read();
    }
}

void sample_iterator_get_offset::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) || 
         esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_ready() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_return() {
    ap_return = (!tmp_17_cast_fu_119_p1.read().is_01() || !tmp_4_reg_134.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_17_cast_fu_119_p1.read()) + sc_biguint<32>(tmp_4_reg_134.read()));
}

void sample_iterator_get_offset::thread_indices_address() {
    indices_address =  (sc_lv<32>) (tmp_fu_81_p1.read());
}

void sample_iterator_get_offset::thread_indices_dataout() {
    indices_dataout = ap_const_lv56_0;
}

void sample_iterator_get_offset::thread_indices_req_din() {
    indices_req_din = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_req_write() {
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        indices_req_write = ap_const_logic_1;
    } else {
        indices_req_write = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_rsp_read() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) {
        indices_rsp_read = ap_const_logic_1;
    } else {
        indices_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_size() {
    indices_size = ap_const_lv32_1;
}

void sample_iterator_get_offset::thread_tmp_17_cast_fu_119_p1() {
    tmp_17_cast_fu_119_p1 = esl_zext<32,24>(tmp_s_fu_113_p2.read());
}

void sample_iterator_get_offset::thread_tmp_4_fu_92_p1() {
    tmp_4_fu_92_p1 = indices_datain.read().range(32-1, 0);
}

void sample_iterator_get_offset::thread_tmp_fu_81_p1() {
    tmp_fu_81_p1 = esl_zext<64,16>(i_index.read());
}

void sample_iterator_get_offset::thread_tmp_s_fu_113_p0() {
    tmp_s_fu_113_p0 =  (sc_lv<16>) (tmp_s_fu_113_p00.read());
}

void sample_iterator_get_offset::thread_tmp_s_fu_113_p00() {
    tmp_s_fu_113_p00 = esl_zext<24,16>(i_sample.read());
}

void sample_iterator_get_offset::thread_tmp_s_fu_113_p1() {
    tmp_s_fu_113_p1 =  (sc_lv<8>) (tmp_s_fu_113_p10.read());
}

void sample_iterator_get_offset::thread_tmp_s_fu_113_p10() {
    tmp_s_fu_113_p10 = esl_zext<24,8>(indices_stride_load_new_reg_139.read());
}

void sample_iterator_get_offset::thread_tmp_s_fu_113_p2() {
    tmp_s_fu_113_p2 = (!tmp_s_fu_113_p0.read().is_01() || !tmp_s_fu_113_p1.read().is_01())? sc_lv<24>(): sc_biguint<16>(tmp_s_fu_113_p0.read()) * sc_biguint<8>(tmp_s_fu_113_p1.read());
}

void sample_iterator_get_offset::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}
}

