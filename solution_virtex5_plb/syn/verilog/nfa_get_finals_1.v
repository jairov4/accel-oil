// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nfa_get_finals_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nfa_finals_buckets_req_din,
        nfa_finals_buckets_req_full_n,
        nfa_finals_buckets_req_write,
        nfa_finals_buckets_rsp_empty_n,
        nfa_finals_buckets_rsp_read,
        nfa_finals_buckets_address,
        nfa_finals_buckets_datain,
        nfa_finals_buckets_dataout,
        nfa_finals_buckets_size,
        ap_ce,
        finals_buckets_address0,
        finals_buckets_ce0,
        finals_buckets_we0,
        finals_buckets_d0,
        tmp_28
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   nfa_finals_buckets_req_din;
input   nfa_finals_buckets_req_full_n;
output   nfa_finals_buckets_req_write;
input   nfa_finals_buckets_rsp_empty_n;
output   nfa_finals_buckets_rsp_read;
output  [31:0] nfa_finals_buckets_address;
input  [63:0] nfa_finals_buckets_datain;
output  [63:0] nfa_finals_buckets_dataout;
output  [31:0] nfa_finals_buckets_size;
input   ap_ce;
output  [3:0] finals_buckets_address0;
output   finals_buckets_ce0;
output   finals_buckets_we0;
output  [63:0] finals_buckets_d0;
input  [4:0] tmp_28;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nfa_finals_buckets_req_write;
reg nfa_finals_buckets_rsp_read;
reg finals_buckets_ce0;
reg finals_buckets_we0;
reg   [0:0] ap_CS_fsm = 1'b0;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg   [4:0] tmp_28_read_reg_67;
reg   [4:0] ap_reg_ppstg_tmp_28_read_reg_67_pp0_it1;
reg   [4:0] ap_reg_ppstg_tmp_28_read_reg_67_pp0_it2;
reg   [63:0] nfa_finals_buckets_read_reg_72;
wire   [63:0] tmp_28_cast_fu_63_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_ppstg_tmp_28_read_reg_67_pp0_it1 <= tmp_28_read_reg_67;
        ap_reg_ppstg_tmp_28_read_reg_67_pp0_it2 <= ap_reg_ppstg_tmp_28_read_reg_67_pp0_it1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        nfa_finals_buckets_read_reg_72 <= nfa_finals_buckets_datain;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        tmp_28_read_reg_67 <= tmp_28;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it3))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// finals_buckets_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        finals_buckets_ce0 = ap_const_logic_1;
    end else begin
        finals_buckets_ce0 = ap_const_logic_0;
    end
end

/// finals_buckets_we0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        finals_buckets_we0 = ap_const_logic_1;
    end else begin
        finals_buckets_we0 = ap_const_logic_0;
    end
end

/// nfa_finals_buckets_req_write assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        nfa_finals_buckets_req_write = ap_const_logic_1;
    end else begin
        nfa_finals_buckets_req_write = ap_const_logic_0;
    end
end

/// nfa_finals_buckets_rsp_read assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or nfa_finals_buckets_rsp_empty_n or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (nfa_finals_buckets_rsp_empty_n == ap_const_logic_0))) & (ap_const_logic_1 == ap_ce))) begin
        nfa_finals_buckets_rsp_read = ap_const_logic_1;
    end else begin
        nfa_finals_buckets_rsp_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or nfa_finals_buckets_rsp_empty_n or ap_ce or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_reg_ppiten_pp0_it0 = ap_start;
assign finals_buckets_address0 = tmp_28_cast_fu_63_p1;
assign finals_buckets_d0 = nfa_finals_buckets_read_reg_72;
assign nfa_finals_buckets_address = ap_const_lv32_0;
assign nfa_finals_buckets_dataout = ap_const_lv64_0;
assign nfa_finals_buckets_req_din = ap_const_logic_0;
assign nfa_finals_buckets_size = ap_const_lv32_1;
assign tmp_28_cast_fu_63_p1 = $unsigned(ap_reg_ppstg_tmp_28_read_reg_67_pp0_it2);


endmodule //nfa_get_finals_1

