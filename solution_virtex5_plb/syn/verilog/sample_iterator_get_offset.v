// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sample_iterator_get_offset (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_index,
        i_sample,
        indices_req_din,
        indices_req_full_n,
        indices_req_write,
        indices_rsp_empty_n,
        indices_rsp_read,
        indices_address,
        indices_datain,
        indices_dataout,
        indices_size,
        sample_buffer_size,
        sample_length,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv56_0 = 56'b00000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] i_index;
input  [15:0] i_sample;
output   indices_req_din;
input   indices_req_full_n;
output   indices_req_write;
input   indices_rsp_empty_n;
output   indices_rsp_read;
output  [31:0] indices_address;
input  [55:0] indices_datain;
output  [55:0] indices_dataout;
output  [31:0] indices_size;
input  [31:0] sample_buffer_size;
input  [15:0] sample_length;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg indices_req_write;
reg indices_rsp_read;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [31:0] tmp_4_fu_92_p1;
reg   [31:0] tmp_4_reg_134;
reg   [7:0] indices_stride_load_new_reg_139;
wire   [63:0] tmp_fu_81_p1;
wire   [15:0] tmp_s_fu_113_p0;
wire   [7:0] tmp_s_fu_113_p1;
wire   [23:0] tmp_s_fu_113_p2;
wire   [31:0] tmp_17_cast_fu_119_p1;
reg   [1:0] ap_NS_fsm;
wire   [23:0] tmp_s_fu_113_p00;
wire   [23:0] tmp_s_fu_113_p10;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(indices_rsp_empty_n == ap_const_logic_0))) begin
        indices_stride_load_new_reg_139 <= {{indices_datain[ap_const_lv32_37 : ap_const_lv32_30]}};
        tmp_4_reg_134 <= tmp_4_fu_92_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// indices_req_write assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        indices_req_write = ap_const_logic_1;
    end else begin
        indices_req_write = ap_const_logic_0;
    end
end

/// indices_rsp_read assign process. ///
always @ (ap_CS_fsm or indices_rsp_empty_n)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(indices_rsp_empty_n == ap_const_logic_0))) begin
        indices_rsp_read = ap_const_logic_1;
    end else begin
        indices_rsp_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or indices_rsp_empty_n)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~(indices_rsp_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_return = (tmp_17_cast_fu_119_p1 + tmp_4_reg_134);
assign indices_address = tmp_fu_81_p1;
assign indices_dataout = ap_const_lv56_0;
assign indices_req_din = ap_const_logic_0;
assign indices_size = ap_const_lv32_1;
assign tmp_17_cast_fu_119_p1 = $unsigned(tmp_s_fu_113_p2);
assign tmp_4_fu_92_p1 = indices_datain[31:0];
assign tmp_fu_81_p1 = $unsigned(i_index);
assign tmp_s_fu_113_p0 = tmp_s_fu_113_p00;
assign tmp_s_fu_113_p00 = $unsigned(i_sample);
assign tmp_s_fu_113_p1 = tmp_s_fu_113_p10;
assign tmp_s_fu_113_p10 = $unsigned(indices_stride_load_new_reg_139);
assign tmp_s_fu_113_p2 = ($signed({{1'b0}, {tmp_s_fu_113_p0}}) * $signed({{1'b0}, {tmp_s_fu_113_p1}}));


endmodule //sample_iterator_get_offset

