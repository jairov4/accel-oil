-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nfa_accept_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nfa_initials_buckets_req_din : OUT STD_LOGIC;
    nfa_initials_buckets_req_full_n : IN STD_LOGIC;
    nfa_initials_buckets_req_write : OUT STD_LOGIC;
    nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
    nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_req_din : OUT STD_LOGIC;
    nfa_finals_buckets_req_full_n : IN STD_LOGIC;
    nfa_finals_buckets_req_write : OUT STD_LOGIC;
    nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
    nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_req_din : OUT STD_LOGIC;
    nfa_forward_buckets_req_full_n : IN STD_LOGIC;
    nfa_forward_buckets_req_write : OUT STD_LOGIC;
    nfa_forward_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_forward_buckets_rsp_read : OUT STD_LOGIC;
    nfa_forward_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_symbols : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_req_din : OUT STD_LOGIC;
    sample_req_full_n : IN STD_LOGIC;
    sample_req_write : OUT STD_LOGIC;
    sample_rsp_empty_n : IN STD_LOGIC;
    sample_rsp_read : OUT STD_LOGIC;
    sample_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    length_r : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of nfa_accept_sample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (6 downto 0) := "0010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (6 downto 0) := "0101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (6 downto 0) := "0101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (6 downto 0) := "0101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (6 downto 0) := "0111011";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (6 downto 0) := "1000011";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_609 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_addr_1_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal sym_reg_629 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_1_i_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_1_i_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_bsf32_hw_fu_372_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal r_bit_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_440_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_bucket_index1_ph_cast_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_ph_cast_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_cast_fu_452_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_i_cast_reg_658 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_end_phi_fu_316_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_reg_673 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_i_reg_688 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_490_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_i_reg_693 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_bit_reg_711 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_index_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_buckets_0_1_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_0_1_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_1_1_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_1_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_1_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_1_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_1_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitset_next_fu_348_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_348_r_bit : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_348_r_bucket_index : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_348_r_bucket : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_348_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_348_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_348_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_348_ap_return_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitset_next_fu_348_ap_ce : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_ap_start : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_ap_done : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_ap_idle : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_ap_ready : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_360_nfa_initials_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_360_ap_ce : STD_LOGIC;
    signal grp_nfa_get_initials_fu_360_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_360_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_ap_start : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_ap_done : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_ap_idle : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_ap_ready : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_nfa_finals_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_ap_ce : STD_LOGIC;
    signal grp_nfa_get_finals_fu_366_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_366_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_372_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_372_ap_ce : STD_LOGIC;
    signal i_reg_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal any_phi_fu_328_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_01_rec_reg_150 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_buckets_1_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_0_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_bucket1_ph_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_ph_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_bit1_ph_reg_231 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_end_ph_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_buckets_1_3_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_3_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket1_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_end_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal any_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nfa_get_finals_fu_366_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_cast_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_cast_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_400_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_455_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_471_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_471_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_484_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_484_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_490_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_490_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_fu_494_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_i_fu_512_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_400_ce : STD_LOGIC;
    signal grp_fu_410_ce : STD_LOGIC;
    signal grp_fu_422_ce : STD_LOGIC;
    signal grp_fu_471_ce : STD_LOGIC;
    signal grp_fu_484_ce : STD_LOGIC;
    signal grp_fu_490_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal grp_fu_484_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_484_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component bitset_next IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component nfa_get_initials IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nfa_initials_buckets_req_din : OUT STD_LOGIC;
        nfa_initials_buckets_req_full_n : IN STD_LOGIC;
        nfa_initials_buckets_req_write : OUT STD_LOGIC;
        nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
        nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_get_finals IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nfa_finals_buckets_req_din : OUT STD_LOGIC;
        nfa_finals_buckets_req_full_n : IN STD_LOGIC;
        nfa_finals_buckets_req_write : OUT STD_LOGIC;
        nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
        nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_bsf32_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_16ns_16ns_16_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_6ns_6ns_6_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_14ns_14ns_14_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    grp_bitset_next_fu_348 : component bitset_next
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read => grp_bitset_next_fu_348_p_read,
        r_bit => grp_bitset_next_fu_348_r_bit,
        r_bucket_index => grp_bitset_next_fu_348_r_bucket_index,
        r_bucket => grp_bitset_next_fu_348_r_bucket,
        ap_return_0 => grp_bitset_next_fu_348_ap_return_0,
        ap_return_1 => grp_bitset_next_fu_348_ap_return_1,
        ap_return_2 => grp_bitset_next_fu_348_ap_return_2,
        ap_return_3 => grp_bitset_next_fu_348_ap_return_3,
        ap_ce => grp_bitset_next_fu_348_ap_ce);

    grp_nfa_get_initials_fu_360 : component nfa_get_initials
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_initials_fu_360_ap_start,
        ap_done => grp_nfa_get_initials_fu_360_ap_done,
        ap_idle => grp_nfa_get_initials_fu_360_ap_idle,
        ap_ready => grp_nfa_get_initials_fu_360_ap_ready,
        nfa_initials_buckets_req_din => grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_din,
        nfa_initials_buckets_req_full_n => grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_full_n,
        nfa_initials_buckets_req_write => grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_write,
        nfa_initials_buckets_rsp_empty_n => grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_empty_n,
        nfa_initials_buckets_rsp_read => grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_read,
        nfa_initials_buckets_address => grp_nfa_get_initials_fu_360_nfa_initials_buckets_address,
        nfa_initials_buckets_datain => grp_nfa_get_initials_fu_360_nfa_initials_buckets_datain,
        nfa_initials_buckets_dataout => grp_nfa_get_initials_fu_360_nfa_initials_buckets_dataout,
        nfa_initials_buckets_size => grp_nfa_get_initials_fu_360_nfa_initials_buckets_size,
        ap_ce => grp_nfa_get_initials_fu_360_ap_ce,
        ap_return_0 => grp_nfa_get_initials_fu_360_ap_return_0,
        ap_return_1 => grp_nfa_get_initials_fu_360_ap_return_1);

    grp_nfa_get_finals_fu_366 : component nfa_get_finals
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_finals_fu_366_ap_start,
        ap_done => grp_nfa_get_finals_fu_366_ap_done,
        ap_idle => grp_nfa_get_finals_fu_366_ap_idle,
        ap_ready => grp_nfa_get_finals_fu_366_ap_ready,
        nfa_finals_buckets_req_din => grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_din,
        nfa_finals_buckets_req_full_n => grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_full_n,
        nfa_finals_buckets_req_write => grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_write,
        nfa_finals_buckets_rsp_empty_n => grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_empty_n,
        nfa_finals_buckets_rsp_read => grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_read,
        nfa_finals_buckets_address => grp_nfa_get_finals_fu_366_nfa_finals_buckets_address,
        nfa_finals_buckets_datain => grp_nfa_get_finals_fu_366_nfa_finals_buckets_datain,
        nfa_finals_buckets_dataout => grp_nfa_get_finals_fu_366_nfa_finals_buckets_dataout,
        nfa_finals_buckets_size => grp_nfa_get_finals_fu_366_nfa_finals_buckets_size,
        ap_ce => grp_nfa_get_finals_fu_366_ap_ce,
        ap_return_0 => grp_nfa_get_finals_fu_366_ap_return_0,
        ap_return_1 => grp_nfa_get_finals_fu_366_ap_return_1);

    grp_p_bsf32_hw_fu_372 : component p_bsf32_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        bus_r => grp_p_bsf32_hw_fu_372_bus_r,
        ap_return => grp_p_bsf32_hw_fu_372_ap_return,
        ap_ce => grp_p_bsf32_hw_fu_372_ap_ce);

    nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_U17 : component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16
    generic map (
        ID => 17,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_400_p0,
        din1 => grp_fu_400_p1,
        ce => grp_fu_400_ce,
        dout => grp_fu_400_p2);

    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U18 : component nfa_accept_samples_generic_hw_add_16ns_16ns_16_4
    generic map (
        ID => 18,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_410_p0,
        din1 => grp_fu_410_p1,
        ce => grp_fu_410_ce,
        dout => grp_fu_410_p2);

    nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_U19 : component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16
    generic map (
        ID => 19,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        ce => grp_fu_422_ce,
        dout => grp_fu_422_p2);

    nfa_accept_samples_generic_hw_add_6ns_6ns_6_2_U20 : component nfa_accept_samples_generic_hw_add_6ns_6ns_6_2
    generic map (
        ID => 20,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_471_p0,
        din1 => grp_fu_471_p1,
        ce => grp_fu_471_ce,
        dout => grp_fu_471_p2);

    nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4_U21 : component nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4
    generic map (
        ID => 21,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_484_p0,
        din1 => grp_fu_484_p1,
        ce => grp_fu_484_ce,
        dout => grp_fu_484_p2);

    nfa_accept_samples_generic_hw_add_14ns_14ns_14_4_U22 : component nfa_accept_samples_generic_hw_add_14ns_14ns_14_4
    generic map (
        ID => 22,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_490_p0,
        din1 => grp_fu_490_p1,
        ce => grp_fu_490_ce,
        dout => grp_fu_490_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
                    ap_return_preg <= p_0_reg_336;
                end if; 
            end if;
        end if;
    end process;


    -- grp_nfa_get_finals_fu_366_ap_start_ap_start_reg assign process. --
    grp_nfa_get_finals_fu_366_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_nfa_get_finals_fu_366_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st24_fsm_23 = ap_NS_fsm) and (ap_ST_st23_fsm_22 = ap_CS_fsm) and (tmp_s_reg_605 = ap_const_lv1_0))) then 
                    grp_nfa_get_finals_fu_366_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_nfa_get_finals_fu_366_ap_ready)) then 
                    grp_nfa_get_finals_fu_366_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- agg_result_bucket_index_0_lcssa4_i_reg_194 assign process. --
    agg_result_bucket_index_0_lcssa4_i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st40_fsm_39 = ap_CS_fsm) and (tmp_19_1_i_reg_634 = ap_const_lv1_0))) then 
                agg_result_bucket_index_0_lcssa4_i_reg_194 <= ap_const_lv1_1;
            elsif (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_19_i_reg_620 = ap_const_lv1_0))) then 
                agg_result_bucket_index_0_lcssa4_i_reg_194 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- any_reg_323 assign process. --
    any_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                any_reg_323 <= ap_const_lv1_0;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                any_reg_323 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- bus_assign_reg_182 assign process. --
    bus_assign_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st40_fsm_39 = ap_CS_fsm) and (tmp_19_1_i_reg_634 = ap_const_lv1_0))) then 
                bus_assign_reg_182 <= next_buckets_1_reg_162;
            elsif (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_19_i_reg_620 = ap_const_lv1_0))) then 
                bus_assign_reg_182 <= next_buckets_0_reg_172;
            end if; 
        end if;
    end process;

    -- i_reg_138 assign process. --
    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st45_fsm_44 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and not((ap_const_lv1_0 = any_phi_fu_328_p4)))) then 
                i_reg_138 <= i_1_reg_609;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                i_reg_138 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- j_bit1_reg_303 assign process. --
    j_bit1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                j_bit1_reg_303 <= j_bit1_ph_cast_fu_448_p1;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                j_bit1_reg_303 <= j_bit_reg_711;
            end if; 
        end if;
    end process;

    -- j_bucket1_ph_reg_207 assign process. --
    j_bucket1_ph_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                j_bucket1_ph_reg_207 <= bus_assign_reg_182;
            elsif (((ap_ST_st40_fsm_39 = ap_CS_fsm) and not((tmp_19_1_i_reg_634 = ap_const_lv1_0)))) then 
                j_bucket1_ph_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_bucket1_reg_282 assign process. --
    j_bucket1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                j_bucket1_reg_282 <= j_bucket1_ph_reg_207;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                j_bucket1_reg_282 <= j_bucket_reg_721;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_ph_reg_220 assign process. --
    j_bucket_index1_ph_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                j_bucket_index1_ph_reg_220 <= agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_440_p1;
            elsif (((ap_ST_st40_fsm_39 = ap_CS_fsm) and not((tmp_19_1_i_reg_634 = ap_const_lv1_0)))) then 
                j_bucket_index1_ph_reg_220 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_reg_293 assign process. --
    j_bucket_index1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                j_bucket_index1_reg_293 <= j_bucket_index1_ph_cast_fu_444_p1;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                j_bucket_index1_reg_293 <= j_bucket_index_reg_716;
            end if; 
        end if;
    end process;

    -- j_end_ph_reg_242 assign process. --
    j_end_ph_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                j_end_ph_reg_242 <= ap_const_lv1_0;
            elsif (((ap_ST_st40_fsm_39 = ap_CS_fsm) and not((tmp_19_1_i_reg_634 = ap_const_lv1_0)))) then 
                j_end_ph_reg_242 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- j_end_reg_313 assign process. --
    j_end_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                j_end_reg_313 <= j_end_ph_reg_242;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                j_end_reg_313 <= p_s_reg_726;
            end if; 
        end if;
    end process;

    -- next_buckets_0_reg_172 assign process. --
    next_buckets_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st45_fsm_44 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and not((ap_const_lv1_0 = any_phi_fu_328_p4)))) then 
                next_buckets_0_reg_172 <= tmp_buckets_0_3_reg_269;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                next_buckets_0_reg_172 <= current_buckets_0_reg_585;
            end if; 
        end if;
    end process;

    -- next_buckets_1_reg_162 assign process. --
    next_buckets_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st45_fsm_44 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and not((ap_const_lv1_0 = any_phi_fu_328_p4)))) then 
                next_buckets_1_reg_162 <= tmp_buckets_1_3_reg_256;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                next_buckets_1_reg_162 <= current_buckets_1_reg_590;
            end if; 
        end if;
    end process;

    -- p_01_rec_reg_150 assign process. --
    p_01_rec_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st45_fsm_44 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and not((ap_const_lv1_0 = any_phi_fu_328_p4)))) then 
                p_01_rec_reg_150 <= p_rec_reg_624;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                p_01_rec_reg_150 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- p_0_reg_336 assign process. --
    p_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st45_fsm_44 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and (ap_const_lv1_0 = any_phi_fu_328_p4))) then 
                p_0_reg_336 <= ap_const_lv1_0;
            elsif ((ap_ST_st72_fsm_71 = ap_CS_fsm)) then 
                p_0_reg_336 <= tmp_2_reg_766;
            end if; 
        end if;
    end process;

    -- tmp_buckets_0_3_reg_269 assign process. --
    tmp_buckets_0_3_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_269 <= ap_const_lv32_0;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_269 <= next_buckets_0_1_reg_731;
            end if; 
        end if;
    end process;

    -- tmp_buckets_1_3_reg_256 assign process. --
    tmp_buckets_1_3_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_256 <= ap_const_lv32_0;
            elsif ((ap_ST_st62_fsm_61 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_256 <= next_buckets_1_1_fu_552_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st69_fsm_68 = ap_CS_fsm)) then
                current_buckets_0_1_reg_751 <= current_buckets_0_1_fu_566_p2;
                current_buckets_1_1_reg_756 <= current_buckets_1_1_fu_571_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                current_buckets_0_reg_585 <= grp_nfa_get_initials_fu_360_ap_return_0;
                current_buckets_1_reg_590 <= grp_nfa_get_initials_fu_360_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                i_1_reg_609 <= grp_fu_410_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then
                j_bit1_ph_reg_231 <= r_bit_reg_638;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then
                j_bit_reg_711 <= grp_bitset_next_fu_348_ap_return_0;
                j_bucket_index_reg_716 <= grp_bitset_next_fu_348_ap_return_1;
                j_bucket_reg_721 <= grp_bitset_next_fu_348_ap_return_2;
                p_s_reg_726 <= grp_bitset_next_fu_348_ap_return_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st61_fsm_60 = ap_CS_fsm))) then
                next_buckets_0_1_reg_731 <= next_buckets_0_1_fu_546_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)))) then
                p_rec_reg_624 <= grp_fu_422_p2;
                sym_reg_629 <= sample_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then
                r_bit_reg_638 <= grp_p_bsf32_hw_fu_372_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st60_fsm_59 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st61_fsm_60 = ap_CS_fsm)))) then
                reg_378 <= nfa_forward_buckets_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                sample_addr_1_reg_614 <= grp_fu_400_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st46_fsm_45 = ap_CS_fsm)) then
                state_reg_673 <= grp_fu_471_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                tmp_14_cast_reg_600(0) <= tmp_14_cast_fu_390_p1(0);
    tmp_14_cast_reg_600(1) <= tmp_14_cast_fu_390_p1(1);
    tmp_14_cast_reg_600(2) <= tmp_14_cast_fu_390_p1(2);
    tmp_14_cast_reg_600(3) <= tmp_14_cast_fu_390_p1(3);
    tmp_14_cast_reg_600(4) <= tmp_14_cast_fu_390_p1(4);
    tmp_14_cast_reg_600(5) <= tmp_14_cast_fu_390_p1(5);
    tmp_14_cast_reg_600(6) <= tmp_14_cast_fu_390_p1(6);
    tmp_14_cast_reg_600(7) <= tmp_14_cast_fu_390_p1(7);
    tmp_14_cast_reg_600(8) <= tmp_14_cast_fu_390_p1(8);
    tmp_14_cast_reg_600(9) <= tmp_14_cast_fu_390_p1(9);
    tmp_14_cast_reg_600(10) <= tmp_14_cast_fu_390_p1(10);
    tmp_14_cast_reg_600(11) <= tmp_14_cast_fu_390_p1(11);
    tmp_14_cast_reg_600(12) <= tmp_14_cast_fu_390_p1(12);
    tmp_14_cast_reg_600(13) <= tmp_14_cast_fu_390_p1(13);
    tmp_14_cast_reg_600(14) <= tmp_14_cast_fu_390_p1(14);
    tmp_14_cast_reg_600(15) <= tmp_14_cast_fu_390_p1(15);
    tmp_14_cast_reg_600(16) <= tmp_14_cast_fu_390_p1(16);
    tmp_14_cast_reg_600(17) <= tmp_14_cast_fu_390_p1(17);
    tmp_14_cast_reg_600(18) <= tmp_14_cast_fu_390_p1(18);
    tmp_14_cast_reg_600(19) <= tmp_14_cast_fu_390_p1(19);
    tmp_14_cast_reg_600(20) <= tmp_14_cast_fu_390_p1(20);
    tmp_14_cast_reg_600(21) <= tmp_14_cast_fu_390_p1(21);
    tmp_14_cast_reg_600(22) <= tmp_14_cast_fu_390_p1(22);
    tmp_14_cast_reg_600(23) <= tmp_14_cast_fu_390_p1(23);
    tmp_14_cast_reg_600(24) <= tmp_14_cast_fu_390_p1(24);
    tmp_14_cast_reg_600(25) <= tmp_14_cast_fu_390_p1(25);
    tmp_14_cast_reg_600(26) <= tmp_14_cast_fu_390_p1(26);
    tmp_14_cast_reg_600(27) <= tmp_14_cast_fu_390_p1(27);
    tmp_14_cast_reg_600(28) <= tmp_14_cast_fu_390_p1(28);
    tmp_14_cast_reg_600(29) <= tmp_14_cast_fu_390_p1(29);
    tmp_14_cast_reg_600(30) <= tmp_14_cast_fu_390_p1(30);
    tmp_14_cast_reg_600(31) <= tmp_14_cast_fu_390_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and not((tmp_19_i_reg_620 = ap_const_lv1_0)))) then
                tmp_19_1_i_reg_634 <= tmp_19_1_i_fu_434_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then
                tmp_19_i_reg_620 <= tmp_19_i_fu_428_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st70_fsm_69 = ap_CS_fsm)) then
                tmp_1_reg_761 <= tmp_1_fu_576_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st71_fsm_70 = ap_CS_fsm)) then
                tmp_2_reg_766 <= tmp_2_fu_580_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st50_fsm_49 = ap_CS_fsm)) then
                tmp_6_i_reg_688 <= grp_fu_484_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then
                tmp_7_i_cast_reg_658(0) <= tmp_7_i_cast_fu_452_p1(0);
    tmp_7_i_cast_reg_658(1) <= tmp_7_i_cast_fu_452_p1(1);
    tmp_7_i_cast_reg_658(2) <= tmp_7_i_cast_fu_452_p1(2);
    tmp_7_i_cast_reg_658(3) <= tmp_7_i_cast_fu_452_p1(3);
    tmp_7_i_cast_reg_658(4) <= tmp_7_i_cast_fu_452_p1(4);
    tmp_7_i_cast_reg_658(5) <= tmp_7_i_cast_fu_452_p1(5);
    tmp_7_i_cast_reg_658(6) <= tmp_7_i_cast_fu_452_p1(6);
    tmp_7_i_cast_reg_658(7) <= tmp_7_i_cast_fu_452_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then
                tmp_8_i_reg_693 <= grp_fu_490_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st68_fsm_67 = ap_CS_fsm)) then
                tmp_buckets_0_reg_741 <= grp_nfa_get_finals_fu_366_ap_return_0;
                tmp_buckets_1_reg_746 <= grp_nfa_get_finals_fu_366_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                tmp_s_reg_605 <= tmp_s_fu_405_p2;
            end if;
        end if;
    end process;
    tmp_14_cast_reg_600(63 downto 32) <= "00000000000000000000000000000000";
    tmp_7_i_cast_reg_658(13 downto 8) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , nfa_forward_buckets_rsp_empty_n , sample_rsp_empty_n , tmp_s_reg_605 , tmp_19_i_reg_620 , tmp_19_1_i_reg_634 , j_end_phi_fu_316_p4 , any_phi_fu_328_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if ((tmp_s_reg_605 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st63_fsm_62;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                if ((not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_19_i_reg_620 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                elsif ((not((sample_rsp_empty_n = ap_const_logic_0)) and not((tmp_19_i_reg_620 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st40_fsm_39 => 
                if (not((tmp_19_1_i_reg_634 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                end if;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                if ((not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and not((ap_const_lv1_0 = any_phi_fu_328_p4)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                elsif ((not((ap_const_lv1_0 = j_end_phi_fu_316_p4)) and (ap_const_lv1_0 = any_phi_fu_328_p4))) then
                    ap_NS_fsm <= ap_ST_st73_fsm_72;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                end if;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st61_fsm_60;
                else
                    ap_NS_fsm <= ap_ST_st60_fsm_59;
                end if;
            when ap_ST_st61_fsm_60 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st62_fsm_61;
                else
                    ap_NS_fsm <= ap_ST_st61_fsm_60;
                end if;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_0_lcssa4_i_reg_194),2));
    any_phi_fu_328_p4 <= any_reg_323;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st73_fsm_72 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, p_0_reg_336, ap_return_preg)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            ap_return <= p_0_reg_336;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    current_buckets_0_1_fu_566_p2 <= (next_buckets_0_reg_172 and tmp_buckets_0_reg_741);
    current_buckets_1_1_fu_571_p2 <= (next_buckets_1_reg_162 and tmp_buckets_1_reg_746);

    -- grp_bitset_next_fu_348_ap_ce assign process. --
    grp_bitset_next_fu_348_ap_ce_assign_proc : process(ap_CS_fsm, j_end_phi_fu_316_p4)
    begin
        if ((((ap_ST_st45_fsm_44 = ap_CS_fsm) and (ap_const_lv1_0 = j_end_phi_fu_316_p4)) or (ap_ST_st46_fsm_45 = ap_CS_fsm) or (ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st50_fsm_49 = ap_CS_fsm) or (ap_ST_st54_fsm_53 = ap_CS_fsm) or (ap_ST_st55_fsm_54 = ap_CS_fsm) or (ap_ST_st56_fsm_55 = ap_CS_fsm) or (ap_ST_st48_fsm_47 = ap_CS_fsm) or (ap_ST_st49_fsm_48 = ap_CS_fsm) or (ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st52_fsm_51 = ap_CS_fsm) or (ap_ST_st53_fsm_52 = ap_CS_fsm))) then 
            grp_bitset_next_fu_348_ap_ce <= ap_const_logic_1;
        else 
            grp_bitset_next_fu_348_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_bitset_next_fu_348_p_read <= next_buckets_1_reg_162;
    grp_bitset_next_fu_348_r_bit <= j_bit1_reg_303;
    grp_bitset_next_fu_348_r_bucket <= j_bucket1_reg_282;
    grp_bitset_next_fu_348_r_bucket_index <= j_bucket_index1_reg_293;
    grp_fu_400_ce <= ap_const_logic_1;
    grp_fu_400_p0 <= p_01_rec_reg_150;
    grp_fu_400_p1 <= tmp_14_cast_reg_600;
    grp_fu_410_ce <= ap_const_logic_1;
    grp_fu_410_p0 <= i_reg_138;
    grp_fu_410_p1 <= ap_const_lv16_1;

    -- grp_fu_422_ce assign process. --
    grp_fu_422_ce_assign_proc : process(ap_CS_fsm, sample_rsp_empty_n, tmp_s_reg_605)
    begin
        if (((ap_ST_st38_fsm_37 = ap_CS_fsm) or ((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0))) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((tmp_s_reg_605 = ap_const_lv1_0))) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm))) then 
            grp_fu_422_ce <= ap_const_logic_1;
        else 
            grp_fu_422_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_422_p0 <= p_01_rec_reg_150;
    grp_fu_422_p1 <= ap_const_lv64_1;
    grp_fu_471_ce <= ap_const_logic_1;
    grp_fu_471_p0 <= (tmp_31_fu_455_p1 & ap_const_lv5_0);
    grp_fu_471_p1 <= j_bit1_reg_303(6 - 1 downto 0);
    grp_fu_484_ce <= ap_const_logic_1;
    grp_fu_484_p0 <= grp_fu_484_p00(8 - 1 downto 0);
    grp_fu_484_p00 <= std_logic_vector(resize(unsigned(nfa_symbols),14));
    grp_fu_484_p1 <= grp_fu_484_p10(6 - 1 downto 0);
    grp_fu_484_p10 <= std_logic_vector(resize(unsigned(state_reg_673),14));
    grp_fu_490_ce <= ap_const_logic_1;
    grp_fu_490_p0 <= tmp_6_i_reg_688;
    grp_fu_490_p1 <= tmp_7_i_cast_reg_658;
    grp_nfa_get_finals_fu_366_ap_ce <= ap_const_logic_1;
    grp_nfa_get_finals_fu_366_ap_start <= grp_nfa_get_finals_fu_366_ap_start_ap_start_reg;
    grp_nfa_get_finals_fu_366_nfa_finals_buckets_datain <= nfa_finals_buckets_datain;
    grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_full_n <= nfa_finals_buckets_req_full_n;
    grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_empty_n <= nfa_finals_buckets_rsp_empty_n;
    grp_nfa_get_initials_fu_360_ap_ce <= ap_const_logic_1;

    -- grp_nfa_get_initials_fu_360_ap_start assign process. --
    grp_nfa_get_initials_fu_360_ap_start_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            grp_nfa_get_initials_fu_360_ap_start <= ap_const_logic_1;
        else 
            grp_nfa_get_initials_fu_360_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_nfa_get_initials_fu_360_nfa_initials_buckets_datain <= nfa_initials_buckets_datain;
    grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_full_n <= nfa_initials_buckets_req_full_n;
    grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_empty_n <= nfa_initials_buckets_rsp_empty_n;

    -- grp_p_bsf32_hw_fu_372_ap_ce assign process. --
    grp_p_bsf32_hw_fu_372_ap_ce_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st42_fsm_41 = ap_CS_fsm) or (ap_ST_st41_fsm_40 = ap_CS_fsm))) then 
            grp_p_bsf32_hw_fu_372_ap_ce <= ap_const_logic_1;
        else 
            grp_p_bsf32_hw_fu_372_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_bsf32_hw_fu_372_bus_r <= bus_assign_reg_182;
    j_bit1_ph_cast_fu_448_p1 <= std_logic_vector(resize(unsigned(j_bit1_ph_reg_231),8));
    j_bucket_index1_ph_cast_fu_444_p1 <= std_logic_vector(resize(unsigned(j_bucket_index1_ph_reg_220),8));
    j_end_phi_fu_316_p4 <= j_end_reg_313;
    next_buckets_0_1_fu_546_p2 <= (tmp_buckets_0_3_reg_269 or reg_378);
    next_buckets_1_1_fu_552_p2 <= (tmp_buckets_1_3_reg_256 or reg_378);
    nfa_finals_buckets_address <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_address;
    nfa_finals_buckets_dataout <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_dataout;
    nfa_finals_buckets_req_din <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_din;
    nfa_finals_buckets_req_write <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_req_write;
    nfa_finals_buckets_rsp_read <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_rsp_read;
    nfa_finals_buckets_size <= grp_nfa_get_finals_fu_366_nfa_finals_buckets_size;

    -- nfa_forward_buckets_address assign process. --
    nfa_forward_buckets_address_assign_proc : process(ap_CS_fsm, tmp_4_i_cast_fu_501_p1, tmp_9_i_cast_fu_519_p1)
    begin
        if ((ap_ST_st56_fsm_55 = ap_CS_fsm)) then 
            nfa_forward_buckets_address <= tmp_9_i_cast_fu_519_p1(32 - 1 downto 0);
        elsif ((ap_ST_st55_fsm_54 = ap_CS_fsm)) then 
            nfa_forward_buckets_address <= tmp_4_i_cast_fu_501_p1(32 - 1 downto 0);
        else 
            nfa_forward_buckets_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    nfa_forward_buckets_dataout <= ap_const_lv32_0;
    nfa_forward_buckets_req_din <= ap_const_logic_0;

    -- nfa_forward_buckets_req_write assign process. --
    nfa_forward_buckets_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st55_fsm_54 = ap_CS_fsm) or (ap_ST_st56_fsm_55 = ap_CS_fsm))) then 
            nfa_forward_buckets_req_write <= ap_const_logic_1;
        else 
            nfa_forward_buckets_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- nfa_forward_buckets_rsp_read assign process. --
    nfa_forward_buckets_rsp_read_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n)
    begin
        if ((((ap_ST_st60_fsm_59 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st61_fsm_60 = ap_CS_fsm)))) then 
            nfa_forward_buckets_rsp_read <= ap_const_logic_1;
        else 
            nfa_forward_buckets_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    nfa_forward_buckets_size <= ap_const_lv32_1;
    nfa_initials_buckets_address <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_address;
    nfa_initials_buckets_dataout <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_dataout;
    nfa_initials_buckets_req_din <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_din;
    nfa_initials_buckets_req_write <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_req_write;
    nfa_initials_buckets_rsp_read <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_rsp_read;
    nfa_initials_buckets_size <= grp_nfa_get_initials_fu_360_nfa_initials_buckets_size;
    sample_address <= sample_addr_1_reg_614;
    sample_dataout <= ap_const_lv8_0;
    sample_req_din <= ap_const_logic_0;

    -- sample_req_write assign process. --
    sample_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then 
            sample_req_write <= ap_const_logic_1;
        else 
            sample_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sample_rsp_read assign process. --
    sample_rsp_read_assign_proc : process(ap_CS_fsm, sample_rsp_empty_n)
    begin
        if (((ap_ST_st39_fsm_38 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)))) then 
            sample_rsp_read <= ap_const_logic_1;
        else 
            sample_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    sample_size <= ap_const_lv32_1;
    tmp_14_cast_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_14),64));
    tmp_19_1_i_fu_434_p2 <= "1" when (next_buckets_1_reg_162 = ap_const_lv32_0) else "0";
    tmp_19_i_fu_428_p2 <= "1" when (next_buckets_0_reg_172 = ap_const_lv32_0) else "0";
    tmp_1_fu_576_p2 <= (current_buckets_1_1_reg_756 or current_buckets_0_1_reg_751);
    tmp_2_fu_580_p2 <= "0" when (tmp_1_reg_761 = ap_const_lv32_0) else "1";
    tmp_31_fu_455_p1 <= j_bucket_index1_reg_293(1 - 1 downto 0);
    tmp_4_i_cast_fu_501_p1 <= std_logic_vector(resize(unsigned(tmp_4_i_fu_494_p3),64));
    tmp_4_i_fu_494_p3 <= (tmp_8_i_reg_693 & ap_const_lv1_0);
    tmp_7_i_cast_fu_452_p1 <= std_logic_vector(resize(unsigned(sym_reg_629),14));
    tmp_9_i_cast_fu_519_p1 <= std_logic_vector(resize(unsigned(tmp_9_i_fu_512_p3),64));
    tmp_9_i_fu_512_p3 <= (tmp_8_i_reg_693 & ap_const_lv1_1);
    tmp_s_fu_405_p2 <= "1" when (unsigned(i_reg_138) < unsigned(length_r)) else "0";
end behav;
