// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sample_iterator_get_offset.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sample_iterator_get_offset::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sample_iterator_get_offset::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sample_iterator_get_offset::ap_ST_pp0_stg0_fsm_0 = "0";
const sc_lv<32> sample_iterator_get_offset::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sample_iterator_get_offset::ap_const_lv32_1 = "1";
const sc_lv<8> sample_iterator_get_offset::ap_const_lv8_0 = "00000000";
const sc_lv<16> sample_iterator_get_offset::ap_const_lv16_0 = "0000000000000000";

sample_iterator_get_offset::sample_iterator_get_offset(sc_module_name name) : sc_module(name), mVcdFile(0) {
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0 = new nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4<0,4,16,8,24>("nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0");
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->clk(ap_clk);
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->reset(ap_rst);
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->din0(grp_fu_110_p0);
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->din1(grp_fu_110_p1);
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->ce(grp_fu_110_ce);
    nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0->dout(grp_fu_110_p2);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1 = new nfa_accept_samples_generic_hw_add_32ns_32ns_32_8<1,8,32,32,32>("nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1");
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->clk(ap_clk);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->reset(ap_rst);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->din0(grp_fu_125_p0);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->din1(grp_fu_125_p1);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->ce(grp_fu_125_ce);
    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1->dout(grp_fu_125_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it13 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );
    sensitive << ( ap_reg_ppiten_pp0_it9 );
    sensitive << ( ap_reg_ppiten_pp0_it10 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );
    sensitive << ( ap_reg_ppiten_pp0_it12 );
    sensitive << ( ap_reg_ppiten_pp0_it13 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it13 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( grp_fu_125_p2 );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );
    sensitive << ( ap_reg_ppiten_pp0_it9 );
    sensitive << ( ap_reg_ppiten_pp0_it10 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );
    sensitive << ( ap_reg_ppiten_pp0_it12 );

    SC_METHOD(thread_grp_fu_110_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fu_110_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( grp_fu_110_p00 );

    SC_METHOD(thread_grp_fu_110_p00);
    sensitive << ( ap_reg_ppstg_i_sample_read_reg_130_pp0_it1 );

    SC_METHOD(thread_grp_fu_110_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( grp_fu_110_p10 );

    SC_METHOD(thread_grp_fu_110_p10);
    sensitive << ( indices_stride_addr_read_reg_145 );

    SC_METHOD(thread_grp_fu_125_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fu_125_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( tmp_7_reg_170 );

    SC_METHOD(thread_grp_fu_125_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it6 );
    sensitive << ( indices_begin_addr_read_reg_165 );

    SC_METHOD(thread_indices_begin_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ppstg_tmp_reg_135_pp0_it3 );

    SC_METHOD(thread_indices_begin_dataout);

    SC_METHOD(thread_indices_begin_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_begin_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_begin_rsp_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_begin_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it4 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_samples_address);

    SC_METHOD(thread_indices_samples_dataout);

    SC_METHOD(thread_indices_samples_req_din);

    SC_METHOD(thread_indices_samples_req_write);

    SC_METHOD(thread_indices_samples_rsp_read);

    SC_METHOD(thread_indices_samples_size);

    SC_METHOD(thread_indices_stride_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( tmp_fu_93_p1 );

    SC_METHOD(thread_indices_stride_dataout);

    SC_METHOD(thread_indices_stride_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_stride_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_stride_rsp_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_stride_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_tmp_fu_93_p1);
    sensitive << ( i_index );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it5 );
    sensitive << ( indices_stride_rsp_empty_n );
    sensitive << ( indices_begin_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_CS_fsm = "0";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it5 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it6 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it7 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it8 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it9 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it10 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it11 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it12 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it13 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sample_iterator_get_offset_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indices_stride_req_din, "(port)indices_stride_req_din");
    sc_trace(mVcdFile, indices_stride_req_full_n, "(port)indices_stride_req_full_n");
    sc_trace(mVcdFile, indices_stride_req_write, "(port)indices_stride_req_write");
    sc_trace(mVcdFile, indices_stride_rsp_empty_n, "(port)indices_stride_rsp_empty_n");
    sc_trace(mVcdFile, indices_stride_rsp_read, "(port)indices_stride_rsp_read");
    sc_trace(mVcdFile, indices_stride_address, "(port)indices_stride_address");
    sc_trace(mVcdFile, indices_stride_datain, "(port)indices_stride_datain");
    sc_trace(mVcdFile, indices_stride_dataout, "(port)indices_stride_dataout");
    sc_trace(mVcdFile, indices_stride_size, "(port)indices_stride_size");
    sc_trace(mVcdFile, indices_begin_req_din, "(port)indices_begin_req_din");
    sc_trace(mVcdFile, indices_begin_req_full_n, "(port)indices_begin_req_full_n");
    sc_trace(mVcdFile, indices_begin_req_write, "(port)indices_begin_req_write");
    sc_trace(mVcdFile, indices_begin_rsp_empty_n, "(port)indices_begin_rsp_empty_n");
    sc_trace(mVcdFile, indices_begin_rsp_read, "(port)indices_begin_rsp_read");
    sc_trace(mVcdFile, indices_begin_address, "(port)indices_begin_address");
    sc_trace(mVcdFile, indices_begin_datain, "(port)indices_begin_datain");
    sc_trace(mVcdFile, indices_begin_dataout, "(port)indices_begin_dataout");
    sc_trace(mVcdFile, indices_begin_size, "(port)indices_begin_size");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, i_index, "(port)i_index");
    sc_trace(mVcdFile, i_sample, "(port)i_sample");
    sc_trace(mVcdFile, indices_samples_req_din, "(port)indices_samples_req_din");
    sc_trace(mVcdFile, indices_samples_req_full_n, "(port)indices_samples_req_full_n");
    sc_trace(mVcdFile, indices_samples_req_write, "(port)indices_samples_req_write");
    sc_trace(mVcdFile, indices_samples_rsp_empty_n, "(port)indices_samples_rsp_empty_n");
    sc_trace(mVcdFile, indices_samples_rsp_read, "(port)indices_samples_rsp_read");
    sc_trace(mVcdFile, indices_samples_address, "(port)indices_samples_address");
    sc_trace(mVcdFile, indices_samples_datain, "(port)indices_samples_datain");
    sc_trace(mVcdFile, indices_samples_dataout, "(port)indices_samples_dataout");
    sc_trace(mVcdFile, indices_samples_size, "(port)indices_samples_size");
    sc_trace(mVcdFile, sample_buffer_size, "(port)sample_buffer_size");
    sc_trace(mVcdFile, sample_length, "(port)sample_length");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it4, "ap_reg_ppiten_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it5, "ap_reg_ppiten_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it6, "ap_reg_ppiten_pp0_it6");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it7, "ap_reg_ppiten_pp0_it7");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it8, "ap_reg_ppiten_pp0_it8");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it9, "ap_reg_ppiten_pp0_it9");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it10, "ap_reg_ppiten_pp0_it10");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it11, "ap_reg_ppiten_pp0_it11");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it12, "ap_reg_ppiten_pp0_it12");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it13, "ap_reg_ppiten_pp0_it13");
    sc_trace(mVcdFile, i_sample_read_reg_130, "i_sample_read_reg_130");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_130_pp0_it1, "ap_reg_ppstg_i_sample_read_reg_130_pp0_it1");
    sc_trace(mVcdFile, tmp_fu_93_p1, "tmp_fu_93_p1");
    sc_trace(mVcdFile, tmp_reg_135, "tmp_reg_135");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_reg_135_pp0_it1, "ap_reg_ppstg_tmp_reg_135_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_reg_135_pp0_it2, "ap_reg_ppstg_tmp_reg_135_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_reg_135_pp0_it3, "ap_reg_ppstg_tmp_reg_135_pp0_it3");
    sc_trace(mVcdFile, indices_stride_addr_read_reg_145, "indices_stride_addr_read_reg_145");
    sc_trace(mVcdFile, indices_begin_addr_read_reg_165, "indices_begin_addr_read_reg_165");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, tmp_7_reg_170, "tmp_7_reg_170");
    sc_trace(mVcdFile, grp_fu_110_p0, "grp_fu_110_p0");
    sc_trace(mVcdFile, grp_fu_110_p1, "grp_fu_110_p1");
    sc_trace(mVcdFile, grp_fu_125_p0, "grp_fu_125_p0");
    sc_trace(mVcdFile, grp_fu_125_p1, "grp_fu_125_p1");
    sc_trace(mVcdFile, grp_fu_110_ce, "grp_fu_110_ce");
    sc_trace(mVcdFile, grp_fu_125_p2, "grp_fu_125_p2");
    sc_trace(mVcdFile, grp_fu_125_ce, "grp_fu_125_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
    sc_trace(mVcdFile, grp_fu_110_p00, "grp_fu_110_p00");
    sc_trace(mVcdFile, grp_fu_110_p10, "grp_fu_110_p10");
#endif

    }
}

sample_iterator_get_offset::~sample_iterator_get_offset() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete nfa_accept_samples_generic_hw_mul_16ns_8ns_24_4_U0;
    delete nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U1;
}

void sample_iterator_get_offset::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it10 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it10 = ap_reg_ppiten_pp0_it9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it11 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it11 = ap_reg_ppiten_pp0_it10.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it12 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it12 = ap_reg_ppiten_pp0_it11.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it13 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it13 = ap_reg_ppiten_pp0_it12.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it4 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it4 = ap_reg_ppiten_pp0_it3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it5 = ap_reg_ppiten_pp0_it4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it6 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it6 = ap_reg_ppiten_pp0_it5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it7 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it7 = ap_reg_ppiten_pp0_it6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it8 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it8 = ap_reg_ppiten_pp0_it7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it9 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it9 = ap_reg_ppiten_pp0_it8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_reg_ppstg_i_sample_read_reg_130_pp0_it1 = i_sample_read_reg_130.read();
        ap_reg_ppstg_tmp_reg_135_pp0_it1 = tmp_reg_135.read();
        ap_reg_ppstg_tmp_reg_135_pp0_it2 = ap_reg_ppstg_tmp_reg_135_pp0_it1.read();
        ap_reg_ppstg_tmp_reg_135_pp0_it3 = ap_reg_ppstg_tmp_reg_135_pp0_it2.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        i_sample_read_reg_130 = i_sample.read();
        tmp_reg_135 = tmp_fu_93_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_begin_addr_read_reg_165 = indices_begin_datain.read();
        tmp_7_reg_170 = grp_fu_110_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_stride_addr_read_reg_145 = indices_stride_datain.read();
    }
}

void sample_iterator_get_offset::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it13.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it13.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void sample_iterator_get_offset::thread_ap_return() {
    ap_return = grp_fu_125_p2.read();
}

void sample_iterator_get_offset::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_grp_fu_110_ce() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fu_110_ce = ap_const_logic_1;
    } else {
        grp_fu_110_ce = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_grp_fu_110_p0() {
    grp_fu_110_p0 =  (sc_lv<16>) (grp_fu_110_p00.read());
}

void sample_iterator_get_offset::thread_grp_fu_110_p00() {
    grp_fu_110_p00 = esl_zext<24,16>(ap_reg_ppstg_i_sample_read_reg_130_pp0_it1.read());
}

void sample_iterator_get_offset::thread_grp_fu_110_p1() {
    grp_fu_110_p1 =  (sc_lv<8>) (grp_fu_110_p10.read());
}

void sample_iterator_get_offset::thread_grp_fu_110_p10() {
    grp_fu_110_p10 = esl_zext<24,8>(indices_stride_addr_read_reg_145.read());
}

void sample_iterator_get_offset::thread_grp_fu_125_ce() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fu_125_ce = ap_const_logic_1;
    } else {
        grp_fu_125_ce = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_grp_fu_125_p0() {
    grp_fu_125_p0 = esl_zext<32,24>(tmp_7_reg_170.read());
}

void sample_iterator_get_offset::thread_grp_fu_125_p1() {
    grp_fu_125_p1 = indices_begin_addr_read_reg_165.read();
}

void sample_iterator_get_offset::thread_indices_begin_address() {
    indices_begin_address = ap_reg_ppstg_tmp_reg_135_pp0_it3.read();
}

void sample_iterator_get_offset::thread_indices_begin_dataout() {
    indices_begin_dataout = ap_const_lv32_0;
}

void sample_iterator_get_offset::thread_indices_begin_req_din() {
    indices_begin_req_din = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_begin_req_write() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it4.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_begin_req_write = ap_const_logic_1;
    } else {
        indices_begin_req_write = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_begin_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_begin_rsp_read = ap_const_logic_1;
    } else {
        indices_begin_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_begin_size() {
    indices_begin_size = ap_const_lv32_1;
}

void sample_iterator_get_offset::thread_indices_samples_address() {
    indices_samples_address = ap_const_lv32_0;
}

void sample_iterator_get_offset::thread_indices_samples_dataout() {
    indices_samples_dataout = ap_const_lv16_0;
}

void sample_iterator_get_offset::thread_indices_samples_req_din() {
    indices_samples_req_din = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_samples_req_write() {
    indices_samples_req_write = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_samples_rsp_read() {
    indices_samples_rsp_read = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_samples_size() {
    indices_samples_size = ap_const_lv32_0;
}

void sample_iterator_get_offset::thread_indices_stride_address() {
    indices_stride_address = tmp_fu_93_p1.read();
}

void sample_iterator_get_offset::thread_indices_stride_dataout() {
    indices_stride_dataout = ap_const_lv8_0;
}

void sample_iterator_get_offset::thread_indices_stride_req_din() {
    indices_stride_req_din = ap_const_logic_0;
}

void sample_iterator_get_offset::thread_indices_stride_req_write() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_stride_req_write = ap_const_logic_1;
    } else {
        indices_stride_req_write = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_stride_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
  esl_seteq<1,1,1>(indices_stride_rsp_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it5.read()) && 
  esl_seteq<1,1,1>(indices_begin_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_stride_rsp_read = ap_const_logic_1;
    } else {
        indices_stride_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_get_offset::thread_indices_stride_size() {
    indices_stride_size = ap_const_lv32_1;
}

void sample_iterator_get_offset::thread_tmp_fu_93_p1() {
    tmp_fu_93_p1 = esl_zext<32,16>(i_index.read());
}

void sample_iterator_get_offset::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}
}

