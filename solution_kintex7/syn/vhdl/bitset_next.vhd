-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitset_next is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of bitset_next is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal grp_p_bsf32_hw_fu_118_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_123 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_1_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_1_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_bucket_read_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_r_bucket_read_reg_194_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_bit_read_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it7 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_200_pp0_it9 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_206_pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_127_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it8 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it9 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_214_pp0_it10 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_bus_assign_reg_225_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_bus_assign_reg_225_pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_232_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_bsf32_hw_fu_118_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_118_ap_ce : STD_LOGIC;
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_write_assign_phi_fu_58_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_end_write_assign_phi_fu_73_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bucket_index_write_assign_phi_fu_91_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it10 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bit_write_assign_trunc3_ext_fu_161_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_phi_fu_107_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_trunc_ext_fu_156_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_index_write_assign_cast_fu_166_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_131_ce : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal ap_sig_bdd_143 : BOOLEAN;

    component p_bsf32_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component nfa_accept_samples_generic_hw_add_32ns_32s_32_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_p_bsf32_hw_fu_118 : component p_bsf32_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        bus_r => grp_p_bsf32_hw_fu_118_bus_r,
        ap_return => grp_p_bsf32_hw_fu_118_ap_return,
        ap_ce => grp_p_bsf32_hw_fu_118_ap_ce);

    nfa_accept_samples_generic_hw_add_32ns_32s_32_8_U11 : component nfa_accept_samples_generic_hw_add_32ns_32s_32_8
    generic map (
        ID => 11,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_131_p0,
        din1 => grp_fu_131_p1,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);





    -- ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11 assign process. --
    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and not((tmp_3_reg_232 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_24_1_reg_236)) or ((ap_const_logic_1 = ap_ce) and not((tmp_3_reg_232 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_24_1_reg_236)) and not((ap_const_lv1_0 = tmp_26_1_reg_240))))) then 
                ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it9;
            elsif ((ap_const_logic_1 = ap_ce)) then 
                ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it10;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11 assign process. --
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and not((tmp_3_reg_232 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_24_1_reg_236)) or ((ap_const_logic_1 = ap_ce) and not((tmp_3_reg_232 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_24_1_reg_236)) and not((ap_const_lv1_0 = tmp_26_1_reg_240))))) then 
                ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_ce)) then 
                ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it10;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11 assign process. --
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (ap_sig_bdd_143) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it9;
                elsif (ap_sig_bdd_139) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11 <= ap_const_lv32_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it10;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11 assign process. --
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                ap_reg_ppstg_bus_assign_reg_225_pp0_it10 <= ap_reg_ppstg_bus_assign_reg_225_pp0_it9;
                ap_reg_ppstg_bus_assign_reg_225_pp0_it9 <= bus_assign_reg_225;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it1 <= p_read_1_reg_206;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it10 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it9;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it2 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it1;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it3 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it2;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it4 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it3;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it5 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it4;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it6 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it5;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it7 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it6;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it8 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it7;
                ap_reg_ppstg_p_read_1_reg_206_pp0_it9 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it8;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it1 <= r_bit_read_reg_200;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it2 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it1;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it3 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it2;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it4 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it3;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it5 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it4;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it6 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it5;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it7 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it6;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it8 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it7;
                ap_reg_ppstg_r_bit_read_reg_200_pp0_it9 <= ap_reg_ppstg_r_bit_read_reg_200_pp0_it8;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it1 <= r_bucket_read_reg_194;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it2 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it1;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it3 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it2;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it4 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it3;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it5 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it4;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it6 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it5;
                ap_reg_ppstg_r_bucket_read_reg_194_pp0_it7 <= ap_reg_ppstg_r_bucket_read_reg_194_pp0_it6;
                ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10 <= tmp_24_1_reg_236;
                ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10 <= tmp_26_1_reg_240;
                ap_reg_ppstg_tmp_3_reg_232_pp0_it10 <= tmp_3_reg_232;
                ap_reg_ppstg_tmp_reg_214_pp0_it1 <= tmp_reg_214;
                ap_reg_ppstg_tmp_reg_214_pp0_it10 <= ap_reg_ppstg_tmp_reg_214_pp0_it9;
                ap_reg_ppstg_tmp_reg_214_pp0_it2 <= ap_reg_ppstg_tmp_reg_214_pp0_it1;
                ap_reg_ppstg_tmp_reg_214_pp0_it3 <= ap_reg_ppstg_tmp_reg_214_pp0_it2;
                ap_reg_ppstg_tmp_reg_214_pp0_it4 <= ap_reg_ppstg_tmp_reg_214_pp0_it3;
                ap_reg_ppstg_tmp_reg_214_pp0_it5 <= ap_reg_ppstg_tmp_reg_214_pp0_it4;
                ap_reg_ppstg_tmp_reg_214_pp0_it6 <= ap_reg_ppstg_tmp_reg_214_pp0_it5;
                ap_reg_ppstg_tmp_reg_214_pp0_it7 <= ap_reg_ppstg_tmp_reg_214_pp0_it6;
                ap_reg_ppstg_tmp_reg_214_pp0_it8 <= ap_reg_ppstg_tmp_reg_214_pp0_it7;
                ap_reg_ppstg_tmp_reg_214_pp0_it9 <= ap_reg_ppstg_tmp_reg_214_pp0_it8;
                bus_assign_reg_225 <= bus_assign_fu_137_p2;
                p_read_1_reg_206 <= p_read;
                r_bit_read_reg_200 <= r_bit;
                r_bucket_read_reg_194 <= r_bucket;
                tmp_1_reg_220 <= grp_fu_131_p2;
                tmp_3_reg_232 <= tmp_3_fu_141_p2;
                tmp_reg_214 <= tmp_fu_127_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (tmp_3_reg_232 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_ce) and not((tmp_3_reg_232 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_24_1_reg_236)) and (ap_const_lv1_0 = tmp_26_1_reg_240)))) then
                reg_123 <= grp_p_bsf32_hw_fu_118_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and not((ap_const_lv1_0 = tmp_3_fu_141_p2)))) then
                tmp_24_1_reg_236 <= tmp_24_1_fu_146_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and not((ap_const_lv1_0 = tmp_3_fu_141_p2)) and not((ap_const_lv1_0 = tmp_24_1_fu_146_p2)))) then
                tmp_26_1_reg_240 <= tmp_26_1_fu_151_p2;
            end if;
        end if;
    end process;
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11(0) <= '1';

    -- agg_result_bit_write_assign_phi_fu_107_p8 assign process. --
    agg_result_bit_write_assign_phi_fu_107_p8_assign_proc : process(ap_reg_ppstg_tmp_3_reg_232_pp0_it10, ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10, ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10, agg_result_bit_write_assign_trunc3_ext_fu_161_p1, ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11, agg_result_bit_write_assign_trunc_ext_fu_156_p1)
    begin
        if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) then 
            agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc_ext_fu_156_p1;
        elsif ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10))) then 
            agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc3_ext_fu_161_p1;
        else 
            agg_result_bit_write_assign_phi_fu_107_p8 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it11;
        end if; 
    end process;

    agg_result_bit_write_assign_trunc3_ext_fu_161_p1 <= std_logic_vector(resize(unsigned(reg_123),8));
    agg_result_bit_write_assign_trunc_ext_fu_156_p1 <= std_logic_vector(resize(unsigned(reg_123),8));
    agg_result_bucket_index_write_assign_cast_fu_166_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_write_assign_phi_fu_91_p8),8));

    -- agg_result_bucket_index_write_assign_phi_fu_91_p8 assign process. --
    agg_result_bucket_index_write_assign_phi_fu_91_p8_assign_proc : process(ap_reg_ppstg_tmp_reg_214_pp0_it10, ap_reg_ppstg_tmp_3_reg_232_pp0_it10, ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10, ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10, ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11)
    begin
        if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) then 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_ppstg_tmp_reg_214_pp0_it10;
        elsif ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10))) then 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_const_lv2_1;
        else 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it11;
        end if; 
    end process;


    -- agg_result_bucket_write_assign_phi_fu_58_p8 assign process. --
    agg_result_bucket_write_assign_phi_fu_58_p8_assign_proc : process(ap_reg_ppstg_p_read_1_reg_206_pp0_it10, ap_reg_ppstg_bus_assign_reg_225_pp0_it10, ap_reg_ppstg_tmp_3_reg_232_pp0_it10, ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10, ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10, ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11)
    begin
        if ((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) then 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_bus_assign_reg_225_pp0_it10;
        elsif ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10))) then 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_p_read_1_reg_206_pp0_it10;
        else 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it11;
        end if; 
    end process;


    -- agg_result_end_write_assign_phi_fu_73_p8 assign process. --
    agg_result_end_write_assign_phi_fu_73_p8_assign_proc : process(ap_reg_ppstg_tmp_3_reg_232_pp0_it10, ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10, ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10, ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10) or (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_232_pp0_it10)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_24_1_reg_236_pp0_it10)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_26_1_reg_240_pp0_it10)))) then 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_const_lv1_0;
        else 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it11;
        end if; 
    end process;

    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it10 <= ap_const_lv8_1;
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it10 <= ap_const_lv2_1;
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it10 <= ap_const_lv32_1;
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it10 <= ap_const_lv1_1;
    ap_return_0 <= agg_result_bit_write_assign_phi_fu_107_p8;
    ap_return_1 <= agg_result_bucket_index_write_assign_cast_fu_166_p1;
    ap_return_2 <= agg_result_bucket_write_assign_phi_fu_58_p8;
    ap_return_3 <= agg_result_end_write_assign_phi_fu_73_p8;

    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(tmp_3_reg_232, tmp_24_1_reg_236)
    begin
                ap_sig_bdd_139 <= (not((tmp_3_reg_232 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_24_1_reg_236));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(tmp_3_reg_232, tmp_24_1_reg_236, tmp_26_1_reg_240)
    begin
                ap_sig_bdd_143 <= (not((tmp_3_reg_232 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_24_1_reg_236)) and not((ap_const_lv1_0 = tmp_26_1_reg_240)));
    end process;

    bus_assign_fu_137_p2 <= (tmp_1_reg_220 and ap_reg_ppstg_r_bucket_read_reg_194_pp0_it7);

    -- grp_fu_131_ce assign process. --
    grp_fu_131_ce_assign_proc : process(ap_ce)
    begin
        if (not((ap_const_logic_1 = ap_ce))) then 
            grp_fu_131_ce <= ap_const_logic_0;
        else 
            grp_fu_131_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_131_p0 <= r_bucket;
    grp_fu_131_p1 <= ap_const_lv32_FFFFFFFF;

    -- grp_p_bsf32_hw_fu_118_ap_ce assign process. --
    grp_p_bsf32_hw_fu_118_ap_ce_assign_proc : process(ap_ce, tmp_3_reg_232, tmp_24_1_reg_236, tmp_26_1_reg_240, tmp_3_fu_141_p2, tmp_24_1_fu_146_p2, tmp_26_1_fu_151_p2)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((tmp_3_reg_232 = ap_const_lv1_0) or (not((tmp_3_reg_232 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_24_1_reg_236)) and (ap_const_lv1_0 = tmp_26_1_reg_240)) or (ap_const_lv1_0 = tmp_3_fu_141_p2) or (not((ap_const_lv1_0 = tmp_3_fu_141_p2)) and not((ap_const_lv1_0 = tmp_24_1_fu_146_p2)) and (ap_const_lv1_0 = tmp_26_1_fu_151_p2))))) then 
            grp_p_bsf32_hw_fu_118_ap_ce <= ap_const_logic_1;
        else 
            grp_p_bsf32_hw_fu_118_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_p_bsf32_hw_fu_118_bus_r assign process. --
    grp_p_bsf32_hw_fu_118_bus_r_assign_proc : process(ap_reg_ppstg_p_read_1_reg_206_pp0_it8, bus_assign_reg_225, tmp_3_fu_141_p2, tmp_24_1_fu_146_p2, tmp_26_1_fu_151_p2)
    begin
        if ((not((ap_const_lv1_0 = tmp_3_fu_141_p2)) and not((ap_const_lv1_0 = tmp_24_1_fu_146_p2)) and (ap_const_lv1_0 = tmp_26_1_fu_151_p2))) then 
            grp_p_bsf32_hw_fu_118_bus_r <= ap_reg_ppstg_p_read_1_reg_206_pp0_it8;
        elsif ((ap_const_lv1_0 = tmp_3_fu_141_p2)) then 
            grp_p_bsf32_hw_fu_118_bus_r <= bus_assign_reg_225;
        else 
            grp_p_bsf32_hw_fu_118_bus_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_24_1_fu_146_p2 <= "1" when (ap_reg_ppstg_tmp_reg_214_pp0_it8 = ap_const_lv2_0) else "0";
    tmp_26_1_fu_151_p2 <= "1" when (ap_reg_ppstg_p_read_1_reg_206_pp0_it8 = ap_const_lv32_0) else "0";
    tmp_3_fu_141_p2 <= "1" when (bus_assign_reg_225 = ap_const_lv32_0) else "0";
    tmp_fu_127_p1 <= r_bucket_index(2 - 1 downto 0);
end behav;
