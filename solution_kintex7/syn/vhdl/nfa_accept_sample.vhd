-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nfa_accept_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nfa_initials_buckets_req_din : OUT STD_LOGIC;
    nfa_initials_buckets_req_full_n : IN STD_LOGIC;
    nfa_initials_buckets_req_write : OUT STD_LOGIC;
    nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
    nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_req_din : OUT STD_LOGIC;
    nfa_finals_buckets_req_full_n : IN STD_LOGIC;
    nfa_finals_buckets_req_write : OUT STD_LOGIC;
    nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
    nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_req_din : OUT STD_LOGIC;
    nfa_forward_buckets_req_full_n : IN STD_LOGIC;
    nfa_forward_buckets_req_write : OUT STD_LOGIC;
    nfa_forward_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_forward_buckets_rsp_read : OUT STD_LOGIC;
    nfa_forward_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_symbols : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_req_din : OUT STD_LOGIC;
    sample_req_full_n : IN STD_LOGIC;
    sample_req_write : OUT STD_LOGIC;
    sample_rsp_empty_n : IN STD_LOGIC;
    sample_rsp_read : OUT STD_LOGIC;
    sample_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    length_r : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of nfa_accept_sample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_addr_1_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rec_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal sym_reg_621 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_1_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_i_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_bsf32_hw_fu_368_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal r_bit_reg_630 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_432_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_bucket_index1_ph_cast_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_ph_cast_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_cast_fu_444_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_i_cast_reg_650 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_end_phi_fu_312_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_reg_665 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_i_reg_680 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal offset_i_reg_685 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_bit_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_index_reg_706 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_buckets_0_1_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_0_1_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_1_1_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_1_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_1_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_1_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_1_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_1_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitset_next_fu_344_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_344_r_bit : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_344_r_bucket_index : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_344_r_bucket : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_344_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_344_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_344_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_344_ap_return_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitset_next_fu_344_ap_ce : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_ap_start : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_ap_done : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_ap_idle : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_ap_ready : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_356_nfa_initials_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_356_ap_ce : STD_LOGIC;
    signal grp_nfa_get_initials_fu_356_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_356_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_ap_start : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_ap_done : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_ap_idle : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_ap_ready : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_nfa_finals_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_ap_ce : STD_LOGIC;
    signal grp_nfa_get_finals_fu_362_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_362_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_368_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_368_ap_ce : STD_LOGIC;
    signal i_reg_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal any_phi_fu_324_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_01_rec_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_1_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_0_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_reg_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_bucket1_ph_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_ph_reg_216 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_bit1_ph_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_end_ph_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_buckets_1_3_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_3_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket1_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_end_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal any_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_nfa_get_finals_fu_362_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_cast_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_cast_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_447_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_476_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_476_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_482_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_482_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_fu_486_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_i_fu_504_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_402_ce : STD_LOGIC;
    signal grp_fu_414_ce : STD_LOGIC;
    signal grp_fu_463_ce : STD_LOGIC;
    signal grp_fu_476_ce : STD_LOGIC;
    signal grp_fu_482_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal grp_fu_476_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_476_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component bitset_next IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component nfa_get_initials IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nfa_initials_buckets_req_din : OUT STD_LOGIC;
        nfa_initials_buckets_req_full_n : IN STD_LOGIC;
        nfa_initials_buckets_req_write : OUT STD_LOGIC;
        nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
        nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_get_finals IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nfa_finals_buckets_req_din : OUT STD_LOGIC;
        nfa_finals_buckets_req_full_n : IN STD_LOGIC;
        nfa_finals_buckets_req_write : OUT STD_LOGIC;
        nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
        nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_bsf32_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component nfa_accept_samples_generic_hw_add_32ns_32ns_32_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_16ns_16ns_16_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_6ns_6ns_6_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component nfa_accept_samples_generic_hw_add_14ns_14ns_14_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    grp_bitset_next_fu_344 : component bitset_next
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read => grp_bitset_next_fu_344_p_read,
        r_bit => grp_bitset_next_fu_344_r_bit,
        r_bucket_index => grp_bitset_next_fu_344_r_bucket_index,
        r_bucket => grp_bitset_next_fu_344_r_bucket,
        ap_return_0 => grp_bitset_next_fu_344_ap_return_0,
        ap_return_1 => grp_bitset_next_fu_344_ap_return_1,
        ap_return_2 => grp_bitset_next_fu_344_ap_return_2,
        ap_return_3 => grp_bitset_next_fu_344_ap_return_3,
        ap_ce => grp_bitset_next_fu_344_ap_ce);

    grp_nfa_get_initials_fu_356 : component nfa_get_initials
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_initials_fu_356_ap_start,
        ap_done => grp_nfa_get_initials_fu_356_ap_done,
        ap_idle => grp_nfa_get_initials_fu_356_ap_idle,
        ap_ready => grp_nfa_get_initials_fu_356_ap_ready,
        nfa_initials_buckets_req_din => grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_din,
        nfa_initials_buckets_req_full_n => grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_full_n,
        nfa_initials_buckets_req_write => grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_write,
        nfa_initials_buckets_rsp_empty_n => grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_empty_n,
        nfa_initials_buckets_rsp_read => grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_read,
        nfa_initials_buckets_address => grp_nfa_get_initials_fu_356_nfa_initials_buckets_address,
        nfa_initials_buckets_datain => grp_nfa_get_initials_fu_356_nfa_initials_buckets_datain,
        nfa_initials_buckets_dataout => grp_nfa_get_initials_fu_356_nfa_initials_buckets_dataout,
        nfa_initials_buckets_size => grp_nfa_get_initials_fu_356_nfa_initials_buckets_size,
        ap_ce => grp_nfa_get_initials_fu_356_ap_ce,
        ap_return_0 => grp_nfa_get_initials_fu_356_ap_return_0,
        ap_return_1 => grp_nfa_get_initials_fu_356_ap_return_1);

    grp_nfa_get_finals_fu_362 : component nfa_get_finals
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_finals_fu_362_ap_start,
        ap_done => grp_nfa_get_finals_fu_362_ap_done,
        ap_idle => grp_nfa_get_finals_fu_362_ap_idle,
        ap_ready => grp_nfa_get_finals_fu_362_ap_ready,
        nfa_finals_buckets_req_din => grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_din,
        nfa_finals_buckets_req_full_n => grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_full_n,
        nfa_finals_buckets_req_write => grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_write,
        nfa_finals_buckets_rsp_empty_n => grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_empty_n,
        nfa_finals_buckets_rsp_read => grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_read,
        nfa_finals_buckets_address => grp_nfa_get_finals_fu_362_nfa_finals_buckets_address,
        nfa_finals_buckets_datain => grp_nfa_get_finals_fu_362_nfa_finals_buckets_datain,
        nfa_finals_buckets_dataout => grp_nfa_get_finals_fu_362_nfa_finals_buckets_dataout,
        nfa_finals_buckets_size => grp_nfa_get_finals_fu_362_nfa_finals_buckets_size,
        ap_ce => grp_nfa_get_finals_fu_362_ap_ce,
        ap_return_0 => grp_nfa_get_finals_fu_362_ap_return_0,
        ap_return_1 => grp_nfa_get_finals_fu_362_ap_return_1);

    grp_p_bsf32_hw_fu_368 : component p_bsf32_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        bus_r => grp_p_bsf32_hw_fu_368_bus_r,
        ap_return => grp_p_bsf32_hw_fu_368_ap_return,
        ap_ce => grp_p_bsf32_hw_fu_368_ap_ce);

    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U17 : component nfa_accept_samples_generic_hw_add_32ns_32ns_32_8
    generic map (
        ID => 17,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p2);

    nfa_accept_samples_generic_hw_add_16ns_16ns_16_4_U18 : component nfa_accept_samples_generic_hw_add_16ns_16ns_16_4
    generic map (
        ID => 18,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_402_p0,
        din1 => grp_fu_402_p1,
        ce => grp_fu_402_ce,
        dout => grp_fu_402_p2);

    nfa_accept_samples_generic_hw_add_32ns_32ns_32_8_U19 : component nfa_accept_samples_generic_hw_add_32ns_32ns_32_8
    generic map (
        ID => 19,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_414_p0,
        din1 => grp_fu_414_p1,
        ce => grp_fu_414_ce,
        dout => grp_fu_414_p2);

    nfa_accept_samples_generic_hw_add_6ns_6ns_6_2_U20 : component nfa_accept_samples_generic_hw_add_6ns_6ns_6_2
    generic map (
        ID => 20,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_463_p0,
        din1 => grp_fu_463_p1,
        ce => grp_fu_463_ce,
        dout => grp_fu_463_p2);

    nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4_U21 : component nfa_accept_samples_generic_hw_mul_8ns_6ns_14_4
    generic map (
        ID => 21,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_476_p0,
        din1 => grp_fu_476_p1,
        ce => grp_fu_476_ce,
        dout => grp_fu_476_p2);

    nfa_accept_samples_generic_hw_add_14ns_14ns_14_4_U22 : component nfa_accept_samples_generic_hw_add_14ns_14ns_14_4
    generic map (
        ID => 22,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_482_p0,
        din1 => grp_fu_482_p1,
        ce => grp_fu_482_ce,
        dout => grp_fu_482_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
                    ap_return_preg <= p_0_reg_332;
                end if; 
            end if;
        end if;
    end process;


    -- grp_nfa_get_finals_fu_362_ap_start_ap_start_reg assign process. --
    grp_nfa_get_finals_fu_362_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_nfa_get_finals_fu_362_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st12_fsm_11 = ap_NS_fsm) and (ap_ST_st11_fsm_10 = ap_CS_fsm) and (tmp_s_reg_597 = ap_const_lv1_0))) then 
                    grp_nfa_get_finals_fu_362_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_nfa_get_finals_fu_362_ap_ready)) then 
                    grp_nfa_get_finals_fu_362_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- agg_result_bucket_index_0_lcssa4_i_reg_190 assign process. --
    agg_result_bucket_index_0_lcssa4_i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and (tmp_17_1_i_reg_626 = ap_const_lv1_0))) then 
                agg_result_bucket_index_0_lcssa4_i_reg_190 <= ap_const_lv1_1;
            elsif (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_17_i_reg_612 = ap_const_lv1_0))) then 
                agg_result_bucket_index_0_lcssa4_i_reg_190 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- any_reg_319 assign process. --
    any_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                any_reg_319 <= ap_const_lv1_0;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                any_reg_319 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- bus_assign_reg_178 assign process. --
    bus_assign_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and (tmp_17_1_i_reg_626 = ap_const_lv1_0))) then 
                bus_assign_reg_178 <= next_buckets_1_reg_158;
            elsif (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_17_i_reg_612 = ap_const_lv1_0))) then 
                bus_assign_reg_178 <= next_buckets_0_reg_168;
            end if; 
        end if;
    end process;

    -- i_reg_134 assign process. --
    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and not((ap_const_lv1_0 = any_phi_fu_324_p4)))) then 
                i_reg_134 <= i_1_reg_601;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                i_reg_134 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- j_bit1_reg_299 assign process. --
    j_bit1_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bit1_reg_299 <= j_bit1_ph_cast_fu_440_p1;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                j_bit1_reg_299 <= j_bit_reg_701;
            end if; 
        end if;
    end process;

    -- j_bucket1_ph_reg_203 assign process. --
    j_bucket1_ph_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                j_bucket1_ph_reg_203 <= bus_assign_reg_178;
            elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((tmp_17_1_i_reg_626 = ap_const_lv1_0)))) then 
                j_bucket1_ph_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_bucket1_reg_278 assign process. --
    j_bucket1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bucket1_reg_278 <= j_bucket1_ph_reg_203;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                j_bucket1_reg_278 <= j_bucket_reg_711;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_ph_reg_216 assign process. --
    j_bucket_index1_ph_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                j_bucket_index1_ph_reg_216 <= agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_432_p1;
            elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((tmp_17_1_i_reg_626 = ap_const_lv1_0)))) then 
                j_bucket_index1_ph_reg_216 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_reg_289 assign process. --
    j_bucket_index1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bucket_index1_reg_289 <= j_bucket_index1_ph_cast_fu_436_p1;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                j_bucket_index1_reg_289 <= j_bucket_index_reg_706;
            end if; 
        end if;
    end process;

    -- j_end_ph_reg_238 assign process. --
    j_end_ph_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                j_end_ph_reg_238 <= ap_const_lv1_0;
            elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((tmp_17_1_i_reg_626 = ap_const_lv1_0)))) then 
                j_end_ph_reg_238 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- j_end_reg_309 assign process. --
    j_end_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_end_reg_309 <= j_end_ph_reg_238;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                j_end_reg_309 <= p_s_reg_716;
            end if; 
        end if;
    end process;

    -- next_buckets_0_reg_168 assign process. --
    next_buckets_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and not((ap_const_lv1_0 = any_phi_fu_324_p4)))) then 
                next_buckets_0_reg_168 <= tmp_buckets_0_3_reg_265;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                next_buckets_0_reg_168 <= current_buckets_0_reg_577;
            end if; 
        end if;
    end process;

    -- next_buckets_1_reg_158 assign process. --
    next_buckets_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and not((ap_const_lv1_0 = any_phi_fu_324_p4)))) then 
                next_buckets_1_reg_158 <= tmp_buckets_1_3_reg_252;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                next_buckets_1_reg_158 <= current_buckets_1_reg_582;
            end if; 
        end if;
    end process;

    -- p_01_rec_reg_146 assign process. --
    p_01_rec_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and not((ap_const_lv1_0 = any_phi_fu_324_p4)))) then 
                p_01_rec_reg_146 <= p_rec_reg_616;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                p_01_rec_reg_146 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- p_0_reg_332 assign process. --
    p_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and (ap_const_lv1_0 = any_phi_fu_324_p4))) then 
                p_0_reg_332 <= ap_const_lv1_0;
            elsif ((ap_ST_st44_fsm_43 = ap_CS_fsm)) then 
                p_0_reg_332 <= tmp_2_reg_756;
            end if; 
        end if;
    end process;

    -- tmp_buckets_0_3_reg_265 assign process. --
    tmp_buckets_0_3_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_265 <= ap_const_lv32_0;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_265 <= next_buckets_0_1_reg_721;
            end if; 
        end if;
    end process;

    -- tmp_buckets_1_3_reg_252 assign process. --
    tmp_buckets_1_3_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_252 <= ap_const_lv32_0;
            elsif ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_252 <= next_buckets_1_1_fu_544_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st41_fsm_40 = ap_CS_fsm)) then
                current_buckets_0_1_reg_741 <= current_buckets_0_1_fu_558_p2;
                current_buckets_1_1_reg_746 <= current_buckets_1_1_fu_563_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                current_buckets_0_reg_577 <= grp_nfa_get_initials_fu_356_ap_return_0;
                current_buckets_1_reg_582 <= grp_nfa_get_initials_fu_356_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                i_1_reg_601 <= grp_fu_402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then
                j_bit1_ph_reg_227 <= r_bit_reg_630;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)))) then
                j_bit_reg_701 <= grp_bitset_next_fu_344_ap_return_0;
                j_bucket_index_reg_706 <= grp_bitset_next_fu_344_ap_return_1;
                j_bucket_reg_711 <= grp_bitset_next_fu_344_ap_return_2;
                p_s_reg_716 <= grp_bitset_next_fu_344_ap_return_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st37_fsm_36 = ap_CS_fsm))) then
                next_buckets_0_1_reg_721 <= next_buckets_0_1_fu_538_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then
                offset_i_reg_685 <= grp_fu_482_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)))) then
                p_rec_reg_616 <= grp_fu_414_p2;
                sym_reg_621 <= sample_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then
                r_bit_reg_630 <= grp_p_bsf32_hw_fu_368_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st37_fsm_36 = ap_CS_fsm)))) then
                reg_374 <= nfa_forward_buckets_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                sample_addr_1_reg_606 <= grp_fu_392_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                state_reg_665 <= grp_fu_463_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)) and not((tmp_17_i_reg_612 = ap_const_lv1_0)))) then
                tmp_17_1_i_reg_626 <= tmp_17_1_i_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then
                tmp_17_i_reg_612 <= tmp_17_i_fu_420_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then
                tmp_1_reg_751 <= tmp_1_fu_568_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then
                tmp_2_reg_756 <= tmp_2_fu_572_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then
                tmp_6_i_reg_680 <= grp_fu_476_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                tmp_7_i_cast_reg_650(0) <= tmp_7_i_cast_fu_444_p1(0);
    tmp_7_i_cast_reg_650(1) <= tmp_7_i_cast_fu_444_p1(1);
    tmp_7_i_cast_reg_650(2) <= tmp_7_i_cast_fu_444_p1(2);
    tmp_7_i_cast_reg_650(3) <= tmp_7_i_cast_fu_444_p1(3);
    tmp_7_i_cast_reg_650(4) <= tmp_7_i_cast_fu_444_p1(4);
    tmp_7_i_cast_reg_650(5) <= tmp_7_i_cast_fu_444_p1(5);
    tmp_7_i_cast_reg_650(6) <= tmp_7_i_cast_fu_444_p1(6);
    tmp_7_i_cast_reg_650(7) <= tmp_7_i_cast_fu_444_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st40_fsm_39 = ap_CS_fsm)) then
                tmp_buckets_0_reg_731 <= grp_nfa_get_finals_fu_362_ap_return_0;
                tmp_buckets_1_reg_736 <= grp_nfa_get_finals_fu_362_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                tmp_s_reg_597 <= tmp_s_fu_397_p2;
            end if;
        end if;
    end process;
    tmp_7_i_cast_reg_650(13 downto 8) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , nfa_forward_buckets_rsp_empty_n , sample_rsp_empty_n , tmp_s_reg_597 , tmp_17_i_reg_612 , tmp_17_1_i_reg_626 , j_end_phi_fu_312_p4 , any_phi_fu_324_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if ((tmp_s_reg_597 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if ((not((sample_rsp_empty_n = ap_const_logic_0)) and (tmp_17_i_reg_612 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                elsif ((not((sample_rsp_empty_n = ap_const_logic_0)) and not((tmp_17_i_reg_612 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not((tmp_17_1_i_reg_626 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                if ((not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and not((ap_const_lv1_0 = any_phi_fu_324_p4)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((ap_const_lv1_0 = j_end_phi_fu_312_p4)) and (ap_const_lv1_0 = any_phi_fu_324_p4))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                end if;
            when ap_ST_st37_fsm_36 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                end if;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_432_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_0_lcssa4_i_reg_190),2));
    any_phi_fu_324_p4 <= any_reg_319;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st45_fsm_44 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, p_0_reg_332, ap_return_preg)
    begin
        if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
            ap_return <= p_0_reg_332;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    current_buckets_0_1_fu_558_p2 <= (next_buckets_0_reg_168 and tmp_buckets_0_reg_731);
    current_buckets_1_1_fu_563_p2 <= (next_buckets_1_reg_158 and tmp_buckets_1_reg_736);

    -- grp_bitset_next_fu_344_ap_ce assign process. --
    grp_bitset_next_fu_344_ap_ce_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n, j_end_phi_fu_312_p4)
    begin
        if ((((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or ((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = j_end_phi_fu_312_p4)) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm))) then 
            grp_bitset_next_fu_344_ap_ce <= ap_const_logic_1;
        else 
            grp_bitset_next_fu_344_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_bitset_next_fu_344_p_read <= next_buckets_1_reg_158;
    grp_bitset_next_fu_344_r_bit <= j_bit1_reg_299;
    grp_bitset_next_fu_344_r_bucket <= j_bucket1_reg_278;
    grp_bitset_next_fu_344_r_bucket_index <= j_bucket_index1_reg_289;
    grp_fu_392_ce <= ap_const_logic_1;
    grp_fu_392_p0 <= p_01_rec_reg_146;
    grp_fu_392_p1 <= empty;
    grp_fu_402_ce <= ap_const_logic_1;
    grp_fu_402_p0 <= i_reg_134;
    grp_fu_402_p1 <= ap_const_lv16_1;

    -- grp_fu_414_ce assign process. --
    grp_fu_414_ce_assign_proc : process(ap_CS_fsm, sample_rsp_empty_n, tmp_s_reg_597)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and not((tmp_s_reg_597 = ap_const_lv1_0))) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm))) then 
            grp_fu_414_ce <= ap_const_logic_1;
        else 
            grp_fu_414_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_414_p0 <= p_01_rec_reg_146;
    grp_fu_414_p1 <= ap_const_lv32_1;
    grp_fu_463_ce <= ap_const_logic_1;
    grp_fu_463_p0 <= (tmp_5_fu_447_p1 & ap_const_lv5_0);
    grp_fu_463_p1 <= j_bit1_reg_299(6 - 1 downto 0);
    grp_fu_476_ce <= ap_const_logic_1;
    grp_fu_476_p0 <= grp_fu_476_p00(8 - 1 downto 0);
    grp_fu_476_p00 <= std_logic_vector(resize(unsigned(nfa_symbols),14));
    grp_fu_476_p1 <= grp_fu_476_p10(6 - 1 downto 0);
    grp_fu_476_p10 <= std_logic_vector(resize(unsigned(state_reg_665),14));
    grp_fu_482_ce <= ap_const_logic_1;
    grp_fu_482_p0 <= tmp_6_i_reg_680;
    grp_fu_482_p1 <= tmp_7_i_cast_reg_650;
    grp_nfa_get_finals_fu_362_ap_ce <= ap_const_logic_1;
    grp_nfa_get_finals_fu_362_ap_start <= grp_nfa_get_finals_fu_362_ap_start_ap_start_reg;
    grp_nfa_get_finals_fu_362_nfa_finals_buckets_datain <= nfa_finals_buckets_datain;
    grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_full_n <= nfa_finals_buckets_req_full_n;
    grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_empty_n <= nfa_finals_buckets_rsp_empty_n;
    grp_nfa_get_initials_fu_356_ap_ce <= ap_const_logic_1;

    -- grp_nfa_get_initials_fu_356_ap_start assign process. --
    grp_nfa_get_initials_fu_356_ap_start_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            grp_nfa_get_initials_fu_356_ap_start <= ap_const_logic_1;
        else 
            grp_nfa_get_initials_fu_356_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_nfa_get_initials_fu_356_nfa_initials_buckets_datain <= nfa_initials_buckets_datain;
    grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_full_n <= nfa_initials_buckets_req_full_n;
    grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_empty_n <= nfa_initials_buckets_rsp_empty_n;

    -- grp_p_bsf32_hw_fu_368_ap_ce assign process. --
    grp_p_bsf32_hw_fu_368_ap_ce_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm))) then 
            grp_p_bsf32_hw_fu_368_ap_ce <= ap_const_logic_1;
        else 
            grp_p_bsf32_hw_fu_368_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_bsf32_hw_fu_368_bus_r <= bus_assign_reg_178;
    j_bit1_ph_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(j_bit1_ph_reg_227),8));
    j_bucket_index1_ph_cast_fu_436_p1 <= std_logic_vector(resize(unsigned(j_bucket_index1_ph_reg_216),8));
    j_end_phi_fu_312_p4 <= j_end_reg_309;
    next_buckets_0_1_fu_538_p2 <= (tmp_buckets_0_3_reg_265 or reg_374);
    next_buckets_1_1_fu_544_p2 <= (tmp_buckets_1_3_reg_252 or reg_374);
    nfa_finals_buckets_address <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_address;
    nfa_finals_buckets_dataout <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_dataout;
    nfa_finals_buckets_req_din <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_din;
    nfa_finals_buckets_req_write <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_req_write;
    nfa_finals_buckets_rsp_read <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_rsp_read;
    nfa_finals_buckets_size <= grp_nfa_get_finals_fu_362_nfa_finals_buckets_size;

    -- nfa_forward_buckets_address assign process. --
    nfa_forward_buckets_address_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n, tmp_4_i_cast_fu_493_p1, tmp_8_i_cast_fu_511_p1)
    begin
        if (((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)))) then 
            nfa_forward_buckets_address <= tmp_8_i_cast_fu_511_p1;
        elsif ((ap_ST_st35_fsm_34 = ap_CS_fsm)) then 
            nfa_forward_buckets_address <= tmp_4_i_cast_fu_493_p1;
        else 
            nfa_forward_buckets_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    nfa_forward_buckets_dataout <= ap_const_lv32_0;
    nfa_forward_buckets_req_din <= ap_const_logic_0;

    -- nfa_forward_buckets_req_write assign process. --
    nfa_forward_buckets_req_write_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n)
    begin
        if ((((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            nfa_forward_buckets_req_write <= ap_const_logic_1;
        else 
            nfa_forward_buckets_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- nfa_forward_buckets_rsp_read assign process. --
    nfa_forward_buckets_rsp_read_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n)
    begin
        if ((((ap_ST_st36_fsm_35 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st37_fsm_36 = ap_CS_fsm)))) then 
            nfa_forward_buckets_rsp_read <= ap_const_logic_1;
        else 
            nfa_forward_buckets_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    nfa_forward_buckets_size <= ap_const_lv32_1;
    nfa_initials_buckets_address <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_address;
    nfa_initials_buckets_dataout <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_dataout;
    nfa_initials_buckets_req_din <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_din;
    nfa_initials_buckets_req_write <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_req_write;
    nfa_initials_buckets_rsp_read <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_rsp_read;
    nfa_initials_buckets_size <= grp_nfa_get_initials_fu_356_nfa_initials_buckets_size;
    sample_address <= sample_addr_1_reg_606;
    sample_dataout <= ap_const_lv8_0;
    sample_req_din <= ap_const_logic_0;

    -- sample_req_write assign process. --
    sample_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            sample_req_write <= ap_const_logic_1;
        else 
            sample_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sample_rsp_read assign process. --
    sample_rsp_read_assign_proc : process(ap_CS_fsm, sample_rsp_empty_n)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((sample_rsp_empty_n = ap_const_logic_0)))) then 
            sample_rsp_read <= ap_const_logic_1;
        else 
            sample_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    sample_size <= ap_const_lv32_1;
    tmp_17_1_i_fu_426_p2 <= "1" when (next_buckets_1_reg_158 = ap_const_lv32_0) else "0";
    tmp_17_i_fu_420_p2 <= "1" when (next_buckets_0_reg_168 = ap_const_lv32_0) else "0";
    tmp_1_fu_568_p2 <= (current_buckets_1_1_reg_746 or current_buckets_0_1_reg_741);
    tmp_2_fu_572_p2 <= "0" when (tmp_1_reg_751 = ap_const_lv32_0) else "1";
    tmp_4_i_cast_fu_493_p1 <= std_logic_vector(resize(unsigned(tmp_4_i_fu_486_p3),32));
    tmp_4_i_fu_486_p3 <= (offset_i_reg_685 & ap_const_lv1_0);
    tmp_5_fu_447_p1 <= j_bucket_index1_reg_289(1 - 1 downto 0);
    tmp_7_i_cast_fu_444_p1 <= std_logic_vector(resize(unsigned(sym_reg_621),14));
    tmp_8_i_cast_fu_511_p1 <= std_logic_vector(resize(unsigned(tmp_8_i_fu_504_p3),32));
    tmp_8_i_fu_504_p3 <= (offset_i_reg_685 & ap_const_lv1_1);
    tmp_s_fu_397_p2 <= "1" when (unsigned(i_reg_134) < unsigned(length_r)) else "0";
end behav;
