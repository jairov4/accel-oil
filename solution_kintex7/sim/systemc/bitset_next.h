// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _bitset_next_HH_
#define _bitset_next_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "p_bsf32_hw.h"

namespace ap_rtl {

struct bitset_next : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<8> > r_bit;
    sc_in< sc_lv<8> > r_bucket_index;
    sc_in< sc_lv<32> > r_bucket;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;
    sc_out< sc_lv<1> > ap_return_3;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    bitset_next(sc_module_name name);
    SC_HAS_PROCESS(bitset_next);

    ~bitset_next();

    sc_trace_file* mVcdFile;

    p_bsf32_hw* grp_p_bsf32_hw_fu_118;
    sc_signal< sc_lv<32> > r_bucket_read_reg_190;
    sc_signal< sc_lv<8> > r_bit_read_reg_195;
    sc_signal< sc_lv<8> > ap_reg_ppstg_r_bit_read_reg_195_pp0_it1;
    sc_signal< sc_lv<8> > ap_reg_ppstg_r_bit_read_reg_195_pp0_it2;
    sc_signal< sc_lv<32> > p_read_1_reg_201;
    sc_signal< sc_lv<32> > ap_reg_ppstg_p_read_1_reg_201_pp0_it1;
    sc_signal< sc_lv<32> > ap_reg_ppstg_p_read_1_reg_201_pp0_it2;
    sc_signal< sc_lv<2> > tmp_fu_123_p1;
    sc_signal< sc_lv<2> > tmp_reg_209;
    sc_signal< sc_lv<2> > ap_reg_ppstg_tmp_reg_209_pp0_it1;
    sc_signal< sc_lv<2> > ap_reg_ppstg_tmp_reg_209_pp0_it2;
    sc_signal< sc_lv<32> > tmp_1_fu_127_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_215;
    sc_signal< sc_lv<32> > bus_assign_fu_133_p2;
    sc_signal< sc_lv<32> > bus_assign_reg_220;
    sc_signal< sc_lv<32> > ap_reg_ppstg_bus_assign_reg_220_pp0_it2;
    sc_signal< sc_lv<1> > tmp_3_fu_137_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_227;
    sc_signal< sc_lv<1> > tmp_26_1_fu_142_p2;
    sc_signal< sc_lv<1> > tmp_26_1_reg_231;
    sc_signal< sc_lv<1> > tmp_28_1_fu_147_p2;
    sc_signal< sc_lv<1> > tmp_28_1_reg_235;
    sc_signal< sc_lv<32> > grp_p_bsf32_hw_fu_118_bus_r;
    sc_signal< sc_lv<5> > grp_p_bsf32_hw_fu_118_ap_return;
    sc_signal< sc_logic > grp_p_bsf32_hw_fu_118_ap_ce;
    sc_signal< sc_lv<32> > ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3;
    sc_signal< sc_lv<32> > agg_result_bucket_write_assign_phi_fu_58_p8;
    sc_signal< sc_lv<32> > ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3;
    sc_signal< sc_lv<1> > agg_result_end_write_assign_phi_fu_73_p8;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2;
    sc_signal< sc_lv<2> > ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3;
    sc_signal< sc_lv<2> > agg_result_bucket_index_write_assign_phi_fu_91_p8;
    sc_signal< sc_lv<2> > ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2;
    sc_signal< sc_lv<8> > agg_result_bit_write_assign_trunc3_ext_fu_157_p1;
    sc_signal< sc_lv<8> > ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3;
    sc_signal< sc_lv<8> > agg_result_bit_write_assign_phi_fu_107_p8;
    sc_signal< sc_lv<8> > agg_result_bit_write_assign_trunc_ext_fu_152_p1;
    sc_signal< sc_lv<8> > ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2;
    sc_signal< sc_lv<8> > agg_result_bucket_index_write_assign_cast_fu_162_p1;
    sc_signal< bool > ap_sig_bdd_90;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_bit_write_assign_phi_fu_107_p8();
    void thread_agg_result_bit_write_assign_trunc3_ext_fu_157_p1();
    void thread_agg_result_bit_write_assign_trunc_ext_fu_152_p1();
    void thread_agg_result_bucket_index_write_assign_cast_fu_162_p1();
    void thread_agg_result_bucket_index_write_assign_phi_fu_91_p8();
    void thread_agg_result_bucket_write_assign_phi_fu_58_p8();
    void thread_agg_result_end_write_assign_phi_fu_73_p8();
    void thread_ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2();
    void thread_ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2();
    void thread_ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2();
    void thread_ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_sig_bdd_90();
    void thread_bus_assign_fu_133_p2();
    void thread_grp_p_bsf32_hw_fu_118_ap_ce();
    void thread_grp_p_bsf32_hw_fu_118_bus_r();
    void thread_tmp_1_fu_127_p2();
    void thread_tmp_26_1_fu_142_p2();
    void thread_tmp_28_1_fu_147_p2();
    void thread_tmp_3_fu_137_p2();
    void thread_tmp_fu_123_p1();
};

}

using namespace ap_rtl;

#endif
