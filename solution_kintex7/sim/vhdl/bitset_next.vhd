-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitset_next is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
    r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of bitset_next is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_true : BOOLEAN := true;

    signal r_bucket_read_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_bit_read_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_195_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_r_bit_read_reg_195_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_201_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_p_read_1_reg_201_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_123_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_209_pp0_it1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_ppstg_tmp_reg_209_pp0_it2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_assign_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_bus_assign_reg_220_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_1_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_1_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_1_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_bsf32_hw_fu_118_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_bsf32_hw_fu_118_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_bsf32_hw_fu_118_ap_ce : STD_LOGIC;
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_bucket_write_assign_phi_fu_58_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_end_write_assign_phi_fu_73_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bucket_index_write_assign_phi_fu_91_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_bit_write_assign_trunc3_ext_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_phi_fu_107_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bit_write_assign_trunc_ext_fu_152_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bucket_index_write_assign_cast_fu_162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_90 : BOOLEAN;

    component p_bsf32_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_p_bsf32_hw_fu_118 : component p_bsf32_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        bus_r => grp_p_bsf32_hw_fu_118_bus_r,
        ap_return => grp_p_bsf32_hw_fu_118_ap_return,
        ap_ce => grp_p_bsf32_hw_fu_118_ap_ce);





    -- ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3 assign process. --
    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (ap_sig_bdd_90) then 
                    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3 <= ap_reg_ppstg_r_bit_read_reg_195_pp0_it1;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3 assign process. --
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (ap_sig_bdd_90) then 
                    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3 <= ap_const_lv2_2;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3 assign process. --
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (ap_sig_bdd_90) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3(0) <= '0';
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3(0) <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2(0);
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3 assign process. --
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                ap_reg_ppstg_bus_assign_reg_220_pp0_it2 <= bus_assign_reg_220;
                ap_reg_ppstg_p_read_1_reg_201_pp0_it1 <= p_read_1_reg_201;
                ap_reg_ppstg_p_read_1_reg_201_pp0_it2 <= ap_reg_ppstg_p_read_1_reg_201_pp0_it1;
                ap_reg_ppstg_r_bit_read_reg_195_pp0_it1 <= r_bit_read_reg_195;
                ap_reg_ppstg_r_bit_read_reg_195_pp0_it2 <= ap_reg_ppstg_r_bit_read_reg_195_pp0_it1;
                ap_reg_ppstg_tmp_reg_209_pp0_it1 <= tmp_reg_209;
                ap_reg_ppstg_tmp_reg_209_pp0_it2 <= ap_reg_ppstg_tmp_reg_209_pp0_it1;
                bus_assign_reg_220 <= bus_assign_fu_133_p2;
                p_read_1_reg_201 <= p_read;
                r_bit_read_reg_195 <= r_bit;
                r_bucket_read_reg_190 <= r_bucket;
                tmp_1_reg_215 <= tmp_1_fu_127_p2;
                tmp_3_reg_227 <= tmp_3_fu_137_p2;
                tmp_reg_209 <= tmp_fu_123_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and not((tmp_3_fu_137_p2 = ap_const_lv1_0)))) then
                tmp_26_1_reg_231 <= tmp_26_1_fu_142_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and not((tmp_3_fu_137_p2 = ap_const_lv1_0)) and not((tmp_26_1_fu_142_p2 = ap_const_lv1_0)))) then
                tmp_28_1_reg_235 <= tmp_28_1_fu_147_p2;
            end if;
        end if;
    end process;
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3(31 downto 1) <= "0000000000000000000000000000000";
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3(0) <= '1';

    -- agg_result_bit_write_assign_phi_fu_107_p8 assign process. --
    agg_result_bit_write_assign_phi_fu_107_p8_assign_proc : process(ap_reg_ppstg_r_bit_read_reg_195_pp0_it2, tmp_3_reg_227, tmp_26_1_reg_231, tmp_28_1_reg_235, agg_result_bit_write_assign_trunc3_ext_fu_157_p1, ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3, agg_result_bit_write_assign_trunc_ext_fu_152_p1)
    begin
        if ((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_28_1_reg_235)))) then 
            agg_result_bit_write_assign_phi_fu_107_p8 <= ap_reg_ppstg_r_bit_read_reg_195_pp0_it2;
        elsif ((tmp_3_reg_227 = ap_const_lv1_0)) then 
            agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc_ext_fu_152_p1;
        elsif ((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_reg_235))) then 
            agg_result_bit_write_assign_phi_fu_107_p8 <= agg_result_bit_write_assign_trunc3_ext_fu_157_p1;
        else 
            agg_result_bit_write_assign_phi_fu_107_p8 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it3;
        end if; 
    end process;

    agg_result_bit_write_assign_trunc3_ext_fu_157_p1 <= std_logic_vector(resize(unsigned(grp_p_bsf32_hw_fu_118_ap_return),8));
    agg_result_bit_write_assign_trunc_ext_fu_152_p1 <= std_logic_vector(resize(unsigned(grp_p_bsf32_hw_fu_118_ap_return),8));
    agg_result_bucket_index_write_assign_cast_fu_162_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_write_assign_phi_fu_91_p8),8));

    -- agg_result_bucket_index_write_assign_phi_fu_91_p8 assign process. --
    agg_result_bucket_index_write_assign_phi_fu_91_p8_assign_proc : process(ap_reg_ppstg_tmp_reg_209_pp0_it2, tmp_3_reg_227, tmp_26_1_reg_231, tmp_28_1_reg_235, ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3)
    begin
        if ((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_28_1_reg_235)))) then 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_const_lv2_2;
        elsif ((tmp_3_reg_227 = ap_const_lv1_0)) then 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_ppstg_tmp_reg_209_pp0_it2;
        elsif ((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_reg_235))) then 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_const_lv2_1;
        else 
            agg_result_bucket_index_write_assign_phi_fu_91_p8 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it3;
        end if; 
    end process;


    -- agg_result_bucket_write_assign_phi_fu_58_p8 assign process. --
    agg_result_bucket_write_assign_phi_fu_58_p8_assign_proc : process(ap_reg_ppstg_p_read_1_reg_201_pp0_it2, ap_reg_ppstg_bus_assign_reg_220_pp0_it2, tmp_3_reg_227, tmp_26_1_reg_231, tmp_28_1_reg_235, ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3)
    begin
        if ((tmp_3_reg_227 = ap_const_lv1_0)) then 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_bus_assign_reg_220_pp0_it2;
        elsif (((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_reg_235)) or (not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_28_1_reg_235))))) then 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_ppstg_p_read_1_reg_201_pp0_it2;
        else 
            agg_result_bucket_write_assign_phi_fu_58_p8 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it3;
        end if; 
    end process;


    -- agg_result_end_write_assign_phi_fu_73_p8 assign process. --
    agg_result_end_write_assign_phi_fu_73_p8_assign_proc : process(tmp_3_reg_227, tmp_26_1_reg_231, tmp_28_1_reg_235, ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3)
    begin
        if ((not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_28_1_reg_235)))) then 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_const_lv1_1;
        elsif (((tmp_3_reg_227 = ap_const_lv1_0) or (not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_reg_235)))) then 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_const_lv1_0;
        else 
            agg_result_end_write_assign_phi_fu_73_p8 <= ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it3;
        end if; 
    end process;

    ap_reg_phiprechg_agg_result_bit_write_assign_reg_104pp0_it2 <= ap_const_lv8_1;
    ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_87pp0_it2 <= ap_const_lv2_1;
    ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it2 <= ap_const_lv32_1;
    ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it2 <= ap_const_lv1_1;
    ap_return_0 <= agg_result_bit_write_assign_phi_fu_107_p8;
    ap_return_1 <= agg_result_bucket_index_write_assign_cast_fu_162_p1;
    ap_return_2 <= agg_result_bucket_write_assign_phi_fu_58_p8;
    ap_return_3 <= agg_result_end_write_assign_phi_fu_73_p8;

    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(tmp_3_fu_137_p2, tmp_26_1_fu_142_p2)
    begin
                ap_sig_bdd_90 <= (not((tmp_3_fu_137_p2 = ap_const_lv1_0)) and (tmp_26_1_fu_142_p2 = ap_const_lv1_0));
    end process;

    bus_assign_fu_133_p2 <= (tmp_1_reg_215 and r_bucket_read_reg_190);

    -- grp_p_bsf32_hw_fu_118_ap_ce assign process. --
    grp_p_bsf32_hw_fu_118_ap_ce_assign_proc : process(ap_ce, tmp_3_fu_137_p2, tmp_3_reg_227, tmp_26_1_fu_142_p2, tmp_26_1_reg_231, tmp_28_1_fu_147_p2, tmp_28_1_reg_235)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((tmp_3_fu_137_p2 = ap_const_lv1_0) or (tmp_3_reg_227 = ap_const_lv1_0) or (not((tmp_3_fu_137_p2 = ap_const_lv1_0)) and not((tmp_26_1_fu_142_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_fu_147_p2)) or (not((tmp_3_reg_227 = ap_const_lv1_0)) and not((tmp_26_1_reg_231 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_reg_235))))) then 
            grp_p_bsf32_hw_fu_118_ap_ce <= ap_const_logic_1;
        else 
            grp_p_bsf32_hw_fu_118_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_p_bsf32_hw_fu_118_bus_r assign process. --
    grp_p_bsf32_hw_fu_118_bus_r_assign_proc : process(ap_reg_ppstg_p_read_1_reg_201_pp0_it1, bus_assign_reg_220, tmp_3_fu_137_p2, tmp_26_1_fu_142_p2, tmp_28_1_fu_147_p2)
    begin
        if ((not((tmp_3_fu_137_p2 = ap_const_lv1_0)) and not((tmp_26_1_fu_142_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_28_1_fu_147_p2))) then 
            grp_p_bsf32_hw_fu_118_bus_r <= ap_reg_ppstg_p_read_1_reg_201_pp0_it1;
        elsif ((tmp_3_fu_137_p2 = ap_const_lv1_0)) then 
            grp_p_bsf32_hw_fu_118_bus_r <= bus_assign_reg_220;
        else 
            grp_p_bsf32_hw_fu_118_bus_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_1_fu_127_p2 <= std_logic_vector(unsigned(r_bucket) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_26_1_fu_142_p2 <= "1" when (ap_reg_ppstg_tmp_reg_209_pp0_it1 = ap_const_lv2_0) else "0";
    tmp_28_1_fu_147_p2 <= "1" when (ap_reg_ppstg_p_read_1_reg_201_pp0_it1 = ap_const_lv32_0) else "0";
    tmp_3_fu_137_p2 <= "1" when (bus_assign_reg_220 = ap_const_lv32_0) else "0";
    tmp_fu_123_p1 <= r_bucket_index(2 - 1 downto 0);
end behav;
