// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "autosim_file.h"
#include <stdbool.h>


using namespace std;
using namespace sc_core;
using namespace sc_dt;

typedef struct _bitset_t  {
uint32_t buckets[2];
} bitset_t;
typedef struct _nfa_t  {
bitset_t initials;
bitset_t finals;
bitset_t forward;
bitset_t backward;
uint8_t symbols;
} nfa_t;
typedef struct _index_t  {
uint32_t begin;
uint16_t samples;
uint8_t stride;
} index_t;
typedef struct _sample_iterator_t  {
uint16_t index;
uint16_t sample;
} sample_iterator_t;



   #define AUTOTB_TVIN_nfa_initials_buckets  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_nfa_initials_buckets.dat"
   #define AUTOTB_TVIN_nfa_finals_buckets  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_nfa_finals_buckets.dat"
   #define AUTOTB_TVIN_nfa_forward_buckets  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_nfa_forward_buckets.dat"
   #define AUTOTB_TVIN_nfa_symbols  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_nfa_symbols.dat"
   #define AUTOTB_TVIN_sample_buffer  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_sample_buffer.dat"
   #define AUTOTB_TVIN_sample_buffer_length  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_sample_buffer_length.dat"
   #define AUTOTB_TVIN_sample_length  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_sample_length.dat"
   #define AUTOTB_TVIN_indices_begin  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_indices_begin.dat"
   #define AUTOTB_TVIN_indices_samples  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_indices_samples.dat"
   #define AUTOTB_TVIN_indices_stride  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_indices_stride.dat"
   #define AUTOTB_TVIN_begin_index  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_begin_index.dat"
   #define AUTOTB_TVIN_begin_sample  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_begin_sample.dat"
   #define AUTOTB_TVIN_end_index  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_end_index.dat"
   #define AUTOTB_TVIN_end_sample  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_end_sample.dat"
   #define AUTOTB_TVIN_stop_on_first  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_stop_on_first.dat"
   #define AUTOTB_TVIN_accept  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvin_accept.dat"
   #define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.nfa_accept_samples_generic_hw.autotvout_ap_return.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.nfa_accept_samples_generic_hw.autotvout_ap_return.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            nfa_initials_buckets_depth = 0;
            nfa_finals_buckets_depth = 0;
            nfa_forward_buckets_depth = 0;
            nfa_symbols_depth = 0;
            sample_buffer_depth = 0;
            sample_buffer_length_depth = 0;
            sample_length_depth = 0;
            indices_begin_depth = 0;
            indices_samples_depth = 0;
            indices_stride_depth = 0;
            begin_index_depth = 0;
            begin_sample_depth = 0;
            end_index_depth = 0;
            end_sample_depth = 0;
            stop_on_first_depth = 0;
            accept_depth = 0;
            ap_return_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {nfa_initials_buckets "<< nfa_initials_buckets_depth << "}\n";
            total_list<<"   {nfa_finals_buckets "<< nfa_finals_buckets_depth << "}\n";
            total_list<<"   {nfa_forward_buckets "<< nfa_forward_buckets_depth << "}\n";
            total_list<<"   {nfa_symbols "<< nfa_symbols_depth << "}\n";
            total_list<<"   {sample_buffer "<< sample_buffer_depth << "}\n";
            total_list<<"   {sample_buffer_length "<< sample_buffer_length_depth << "}\n";
            total_list<<"   {sample_length "<< sample_length_depth << "}\n";
            total_list<<"   {indices_begin "<< indices_begin_depth << "}\n";
            total_list<<"   {indices_samples "<< indices_samples_depth << "}\n";
            total_list<<"   {indices_stride "<< indices_stride_depth << "}\n";
            total_list<<"   {begin_index "<< begin_index_depth << "}\n";
            total_list<<"   {begin_sample "<< begin_sample_depth << "}\n";
            total_list<<"   {end_index "<< end_index_depth << "}\n";
            total_list<<"   {end_sample "<< end_sample_depth << "}\n";
            total_list<<"   {stop_on_first "<< stop_on_first_depth << "}\n";
            total_list<<"   {accept "<< accept_depth << "}\n";
            total_list<<"   {ap_return "<< ap_return_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int nfa_initials_buckets_depth;
        int nfa_finals_buckets_depth;
        int nfa_forward_buckets_depth;
        int nfa_symbols_depth;
        int sample_buffer_depth;
        int sample_buffer_length_depth;
        int sample_length_depth;
        int indices_begin_depth;
        int indices_samples_depth;
        int indices_stride_depth;
        int begin_index_depth;
        int begin_sample_depth;
        int end_index_depth;
        int end_sample_depth;
        int stop_on_first_depth;
        int accept_depth;
        int ap_return_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

extern "C" int nfa_accept_samples_generic_hw (nfa_t* nfa, uint8_t sample_buffer[5120], uint32_t sample_buffer_length, uint16_t sample_length, index_t indices[1024], uint16_t i_size, sample_iterator_t begin, sample_iterator_t end, _Bool stop_on_first, _Bool accept);
#define nfa_accept_samples_generic_hw AESL_ORIG_DUT_nfa_accept_samples_generic_hw
extern "C" int nfa_accept_samples_generic_hw (nfa_t* nfa, uint8_t sample_buffer[5120], uint32_t sample_buffer_length, uint16_t sample_length, index_t indices[1024], uint16_t i_size, sample_iterator_t begin, sample_iterator_t end, _Bool stop_on_first, _Bool accept);
#undef nfa_accept_samples_generic_hw
int nfa_accept_samples_generic_hw (nfa_t* nfa, uint8_t sample_buffer[5120], uint32_t sample_buffer_length, uint16_t sample_length, index_t indices[1024], uint16_t i_size, sample_iterator_t begin, sample_iterator_t end, _Bool stop_on_first, _Bool accept) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        int AESL_return;

        aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //data

            sc_bv<32> ap_return_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    ap_return_pc_buffer = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                AESL_return = (sc_bv<32>(ap_return_pc_buffer.range(31, 0))).to_uint64();

                AESL_i++;

                }

        }

        AESL_transaction_pc ++ ;

        return AESL_return;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_nfa_initials_buckets = new char[50];

        char* tvin_nfa_finals_buckets = new char[50];

        char* tvin_nfa_forward_buckets = new char[50];

        char* tvin_nfa_symbols = new char[50];

        char* tvin_sample_buffer = new char[50];

        char* tvin_sample_buffer_length = new char[50];

        char* tvin_sample_length = new char[50];

        char* tvin_indices_begin = new char[50];

        char* tvin_indices_samples = new char[50];

        char* tvin_indices_stride = new char[50];

        char* tvin_begin_index = new char[50];

        char* tvin_begin_sample = new char[50];

        char* tvin_end_index = new char[50];

        char* tvin_end_sample = new char[50];

        char* tvin_stop_on_first = new char[50];

        char* tvin_accept = new char[50];

        char* tvout_ap_return = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_nfa_initials_buckets, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_nfa_initials_buckets, tvin_nfa_initials_buckets);

        sc_bv<32> *nfa_initials_buckets_tvin_wrapc_buffer = new sc_bv<32>[2];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 1 ; i_0+= 1) {

            nfa_initials_buckets_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = nfa->initials.buckets[i_0];

            AESL_i++;

        }

        for (int i = 0; i < 2 ; i++) {

            sprintf(tvin_nfa_initials_buckets, "%s\n", (nfa_initials_buckets_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_nfa_initials_buckets, tvin_nfa_initials_buckets);

        }

        tcl_file.set_num(2,&tcl_file.nfa_initials_buckets_depth);

        sprintf(tvin_nfa_initials_buckets, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_nfa_initials_buckets, tvin_nfa_initials_buckets);

        delete [] nfa_initials_buckets_tvin_wrapc_buffer;

        sprintf(tvin_nfa_finals_buckets, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_nfa_finals_buckets, tvin_nfa_finals_buckets);

        sc_bv<32> *nfa_finals_buckets_tvin_wrapc_buffer = new sc_bv<32>[2];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 1 ; i_0+= 1) {

            nfa_finals_buckets_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = nfa->finals.buckets[i_0];

            AESL_i++;

        }

        for (int i = 0; i < 2 ; i++) {

            sprintf(tvin_nfa_finals_buckets, "%s\n", (nfa_finals_buckets_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_nfa_finals_buckets, tvin_nfa_finals_buckets);

        }

        tcl_file.set_num(2,&tcl_file.nfa_finals_buckets_depth);

        sprintf(tvin_nfa_finals_buckets, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_nfa_finals_buckets, tvin_nfa_finals_buckets);

        delete [] nfa_finals_buckets_tvin_wrapc_buffer;

        sprintf(tvin_nfa_forward_buckets, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_nfa_forward_buckets, tvin_nfa_forward_buckets);

        sc_bv<32> *nfa_forward_buckets_tvin_wrapc_buffer = new sc_bv<32>[32130];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 16064 ; i_0+= 1) {

            for (int i_1 = 0; i_1 <= 1 ; i_1+= 1) {

                nfa_forward_buckets_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = nfa->forward.buckets[i_0];

                AESL_i++;

            }

        }

        for (int i = 0; i < 10 ; i++) {

            sprintf(tvin_nfa_forward_buckets, "%s\n", (nfa_forward_buckets_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_nfa_forward_buckets, tvin_nfa_forward_buckets);

        }

        tcl_file.set_num(10,&tcl_file.nfa_forward_buckets_depth);

        sprintf(tvin_nfa_forward_buckets, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_nfa_forward_buckets, tvin_nfa_forward_buckets);

        delete [] nfa_forward_buckets_tvin_wrapc_buffer;

        sprintf(tvin_nfa_symbols, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_nfa_symbols, tvin_nfa_symbols);

        sc_bv<8> *nfa_symbols_tvin_wrapc_buffer = new sc_bv<8>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            nfa_symbols_tvin_wrapc_buffer[0 + AESL_i].range(7, 0) = nfa->symbols;

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_nfa_symbols, "%s\n", (nfa_symbols_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_nfa_symbols, tvin_nfa_symbols);

        }

        tcl_file.set_num(1,&tcl_file.nfa_symbols_depth);

        sprintf(tvin_nfa_symbols, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_nfa_symbols, tvin_nfa_symbols);

        delete [] nfa_symbols_tvin_wrapc_buffer;

        sprintf(tvin_sample_buffer, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_sample_buffer, tvin_sample_buffer);

        sc_bv<8> *sample_buffer_tvin_wrapc_buffer = new sc_bv<8>[5120];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 5119 ; i_0+= 1) {

            sample_buffer_tvin_wrapc_buffer[0 + AESL_i].range(7, 0) = sample_buffer[i_0];

            AESL_i++;

        }

        for (int i = 0; i < 10 ; i++) {

            sprintf(tvin_sample_buffer, "%s\n", (sample_buffer_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_sample_buffer, tvin_sample_buffer);

        }

        tcl_file.set_num(10,&tcl_file.sample_buffer_depth);

        sprintf(tvin_sample_buffer, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_sample_buffer, tvin_sample_buffer);

        delete [] sample_buffer_tvin_wrapc_buffer;

        sprintf(tvin_sample_buffer_length, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_sample_buffer_length, tvin_sample_buffer_length);

        sc_bv<32> sample_buffer_length_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sample_buffer_length_tvin_wrapc_buffer.range(31, 0) = sample_buffer_length;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_sample_buffer_length, "%s\n", (sample_buffer_length_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_sample_buffer_length, tvin_sample_buffer_length);

        }

        tcl_file.set_num(1,&tcl_file.sample_buffer_length_depth);

        sprintf(tvin_sample_buffer_length, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_sample_buffer_length, tvin_sample_buffer_length);

        sprintf(tvin_sample_length, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_sample_length, tvin_sample_length);

        sc_bv<16> sample_length_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sample_length_tvin_wrapc_buffer.range(15, 0) = sample_length;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_sample_length, "%s\n", (sample_length_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_sample_length, tvin_sample_length);

        }

        tcl_file.set_num(1,&tcl_file.sample_length_depth);

        sprintf(tvin_sample_length, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_sample_length, tvin_sample_length);

        sprintf(tvin_indices_begin, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_indices_begin, tvin_indices_begin);

        sc_bv<32> *indices_begin_tvin_wrapc_buffer = new sc_bv<32>[1024];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 1023 ; i_0+= 1) {

            indices_begin_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = indices[i_0].begin;

            AESL_i++;

        }

        for (int i = 0; i < 10 ; i++) {

            sprintf(tvin_indices_begin, "%s\n", (indices_begin_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_indices_begin, tvin_indices_begin);

        }

        tcl_file.set_num(10,&tcl_file.indices_begin_depth);

        sprintf(tvin_indices_begin, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_indices_begin, tvin_indices_begin);

        delete [] indices_begin_tvin_wrapc_buffer;

        sprintf(tvin_indices_samples, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_indices_samples, tvin_indices_samples);

        sc_bv<16> *indices_samples_tvin_wrapc_buffer = new sc_bv<16>[1024];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 1023 ; i_0+= 1) {

            indices_samples_tvin_wrapc_buffer[0 + AESL_i].range(15, 0) = indices[i_0].samples;

            AESL_i++;

        }

        for (int i = 0; i < 10 ; i++) {

            sprintf(tvin_indices_samples, "%s\n", (indices_samples_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_indices_samples, tvin_indices_samples);

        }

        tcl_file.set_num(10,&tcl_file.indices_samples_depth);

        sprintf(tvin_indices_samples, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_indices_samples, tvin_indices_samples);

        delete [] indices_samples_tvin_wrapc_buffer;

        sprintf(tvin_indices_stride, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_indices_stride, tvin_indices_stride);

        sc_bv<8> *indices_stride_tvin_wrapc_buffer = new sc_bv<8>[1024];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 1023 ; i_0+= 1) {

            indices_stride_tvin_wrapc_buffer[0 + AESL_i].range(7, 0) = indices[i_0].stride;

            AESL_i++;

        }

        for (int i = 0; i < 10 ; i++) {

            sprintf(tvin_indices_stride, "%s\n", (indices_stride_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_indices_stride, tvin_indices_stride);

        }

        tcl_file.set_num(10,&tcl_file.indices_stride_depth);

        sprintf(tvin_indices_stride, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_indices_stride, tvin_indices_stride);

        delete [] indices_stride_tvin_wrapc_buffer;

        sprintf(tvin_begin_index, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_begin_index, tvin_begin_index);

        sc_bv<16> begin_index_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        begin_index_tvin_wrapc_buffer.range(15, 0) = begin.index;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_begin_index, "%s\n", (begin_index_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_begin_index, tvin_begin_index);

        }

        tcl_file.set_num(1,&tcl_file.begin_index_depth);

        sprintf(tvin_begin_index, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_begin_index, tvin_begin_index);

        sprintf(tvin_begin_sample, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_begin_sample, tvin_begin_sample);

        sc_bv<16> begin_sample_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        begin_sample_tvin_wrapc_buffer.range(15, 0) = begin.sample;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_begin_sample, "%s\n", (begin_sample_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_begin_sample, tvin_begin_sample);

        }

        tcl_file.set_num(1,&tcl_file.begin_sample_depth);

        sprintf(tvin_begin_sample, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_begin_sample, tvin_begin_sample);

        sprintf(tvin_end_index, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_end_index, tvin_end_index);

        sc_bv<16> end_index_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        end_index_tvin_wrapc_buffer.range(15, 0) = end.index;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_end_index, "%s\n", (end_index_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_end_index, tvin_end_index);

        }

        tcl_file.set_num(1,&tcl_file.end_index_depth);

        sprintf(tvin_end_index, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_end_index, tvin_end_index);

        sprintf(tvin_end_sample, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_end_sample, tvin_end_sample);

        sc_bv<16> end_sample_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        end_sample_tvin_wrapc_buffer.range(15, 0) = end.sample;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_end_sample, "%s\n", (end_sample_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_end_sample, tvin_end_sample);

        }

        tcl_file.set_num(1,&tcl_file.end_sample_depth);

        sprintf(tvin_end_sample, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_end_sample, tvin_end_sample);

        sprintf(tvin_stop_on_first, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_stop_on_first, tvin_stop_on_first);

        sc_bv<1> stop_on_first_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        stop_on_first_tvin_wrapc_buffer.range(0, 0) = stop_on_first;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_stop_on_first, "%s\n", (stop_on_first_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_stop_on_first, tvin_stop_on_first);

        }

        tcl_file.set_num(1,&tcl_file.stop_on_first_depth);

        sprintf(tvin_stop_on_first, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_stop_on_first, tvin_stop_on_first);

        sprintf(tvin_accept, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_accept, tvin_accept);

        sc_bv<1> accept_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        accept_tvin_wrapc_buffer.range(0, 0) = accept;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_accept, "%s\n", (accept_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_accept, tvin_accept);

        }

        tcl_file.set_num(1,&tcl_file.accept_depth);

        sprintf(tvin_accept, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_accept, tvin_accept);

        int AESL_return = AESL_ORIG_DUT_nfa_accept_samples_generic_hw(nfa,sample_buffer,sample_buffer_length,sample_length,indices,i_size,begin,end,stop_on_first,accept);

        sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        sc_bv<32> ap_return_tvout_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        ap_return_tvout_wrapc_buffer.range(31, 0) = AESL_return;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        }

        tcl_file.set_num(1,&tcl_file.ap_return_depth);

        sprintf(tvout_ap_return, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        delete [] tvin_nfa_initials_buckets;

        delete [] tvin_nfa_finals_buckets;

        delete [] tvin_nfa_forward_buckets;

        delete [] tvin_nfa_symbols;

        delete [] tvin_sample_buffer;

        delete [] tvin_sample_buffer_length;

        delete [] tvin_sample_length;

        delete [] tvin_indices_begin;

        delete [] tvin_indices_samples;

        delete [] tvin_indices_stride;

        delete [] tvin_begin_index;

        delete [] tvin_begin_sample;

        delete [] tvin_end_index;

        delete [] tvin_end_sample;

        delete [] tvin_stop_on_first;

        delete [] tvin_accept;

        delete [] tvout_ap_return;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

        return AESL_return;

    }
}


