// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bitset_next (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        p_read,
        r_bit,
        r_bucket_index,
        r_bucket,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b0;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] p_read;
input  [7:0] r_bit;
input  [7:0] r_bucket_index;
input  [31:0] r_bucket;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [31:0] ap_return_2;
output  [0:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [0:0] ap_CS_fsm = 1'b0;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [1:0] tmp_fu_131_p1;
reg   [1:0] tmp_reg_214;
wire   [31:0] bus_assign_fu_141_p2;
reg   [31:0] bus_assign_reg_219;
wire   [0:0] tmp_3_fu_147_p2;
reg   [0:0] tmp_3_reg_225;
wire   [7:0] agg_result_bit_write_assign_trunc3_ext_fu_165_p1;
wire   [0:0] tmp_25_1_fu_153_p2;
wire   [0:0] tmp_27_1_fu_159_p2;
wire   [31:0] tmp_i1_p_bsf32_hw_fu_120_bus_r;
wire   [4:0] tmp_i1_p_bsf32_hw_fu_120_ap_return;
wire   [31:0] tmp_i_p_bsf32_hw_fu_126_bus_r;
wire   [4:0] tmp_i_p_bsf32_hw_fu_126_ap_return;
wire   [31:0] ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it0;
reg   [31:0] ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1;
reg   [31:0] agg_result_bucket_write_assign_phi_fu_58_p8;
wire   [0:0] ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it0;
reg   [0:0] ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1;
reg   [0:0] agg_result_end_write_assign_phi_fu_74_p8;
wire   [1:0] ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it0;
reg   [1:0] ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1;
reg   [1:0] agg_result_bucket_index_write_assign_phi_fu_93_p8;
wire   [7:0] ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it0;
reg   [7:0] ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1;
reg   [7:0] agg_result_bit_write_assign_phi_fu_109_p8;
wire   [7:0] agg_result_bit_write_assign_trunc_ext_fu_169_p1;
wire   [31:0] tmp_1_fu_135_p2;
wire   [7:0] agg_result_bucket_index_write_assign_cast_fu_174_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;


p_bsf32_hw tmp_i1_p_bsf32_hw_fu_120(
    .bus_r( tmp_i1_p_bsf32_hw_fu_120_bus_r ),
    .ap_return( tmp_i1_p_bsf32_hw_fu_120_ap_return )
);

p_bsf32_hw tmp_i_p_bsf32_hw_fu_126(
    .bus_r( tmp_i_p_bsf32_hw_fu_126_bus_r ),
    .ap_return( tmp_i_p_bsf32_hw_fu_126_ap_return )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_25_1_fu_153_p2)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & ~(ap_const_lv1_0 == tmp_27_1_fu_159_p2)))) begin
        ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1 <= r_bit;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & (ap_const_lv1_0 == tmp_27_1_fu_159_p2))) begin
        ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1 <= agg_result_bit_write_assign_trunc3_ext_fu_165_p1;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1 <= ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_25_1_fu_153_p2)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & ~(ap_const_lv1_0 == tmp_27_1_fu_159_p2)))) begin
        ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1 <= ap_const_lv2_2;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & (ap_const_lv1_0 == tmp_27_1_fu_159_p2))) begin
        ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1 <= ap_const_lv2_1;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1 <= ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_25_1_fu_153_p2))) begin
        ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1 <= ap_const_lv32_0;
    end else if ((((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & (ap_const_lv1_0 == tmp_27_1_fu_159_p2)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & ~(ap_const_lv1_0 == tmp_27_1_fu_159_p2)))) begin
        ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1 <= p_read;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1 <= ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_25_1_fu_153_p2)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & ~(ap_const_lv1_0 == tmp_27_1_fu_159_p2)))) begin
        ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1 <= ap_const_lv1_1;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce) & ~(tmp_3_fu_147_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_25_1_fu_153_p2) & (ap_const_lv1_0 == tmp_27_1_fu_159_p2))) begin
        ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1 <= ap_const_lv1_0;
    end else if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1 <= ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        bus_assign_reg_219 <= bus_assign_fu_141_p2;
        tmp_3_reg_225 <= tmp_3_fu_147_p2;
        tmp_reg_214 <= tmp_fu_131_p1;
    end
end

/// agg_result_bit_write_assign_phi_fu_109_p8 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or tmp_3_reg_225 or ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1 or agg_result_bit_write_assign_trunc_ext_fu_169_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_225 == ap_const_lv1_0))) begin
        agg_result_bit_write_assign_phi_fu_109_p8 = agg_result_bit_write_assign_trunc_ext_fu_169_p1;
    end else begin
        agg_result_bit_write_assign_phi_fu_109_p8 = ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it1;
    end
end

/// agg_result_bucket_index_write_assign_phi_fu_93_p8 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or tmp_reg_214 or tmp_3_reg_225 or ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_225 == ap_const_lv1_0))) begin
        agg_result_bucket_index_write_assign_phi_fu_93_p8 = tmp_reg_214;
    end else begin
        agg_result_bucket_index_write_assign_phi_fu_93_p8 = ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it1;
    end
end

/// agg_result_bucket_write_assign_phi_fu_58_p8 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or bus_assign_reg_219 or tmp_3_reg_225 or ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_225 == ap_const_lv1_0))) begin
        agg_result_bucket_write_assign_phi_fu_58_p8 = bus_assign_reg_219;
    end else begin
        agg_result_bucket_write_assign_phi_fu_58_p8 = ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it1;
    end
end

/// agg_result_end_write_assign_phi_fu_74_p8 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or tmp_3_reg_225 or ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_225 == ap_const_lv1_0))) begin
        agg_result_end_write_assign_phi_fu_74_p8 = ap_const_lv1_0;
    end else begin
        agg_result_end_write_assign_phi_fu_74_p8 = ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_ce)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign agg_result_bit_write_assign_trunc3_ext_fu_165_p1 = $unsigned(tmp_i1_p_bsf32_hw_fu_120_ap_return);
assign agg_result_bit_write_assign_trunc_ext_fu_169_p1 = $unsigned(tmp_i_p_bsf32_hw_fu_126_ap_return);
assign agg_result_bucket_index_write_assign_cast_fu_174_p1 = $unsigned(agg_result_bucket_index_write_assign_phi_fu_93_p8);
assign ap_reg_phiprechg_agg_result_bit_write_assign_reg_106pp0_it0 = ap_const_lv8_1;
assign ap_reg_phiprechg_agg_result_bucket_index_write_assign_reg_88pp0_it0 = ap_const_lv2_1;
assign ap_reg_phiprechg_agg_result_bucket_write_assign_reg_54pp0_it0 = ap_const_lv32_1;
assign ap_reg_phiprechg_agg_result_end_write_assign_reg_69pp0_it0 = ap_const_lv1_1;
assign ap_reg_ppiten_pp0_it0 = ap_start;
assign ap_return_0 = agg_result_bit_write_assign_phi_fu_109_p8;
assign ap_return_1 = agg_result_bucket_index_write_assign_cast_fu_174_p1;
assign ap_return_2 = agg_result_bucket_write_assign_phi_fu_58_p8;
assign ap_return_3 = agg_result_end_write_assign_phi_fu_74_p8;
assign bus_assign_fu_141_p2 = (tmp_1_fu_135_p2 & r_bucket);
assign tmp_1_fu_135_p2 = (r_bucket + ap_const_lv32_FFFFFFFF);
assign tmp_25_1_fu_153_p2 = (tmp_fu_131_p1 == ap_const_lv2_0? 1'b1: 1'b0);
assign tmp_27_1_fu_159_p2 = (p_read == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_3_fu_147_p2 = (bus_assign_fu_141_p2 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_fu_131_p1 = r_bucket_index[1:0];
assign tmp_i1_p_bsf32_hw_fu_120_bus_r = p_read;
assign tmp_i_p_bsf32_hw_fu_126_bus_r = bus_assign_reg_219;


endmodule //bitset_next

