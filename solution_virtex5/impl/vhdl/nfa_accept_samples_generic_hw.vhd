-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nfa_accept_samples_generic_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nfa_initials_buckets_req_din : OUT STD_LOGIC;
    nfa_initials_buckets_req_full_n : IN STD_LOGIC;
    nfa_initials_buckets_req_write : OUT STD_LOGIC;
    nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
    nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_req_din : OUT STD_LOGIC;
    nfa_finals_buckets_req_full_n : IN STD_LOGIC;
    nfa_finals_buckets_req_write : OUT STD_LOGIC;
    nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
    nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_req_din : OUT STD_LOGIC;
    nfa_forward_buckets_req_full_n : IN STD_LOGIC;
    nfa_forward_buckets_req_write : OUT STD_LOGIC;
    nfa_forward_buckets_rsp_empty_n : IN STD_LOGIC;
    nfa_forward_buckets_rsp_read : OUT STD_LOGIC;
    nfa_forward_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_forward_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    nfa_symbols : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_req_din : OUT STD_LOGIC;
    sample_buffer_req_full_n : IN STD_LOGIC;
    sample_buffer_req_write : OUT STD_LOGIC;
    sample_buffer_rsp_empty_n : IN STD_LOGIC;
    sample_buffer_rsp_read : OUT STD_LOGIC;
    sample_buffer_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_buffer_datain : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_dataout : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_buffer_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_length : IN STD_LOGIC_VECTOR (15 downto 0);
    indices_req_din : OUT STD_LOGIC;
    indices_req_full_n : IN STD_LOGIC;
    indices_req_write : OUT STD_LOGIC;
    indices_rsp_empty_n : IN STD_LOGIC;
    indices_rsp_read : OUT STD_LOGIC;
    indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
    indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
    indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_size : IN STD_LOGIC_VECTOR (15 downto 0);
    begin_index : IN STD_LOGIC_VECTOR (15 downto 0);
    begin_sample : IN STD_LOGIC_VECTOR (15 downto 0);
    end_index : IN STD_LOGIC_VECTOR (15 downto 0);
    end_sample : IN STD_LOGIC_VECTOR (15 downto 0);
    stop_on_first : IN STD_LOGIC_VECTOR (0 downto 0);
    accept : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nfa_accept_samples_generic_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nfa_accept_samples_generic_hw,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc5vlx50tff1136-3,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.000000,HLS_SYN_LAT=53290010,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal stop_on_first_read_read_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_1_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_833 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_buffer_addr_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_847 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_rec_i_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_i_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sym_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_595_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_bit_p_bsf32_hw_fu_509_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal j_bucket_index1_ph_cast_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_ph_cast_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_cast_fu_607_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_i_cast_reg_888 : STD_LOGIC_VECTOR (13 downto 0);
    signal state_fu_626_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_reg_893 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_end_phi_fu_420_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_645_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_i_reg_898 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_bit_reg_910 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_index_reg_915 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bucket_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_buckets_0_1_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_0_1_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buckets_1_1_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_1_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sample_iterator_next_fu_463_ap_start : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_ap_done : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_ap_idle : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_ap_ready : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_req_din : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_req_full_n : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_req_write : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_rsp_empty_n : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_rsp_read : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_indices_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_next_fu_463_indices_datain : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_next_fu_463_indices_dataout : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_next_fu_463_indices_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_next_fu_463_ap_ce : STD_LOGIC;
    signal grp_sample_iterator_next_fu_463_i_index : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_463_i_sample : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_463_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_next_fu_463_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_bitset_next_fu_473_ap_start : STD_LOGIC;
    signal grp_bitset_next_fu_473_ap_done : STD_LOGIC;
    signal grp_bitset_next_fu_473_ap_idle : STD_LOGIC;
    signal grp_bitset_next_fu_473_ap_ready : STD_LOGIC;
    signal grp_bitset_next_fu_473_ap_ce : STD_LOGIC;
    signal grp_bitset_next_fu_473_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_473_r_bit : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_473_r_bucket_index : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_473_r_bucket : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_473_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_473_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bitset_next_fu_473_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitset_next_fu_473_ap_return_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_ap_start : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_ap_done : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_ap_idle : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_ap_ready : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_req_din : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_req_full_n : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_req_write : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_rsp_empty_n : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_rsp_read : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_indices_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_indices_datain : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_indices_dataout : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_indices_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_ap_ce : STD_LOGIC;
    signal grp_sample_iterator_get_offset_fu_485_i_index : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_i_sample : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_sample_buffer_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_sample_length : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iterator_get_offset_fu_485_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_ap_start : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_ap_done : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_ap_idle : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_ap_ready : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_ap_ce : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_nfa_initials_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_initials_fu_497_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_ap_start : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_ap_done : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_ap_idle : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_ap_ready : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_ap_ce : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_din : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_full_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_write : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_empty_n : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_read : STD_LOGIC;
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_datain : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_nfa_finals_buckets_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nfa_get_finals_fu_503_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_bit_p_bsf32_hw_fu_509_bus_r : STD_LOGIC_VECTOR (31 downto 0);
    signal i_index_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_sample_reg_234 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_buckets_1_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal any_0_i_phi_fu_432_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_buckets_0_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_01_rec_i_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal bus_assign_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_1_i_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_bucket_index_0_lcssa4_i_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_bucket1_ph_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_ph_reg_324 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_bit1_ph_reg_335 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_end_ph_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_buckets_1_3_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_buckets_0_3_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket1_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_bucket_index1_reg_397 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_bit1_reg_407 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_end_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal any_0_i_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_13_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sample_iterator_next_fu_463_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_bitset_next_fu_473_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_nfa_get_initials_fu_497_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_nfa_get_finals_fu_503_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal sum_fu_555_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i_cast_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_12_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_610_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_fu_614_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_622_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_fu_639_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i_fu_639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_fu_639_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_i_fu_650_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_i_fu_684_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal current_buckets_1_1_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_buckets_0_1_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_639_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_i_fu_639_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_bdd_366 : BOOLEAN;
    signal ap_sig_bdd_187 : BOOLEAN;

    component sample_iterator_next IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indices_req_din : OUT STD_LOGIC;
        indices_req_full_n : IN STD_LOGIC;
        indices_req_write : OUT STD_LOGIC;
        indices_rsp_empty_n : IN STD_LOGIC;
        indices_rsp_read : OUT STD_LOGIC;
        indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
        indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
        indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        i_index : IN STD_LOGIC_VECTOR (15 downto 0);
        i_sample : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bitset_next IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        r_bit : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket_index : IN STD_LOGIC_VECTOR (7 downto 0);
        r_bucket : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sample_iterator_get_offset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indices_req_din : OUT STD_LOGIC;
        indices_req_full_n : IN STD_LOGIC;
        indices_req_write : OUT STD_LOGIC;
        indices_rsp_empty_n : IN STD_LOGIC;
        indices_rsp_read : OUT STD_LOGIC;
        indices_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        indices_datain : IN STD_LOGIC_VECTOR (55 downto 0);
        indices_dataout : OUT STD_LOGIC_VECTOR (55 downto 0);
        indices_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC;
        i_index : IN STD_LOGIC_VECTOR (15 downto 0);
        i_sample : IN STD_LOGIC_VECTOR (15 downto 0);
        sample_buffer_size : IN STD_LOGIC_VECTOR (31 downto 0);
        sample_length : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_get_initials IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        nfa_initials_buckets_req_din : OUT STD_LOGIC;
        nfa_initials_buckets_req_full_n : IN STD_LOGIC;
        nfa_initials_buckets_req_write : OUT STD_LOGIC;
        nfa_initials_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_initials_buckets_rsp_read : OUT STD_LOGIC;
        nfa_initials_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_initials_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nfa_get_finals IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        nfa_finals_buckets_req_din : OUT STD_LOGIC;
        nfa_finals_buckets_req_full_n : IN STD_LOGIC;
        nfa_finals_buckets_req_write : OUT STD_LOGIC;
        nfa_finals_buckets_rsp_empty_n : IN STD_LOGIC;
        nfa_finals_buckets_rsp_read : OUT STD_LOGIC;
        nfa_finals_buckets_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        nfa_finals_buckets_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_bsf32_hw IS
    port (
        bus_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_sample_iterator_next_fu_463 : component sample_iterator_next
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_iterator_next_fu_463_ap_start,
        ap_done => grp_sample_iterator_next_fu_463_ap_done,
        ap_idle => grp_sample_iterator_next_fu_463_ap_idle,
        ap_ready => grp_sample_iterator_next_fu_463_ap_ready,
        indices_req_din => grp_sample_iterator_next_fu_463_indices_req_din,
        indices_req_full_n => grp_sample_iterator_next_fu_463_indices_req_full_n,
        indices_req_write => grp_sample_iterator_next_fu_463_indices_req_write,
        indices_rsp_empty_n => grp_sample_iterator_next_fu_463_indices_rsp_empty_n,
        indices_rsp_read => grp_sample_iterator_next_fu_463_indices_rsp_read,
        indices_address => grp_sample_iterator_next_fu_463_indices_address,
        indices_datain => grp_sample_iterator_next_fu_463_indices_datain,
        indices_dataout => grp_sample_iterator_next_fu_463_indices_dataout,
        indices_size => grp_sample_iterator_next_fu_463_indices_size,
        ap_ce => grp_sample_iterator_next_fu_463_ap_ce,
        i_index => grp_sample_iterator_next_fu_463_i_index,
        i_sample => grp_sample_iterator_next_fu_463_i_sample,
        ap_return_0 => grp_sample_iterator_next_fu_463_ap_return_0,
        ap_return_1 => grp_sample_iterator_next_fu_463_ap_return_1);

    grp_bitset_next_fu_473 : component bitset_next
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bitset_next_fu_473_ap_start,
        ap_done => grp_bitset_next_fu_473_ap_done,
        ap_idle => grp_bitset_next_fu_473_ap_idle,
        ap_ready => grp_bitset_next_fu_473_ap_ready,
        ap_ce => grp_bitset_next_fu_473_ap_ce,
        p_read => grp_bitset_next_fu_473_p_read,
        r_bit => grp_bitset_next_fu_473_r_bit,
        r_bucket_index => grp_bitset_next_fu_473_r_bucket_index,
        r_bucket => grp_bitset_next_fu_473_r_bucket,
        ap_return_0 => grp_bitset_next_fu_473_ap_return_0,
        ap_return_1 => grp_bitset_next_fu_473_ap_return_1,
        ap_return_2 => grp_bitset_next_fu_473_ap_return_2,
        ap_return_3 => grp_bitset_next_fu_473_ap_return_3);

    grp_sample_iterator_get_offset_fu_485 : component sample_iterator_get_offset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_iterator_get_offset_fu_485_ap_start,
        ap_done => grp_sample_iterator_get_offset_fu_485_ap_done,
        ap_idle => grp_sample_iterator_get_offset_fu_485_ap_idle,
        ap_ready => grp_sample_iterator_get_offset_fu_485_ap_ready,
        indices_req_din => grp_sample_iterator_get_offset_fu_485_indices_req_din,
        indices_req_full_n => grp_sample_iterator_get_offset_fu_485_indices_req_full_n,
        indices_req_write => grp_sample_iterator_get_offset_fu_485_indices_req_write,
        indices_rsp_empty_n => grp_sample_iterator_get_offset_fu_485_indices_rsp_empty_n,
        indices_rsp_read => grp_sample_iterator_get_offset_fu_485_indices_rsp_read,
        indices_address => grp_sample_iterator_get_offset_fu_485_indices_address,
        indices_datain => grp_sample_iterator_get_offset_fu_485_indices_datain,
        indices_dataout => grp_sample_iterator_get_offset_fu_485_indices_dataout,
        indices_size => grp_sample_iterator_get_offset_fu_485_indices_size,
        ap_ce => grp_sample_iterator_get_offset_fu_485_ap_ce,
        i_index => grp_sample_iterator_get_offset_fu_485_i_index,
        i_sample => grp_sample_iterator_get_offset_fu_485_i_sample,
        sample_buffer_size => grp_sample_iterator_get_offset_fu_485_sample_buffer_size,
        sample_length => grp_sample_iterator_get_offset_fu_485_sample_length,
        ap_return => grp_sample_iterator_get_offset_fu_485_ap_return);

    grp_nfa_get_initials_fu_497 : component nfa_get_initials
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_initials_fu_497_ap_start,
        ap_done => grp_nfa_get_initials_fu_497_ap_done,
        ap_idle => grp_nfa_get_initials_fu_497_ap_idle,
        ap_ready => grp_nfa_get_initials_fu_497_ap_ready,
        ap_ce => grp_nfa_get_initials_fu_497_ap_ce,
        nfa_initials_buckets_req_din => grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_din,
        nfa_initials_buckets_req_full_n => grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_full_n,
        nfa_initials_buckets_req_write => grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_write,
        nfa_initials_buckets_rsp_empty_n => grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_empty_n,
        nfa_initials_buckets_rsp_read => grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_read,
        nfa_initials_buckets_address => grp_nfa_get_initials_fu_497_nfa_initials_buckets_address,
        nfa_initials_buckets_datain => grp_nfa_get_initials_fu_497_nfa_initials_buckets_datain,
        nfa_initials_buckets_dataout => grp_nfa_get_initials_fu_497_nfa_initials_buckets_dataout,
        nfa_initials_buckets_size => grp_nfa_get_initials_fu_497_nfa_initials_buckets_size,
        ap_return_0 => grp_nfa_get_initials_fu_497_ap_return_0,
        ap_return_1 => grp_nfa_get_initials_fu_497_ap_return_1);

    grp_nfa_get_finals_fu_503 : component nfa_get_finals
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_nfa_get_finals_fu_503_ap_start,
        ap_done => grp_nfa_get_finals_fu_503_ap_done,
        ap_idle => grp_nfa_get_finals_fu_503_ap_idle,
        ap_ready => grp_nfa_get_finals_fu_503_ap_ready,
        ap_ce => grp_nfa_get_finals_fu_503_ap_ce,
        nfa_finals_buckets_req_din => grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_din,
        nfa_finals_buckets_req_full_n => grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_full_n,
        nfa_finals_buckets_req_write => grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_write,
        nfa_finals_buckets_rsp_empty_n => grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_empty_n,
        nfa_finals_buckets_rsp_read => grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_read,
        nfa_finals_buckets_address => grp_nfa_get_finals_fu_503_nfa_finals_buckets_address,
        nfa_finals_buckets_datain => grp_nfa_get_finals_fu_503_nfa_finals_buckets_datain,
        nfa_finals_buckets_dataout => grp_nfa_get_finals_fu_503_nfa_finals_buckets_dataout,
        nfa_finals_buckets_size => grp_nfa_get_finals_fu_503_nfa_finals_buckets_size,
        ap_return_0 => grp_nfa_get_finals_fu_503_ap_return_0,
        ap_return_1 => grp_nfa_get_finals_fu_503_ap_return_1);

    r_bit_p_bsf32_hw_fu_509 : component p_bsf32_hw
    port map (
        bus_r => r_bit_p_bsf32_hw_fu_509_bus_r,
        ap_return => r_bit_p_bsf32_hw_fu_509_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_bitset_next_fu_473_ap_start_ap_start_reg assign process. --
    grp_bitset_next_fu_473_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bitset_next_fu_473_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_ST_st17_fsm_16 = ap_NS_fsm))) then 
                    grp_bitset_next_fu_473_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bitset_next_fu_473_ap_ready)) then 
                    grp_bitset_next_fu_473_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_nfa_get_finals_fu_503_ap_start_ap_start_reg assign process. --
    grp_nfa_get_finals_fu_503_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_nfa_get_finals_fu_503_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and (ap_ST_st25_fsm_24 = ap_NS_fsm))) then 
                    grp_nfa_get_finals_fu_503_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_nfa_get_finals_fu_503_ap_ready)) then 
                    grp_nfa_get_finals_fu_503_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_nfa_get_initials_fu_497_ap_start_ap_start_reg assign process. --
    grp_nfa_get_initials_fu_497_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_nfa_get_initials_fu_497_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_ST_st3_fsm_2 = ap_NS_fsm))) then 
                    grp_nfa_get_initials_fu_497_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_nfa_get_initials_fu_497_ap_ready)) then 
                    grp_nfa_get_initials_fu_497_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg assign process. --
    grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st6_fsm_5 = ap_NS_fsm) and (ap_ST_st5_fsm_4 = ap_CS_fsm))) then 
                    grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sample_iterator_get_offset_fu_485_ap_ready)) then 
                    grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sample_iterator_next_fu_463_ap_start_ap_start_reg assign process. --
    grp_sample_iterator_next_fu_463_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_iterator_next_fu_463_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_ST_st33_fsm_32 = ap_NS_fsm))) then 
                    grp_sample_iterator_next_fu_463_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sample_iterator_next_fu_463_ap_ready)) then 
                    grp_sample_iterator_next_fu_463_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- agg_result_bucket_index_0_lcssa4_i_reg_298 assign process. --
    agg_result_bucket_index_0_lcssa4_i_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_187) then
                if (ap_sig_bdd_366) then 
                    agg_result_bucket_index_0_lcssa4_i_reg_298 <= ap_const_lv1_1;
                elsif ((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) then 
                    agg_result_bucket_index_0_lcssa4_i_reg_298 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    -- any_0_i_reg_427 assign process. --
    any_0_i_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                any_0_i_reg_427 <= ap_const_lv1_0;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                any_0_i_reg_427 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- bus_assign_reg_286 assign process. --
    bus_assign_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_187) then
                if (ap_sig_bdd_366) then 
                    bus_assign_reg_286 <= next_buckets_1_reg_244;
                elsif ((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) then 
                    bus_assign_reg_286 <= next_buckets_0_reg_254;
                end if;
            end if; 
        end if;
    end process;

    -- c_fu_142 assign process. --
    c_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and (stop_on_first_read_read_fu_152_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = or_cond_fu_744_p2))) then 
                c_fu_142 <= c_1_fu_749_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                c_fu_142 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_0_i_reg_264 assign process. --
    i_0_i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and not((ap_const_lv1_0 = any_0_i_phi_fu_432_p4)))) then 
                i_0_i_reg_264 <= i_reg_847;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                i_0_i_reg_264 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- i_index_reg_224 assign process. --
    i_index_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st36_fsm_35 = ap_CS_fsm)) then 
                i_index_reg_224 <= grp_sample_iterator_next_fu_463_ap_return_0;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_index_reg_224 <= begin_index;
            end if; 
        end if;
    end process;

    -- i_sample_reg_234 assign process. --
    i_sample_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st36_fsm_35 = ap_CS_fsm)) then 
                i_sample_reg_234 <= grp_sample_iterator_next_fu_463_ap_return_1;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_sample_reg_234 <= begin_sample;
            end if; 
        end if;
    end process;

    -- j_bit1_reg_407 assign process. --
    j_bit1_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                j_bit1_reg_407 <= j_bit1_ph_cast_fu_603_p1;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bit1_reg_407 <= j_bit_reg_910;
            end if; 
        end if;
    end process;

    -- j_bucket1_ph_reg_311 assign process. --
    j_bucket1_ph_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                j_bucket1_ph_reg_311 <= bus_assign_reg_286;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) and not((ap_const_lv1_0 = tmp_18_1_i_fu_589_p2)))) then 
                j_bucket1_ph_reg_311 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_bucket1_reg_386 assign process. --
    j_bucket1_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                j_bucket1_reg_386 <= j_bucket1_ph_reg_311;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bucket1_reg_386 <= j_bucket_reg_920;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_ph_reg_324 assign process. --
    j_bucket_index1_ph_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                j_bucket_index1_ph_reg_324 <= agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_595_p1;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) and not((ap_const_lv1_0 = tmp_18_1_i_fu_589_p2)))) then 
                j_bucket_index1_ph_reg_324 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    -- j_bucket_index1_reg_397 assign process. --
    j_bucket_index1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                j_bucket_index1_reg_397 <= j_bucket_index1_ph_cast_fu_599_p1;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_bucket_index1_reg_397 <= j_bucket_index_reg_915;
            end if; 
        end if;
    end process;

    -- j_end_ph_reg_346 assign process. --
    j_end_ph_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                j_end_ph_reg_346 <= ap_const_lv1_0;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) and not((ap_const_lv1_0 = tmp_18_1_i_fu_589_p2)))) then 
                j_end_ph_reg_346 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- j_end_reg_417 assign process. --
    j_end_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                j_end_reg_417 <= j_end_ph_reg_346;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                j_end_reg_417 <= p_s_reg_925;
            end if; 
        end if;
    end process;

    -- next_buckets_0_reg_254 assign process. --
    next_buckets_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and not((ap_const_lv1_0 = any_0_i_phi_fu_432_p4)))) then 
                next_buckets_0_reg_254 <= tmp_buckets_0_3_reg_373;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                next_buckets_0_reg_254 <= current_buckets_0_reg_823;
            end if; 
        end if;
    end process;

    -- next_buckets_1_reg_244 assign process. --
    next_buckets_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and not((ap_const_lv1_0 = any_0_i_phi_fu_432_p4)))) then 
                next_buckets_1_reg_244 <= tmp_buckets_1_3_reg_360;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                next_buckets_1_reg_244 <= current_buckets_1_reg_828;
            end if; 
        end if;
    end process;

    -- p_01_rec_i_reg_275 assign process. --
    p_01_rec_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and not((ap_const_lv1_0 = any_0_i_phi_fu_432_p4)))) then 
                p_01_rec_i_reg_275 <= p_rec_i_reg_852;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                p_01_rec_i_reg_275 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- p_0_reg_451 assign process. --
    p_0_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and not((stop_on_first_read_read_fu_152_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond_fu_744_p2))) then 
                p_0_reg_451 <= ap_const_lv32_1;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_i_13_fu_537_p2)))) then 
                p_0_reg_451 <= c_fu_142;
            end if; 
        end if;
    end process;

    -- r_reg_440 assign process. --
    r_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and (ap_const_lv1_0 = any_0_i_phi_fu_432_p4))) then 
                r_reg_440 <= ap_const_lv1_0;
            elsif ((ap_ST_st31_fsm_30 = ap_CS_fsm)) then 
                r_reg_440 <= tmp_4_fu_738_p2;
            end if; 
        end if;
    end process;

    -- tmp_buckets_0_3_reg_373 assign process. --
    tmp_buckets_0_3_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_373 <= ap_const_lv32_0;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_buckets_0_3_reg_373 <= next_buckets_0_1_reg_936;
            end if; 
        end if;
    end process;

    -- tmp_buckets_1_3_reg_360 assign process. --
    tmp_buckets_1_3_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_360 <= ap_const_lv32_0;
            elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                tmp_buckets_1_3_reg_360 <= next_buckets_1_1_fu_708_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                c_load_reg_814 <= c_fu_142;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                current_buckets_0_reg_823 <= grp_nfa_get_initials_fu_497_ap_return_0;
                current_buckets_1_reg_828 <= grp_nfa_get_initials_fu_497_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                i_reg_847 <= i_fu_571_p2;
                sample_buffer_addr_reg_838 <= sum_fu_555_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then
                j_bit1_ph_reg_335 <= r_bit_p_bsf32_hw_fu_509_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then
                j_bit_reg_910 <= grp_bitset_next_fu_473_ap_return_0;
                j_bucket_index_reg_915 <= grp_bitset_next_fu_473_ap_return_1;
                j_bucket_reg_920 <= grp_bitset_next_fu_473_ap_return_2;
                p_s_reg_925 <= grp_bitset_next_fu_473_ap_return_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then
                next_buckets_0_1_reg_936 <= next_buckets_0_1_fu_702_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((tmp_7_fu_566_p2 = ap_const_lv1_0)))) then
                p_rec_i_reg_852 <= p_rec_i_fu_577_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st23_fsm_22 = ap_CS_fsm)))) then
                reg_515 <= nfa_forward_buckets_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = j_end_phi_fu_420_p4))) then
                state_reg_893 <= state_fu_626_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)))) then
                sym_reg_857 <= sample_buffer_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                tmp_5_i_cast_reg_888(0) <= tmp_5_i_cast_fu_607_p1(0);
    tmp_5_i_cast_reg_888(1) <= tmp_5_i_cast_fu_607_p1(1);
    tmp_5_i_cast_reg_888(2) <= tmp_5_i_cast_fu_607_p1(2);
    tmp_5_i_cast_reg_888(3) <= tmp_5_i_cast_fu_607_p1(3);
    tmp_5_i_cast_reg_888(4) <= tmp_5_i_cast_fu_607_p1(4);
    tmp_5_i_cast_reg_888(5) <= tmp_5_i_cast_fu_607_p1(5);
    tmp_5_i_cast_reg_888(6) <= tmp_5_i_cast_fu_607_p1(6);
    tmp_5_i_cast_reg_888(7) <= tmp_5_i_cast_fu_607_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                tmp_6_i_reg_898 <= tmp_6_i_fu_645_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                tmp_6_reg_833(0) <= tmp_6_fu_551_p1(0);
    tmp_6_reg_833(1) <= tmp_6_fu_551_p1(1);
    tmp_6_reg_833(2) <= tmp_6_fu_551_p1(2);
    tmp_6_reg_833(3) <= tmp_6_fu_551_p1(3);
    tmp_6_reg_833(4) <= tmp_6_fu_551_p1(4);
    tmp_6_reg_833(5) <= tmp_6_fu_551_p1(5);
    tmp_6_reg_833(6) <= tmp_6_fu_551_p1(6);
    tmp_6_reg_833(7) <= tmp_6_fu_551_p1(7);
    tmp_6_reg_833(8) <= tmp_6_fu_551_p1(8);
    tmp_6_reg_833(9) <= tmp_6_fu_551_p1(9);
    tmp_6_reg_833(10) <= tmp_6_fu_551_p1(10);
    tmp_6_reg_833(11) <= tmp_6_fu_551_p1(11);
    tmp_6_reg_833(12) <= tmp_6_fu_551_p1(12);
    tmp_6_reg_833(13) <= tmp_6_fu_551_p1(13);
    tmp_6_reg_833(14) <= tmp_6_fu_551_p1(14);
    tmp_6_reg_833(15) <= tmp_6_fu_551_p1(15);
    tmp_6_reg_833(16) <= tmp_6_fu_551_p1(16);
    tmp_6_reg_833(17) <= tmp_6_fu_551_p1(17);
    tmp_6_reg_833(18) <= tmp_6_fu_551_p1(18);
    tmp_6_reg_833(19) <= tmp_6_fu_551_p1(19);
    tmp_6_reg_833(20) <= tmp_6_fu_551_p1(20);
    tmp_6_reg_833(21) <= tmp_6_fu_551_p1(21);
    tmp_6_reg_833(22) <= tmp_6_fu_551_p1(22);
    tmp_6_reg_833(23) <= tmp_6_fu_551_p1(23);
    tmp_6_reg_833(24) <= tmp_6_fu_551_p1(24);
    tmp_6_reg_833(25) <= tmp_6_fu_551_p1(25);
    tmp_6_reg_833(26) <= tmp_6_fu_551_p1(26);
    tmp_6_reg_833(27) <= tmp_6_fu_551_p1(27);
    tmp_6_reg_833(28) <= tmp_6_fu_551_p1(28);
    tmp_6_reg_833(29) <= tmp_6_fu_551_p1(29);
    tmp_6_reg_833(30) <= tmp_6_fu_551_p1(30);
    tmp_6_reg_833(31) <= tmp_6_fu_551_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then
                tmp_buckets_0_reg_946 <= grp_nfa_get_finals_fu_503_ap_return_0;
                tmp_buckets_1_reg_951 <= grp_nfa_get_finals_fu_503_ap_return_1;
            end if;
        end if;
    end process;
    tmp_6_reg_833(63 downto 32) <= "00000000000000000000000000000000";
    tmp_5_i_cast_reg_888(13 downto 8) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , nfa_forward_buckets_rsp_empty_n , sample_buffer_rsp_empty_n , stop_on_first_read_read_fu_152_p2 , tmp_7_fu_566_p2 , j_end_phi_fu_420_p4 , any_0_i_phi_fu_432_p4 , tmp_18_i_fu_583_p2 , tmp_18_1_i_fu_589_p2 , tmp_i_13_fu_537_p2 , or_cond_fu_744_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = tmp_i_13_fu_537_p2))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if ((tmp_7_fu_566_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if ((not((sample_buffer_rsp_empty_n = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_18_i_fu_583_p2)) and not((ap_const_lv1_0 = tmp_18_1_i_fu_589_p2)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not((sample_buffer_rsp_empty_n = ap_const_logic_0)) and ((ap_const_lv1_0 = tmp_18_i_fu_583_p2) or (ap_const_lv1_0 = tmp_18_1_i_fu_589_p2)))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if ((not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and not((ap_const_lv1_0 = any_0_i_phi_fu_432_p4)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                elsif ((not((ap_const_lv1_0 = j_end_phi_fu_420_p4)) and (ap_const_lv1_0 = any_0_i_phi_fu_432_p4))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                if (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                if ((not((stop_on_first_read_read_fu_152_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond_fu_744_p2))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    agg_result_bucket_index_0_lcssa4_i_cast_cast_fu_595_p1 <= std_logic_vector(resize(unsigned(agg_result_bucket_index_0_lcssa4_i_reg_298),2));
    any_0_i_phi_fu_432_p4 <= any_0_i_reg_427;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st37_fsm_36 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st37_fsm_36 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_451;

    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(ap_CS_fsm, sample_buffer_rsp_empty_n)
    begin
                ap_sig_bdd_187 <= ((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_366 assign process. --
    ap_sig_bdd_366_assign_proc : process(tmp_18_i_fu_583_p2, tmp_18_1_i_fu_589_p2)
    begin
                ap_sig_bdd_366 <= ((ap_const_lv1_0 = tmp_18_1_i_fu_589_p2) and not((ap_const_lv1_0 = tmp_18_i_fu_583_p2)));
    end process;

    c_1_fu_749_p2 <= std_logic_vector(unsigned(c_load_reg_814) + unsigned(ap_const_lv32_1));
    current_buckets_0_1_fu_722_p2 <= (next_buckets_0_reg_254 and tmp_buckets_0_reg_946);
    current_buckets_1_1_fu_727_p2 <= (next_buckets_1_reg_244 and tmp_buckets_1_reg_951);
    grp_bitset_next_fu_473_ap_ce <= ap_const_logic_1;
    grp_bitset_next_fu_473_ap_start <= grp_bitset_next_fu_473_ap_start_ap_start_reg;
    grp_bitset_next_fu_473_p_read <= next_buckets_1_reg_244;
    grp_bitset_next_fu_473_r_bit <= j_bit1_reg_407;
    grp_bitset_next_fu_473_r_bucket <= j_bucket1_reg_386;
    grp_bitset_next_fu_473_r_bucket_index <= j_bucket_index1_reg_397;
    grp_nfa_get_finals_fu_503_ap_ce <= ap_const_logic_1;
    grp_nfa_get_finals_fu_503_ap_start <= grp_nfa_get_finals_fu_503_ap_start_ap_start_reg;
    grp_nfa_get_finals_fu_503_nfa_finals_buckets_datain <= nfa_finals_buckets_datain;
    grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_full_n <= nfa_finals_buckets_req_full_n;
    grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_empty_n <= nfa_finals_buckets_rsp_empty_n;
    grp_nfa_get_initials_fu_497_ap_ce <= ap_const_logic_1;
    grp_nfa_get_initials_fu_497_ap_start <= grp_nfa_get_initials_fu_497_ap_start_ap_start_reg;
    grp_nfa_get_initials_fu_497_nfa_initials_buckets_datain <= nfa_initials_buckets_datain;
    grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_full_n <= nfa_initials_buckets_req_full_n;
    grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_empty_n <= nfa_initials_buckets_rsp_empty_n;
    grp_sample_iterator_get_offset_fu_485_ap_ce <= ap_const_logic_1;
    grp_sample_iterator_get_offset_fu_485_ap_start <= grp_sample_iterator_get_offset_fu_485_ap_start_ap_start_reg;
    grp_sample_iterator_get_offset_fu_485_i_index <= i_index_reg_224;
    grp_sample_iterator_get_offset_fu_485_i_sample <= i_sample_reg_234;
    grp_sample_iterator_get_offset_fu_485_indices_datain <= indices_datain;
    grp_sample_iterator_get_offset_fu_485_indices_req_full_n <= indices_req_full_n;
    grp_sample_iterator_get_offset_fu_485_indices_rsp_empty_n <= indices_rsp_empty_n;
    grp_sample_iterator_get_offset_fu_485_sample_buffer_size <= sample_buffer_length;
    grp_sample_iterator_get_offset_fu_485_sample_length <= sample_length;
    grp_sample_iterator_next_fu_463_ap_ce <= ap_const_logic_1;
    grp_sample_iterator_next_fu_463_ap_start <= grp_sample_iterator_next_fu_463_ap_start_ap_start_reg;
    grp_sample_iterator_next_fu_463_i_index <= i_index_reg_224;
    grp_sample_iterator_next_fu_463_i_sample <= i_sample_reg_234;
    grp_sample_iterator_next_fu_463_indices_datain <= indices_datain;
    grp_sample_iterator_next_fu_463_indices_req_full_n <= indices_req_full_n;
    grp_sample_iterator_next_fu_463_indices_rsp_empty_n <= indices_rsp_empty_n;
    i_fu_571_p2 <= std_logic_vector(unsigned(i_0_i_reg_264) + unsigned(ap_const_lv16_1));

    -- indices_address assign process. --
    indices_address_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_address, grp_sample_iterator_get_offset_fu_485_indices_address)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_address <= grp_sample_iterator_get_offset_fu_485_indices_address;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_address <= grp_sample_iterator_next_fu_463_indices_address;
        else 
            indices_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- indices_dataout assign process. --
    indices_dataout_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_dataout, grp_sample_iterator_get_offset_fu_485_indices_dataout)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_dataout <= grp_sample_iterator_get_offset_fu_485_indices_dataout;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_dataout <= grp_sample_iterator_next_fu_463_indices_dataout;
        else 
            indices_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- indices_req_din assign process. --
    indices_req_din_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_req_din, grp_sample_iterator_get_offset_fu_485_indices_req_din)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_req_din <= grp_sample_iterator_get_offset_fu_485_indices_req_din;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_req_din <= grp_sample_iterator_next_fu_463_indices_req_din;
        else 
            indices_req_din <= 'X';
        end if; 
    end process;


    -- indices_req_write assign process. --
    indices_req_write_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_req_write, grp_sample_iterator_get_offset_fu_485_indices_req_write)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_req_write <= grp_sample_iterator_get_offset_fu_485_indices_req_write;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_req_write <= grp_sample_iterator_next_fu_463_indices_req_write;
        else 
            indices_req_write <= 'X';
        end if; 
    end process;


    -- indices_rsp_read assign process. --
    indices_rsp_read_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_rsp_read, grp_sample_iterator_get_offset_fu_485_indices_rsp_read)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_rsp_read <= grp_sample_iterator_get_offset_fu_485_indices_rsp_read;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_rsp_read <= grp_sample_iterator_next_fu_463_indices_rsp_read;
        else 
            indices_rsp_read <= 'X';
        end if; 
    end process;


    -- indices_size assign process. --
    indices_size_assign_proc : process(ap_CS_fsm, grp_sample_iterator_next_fu_463_indices_size, grp_sample_iterator_get_offset_fu_485_indices_size)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            indices_size <= grp_sample_iterator_get_offset_fu_485_indices_size;
        elsif (((ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm))) then 
            indices_size <= grp_sample_iterator_next_fu_463_indices_size;
        else 
            indices_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    j_bit1_ph_cast_fu_603_p1 <= std_logic_vector(resize(unsigned(j_bit1_ph_reg_335),8));
    j_bucket_index1_ph_cast_fu_599_p1 <= std_logic_vector(resize(unsigned(j_bucket_index1_ph_reg_324),8));
    j_end_phi_fu_420_p4 <= j_end_reg_417;
    next_buckets_0_1_fu_702_p2 <= (reg_515 or tmp_buckets_0_3_reg_373);
    next_buckets_1_1_fu_708_p2 <= (reg_515 or tmp_buckets_1_3_reg_360);
    nfa_finals_buckets_address <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_address;
    nfa_finals_buckets_dataout <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_dataout;
    nfa_finals_buckets_req_din <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_din;
    nfa_finals_buckets_req_write <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_req_write;
    nfa_finals_buckets_rsp_read <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_rsp_read;
    nfa_finals_buckets_size <= grp_nfa_get_finals_fu_503_nfa_finals_buckets_size;

    -- nfa_forward_buckets_address assign process. --
    nfa_forward_buckets_address_assign_proc : process(ap_CS_fsm, tmp_7_i_cast_fu_657_p1, tmp_8_i_cast_fu_691_p1)
    begin
        if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            nfa_forward_buckets_address <= tmp_8_i_cast_fu_691_p1(32 - 1 downto 0);
        elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            nfa_forward_buckets_address <= tmp_7_i_cast_fu_657_p1(32 - 1 downto 0);
        else 
            nfa_forward_buckets_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    nfa_forward_buckets_dataout <= ap_const_lv32_0;
    nfa_forward_buckets_req_din <= ap_const_logic_0;

    -- nfa_forward_buckets_req_write assign process. --
    nfa_forward_buckets_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm))) then 
            nfa_forward_buckets_req_write <= ap_const_logic_1;
        else 
            nfa_forward_buckets_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- nfa_forward_buckets_rsp_read assign process. --
    nfa_forward_buckets_rsp_read_assign_proc : process(ap_CS_fsm, nfa_forward_buckets_rsp_empty_n)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0))) or (not((nfa_forward_buckets_rsp_empty_n = ap_const_logic_0)) and (ap_ST_st23_fsm_22 = ap_CS_fsm)))) then 
            nfa_forward_buckets_rsp_read <= ap_const_logic_1;
        else 
            nfa_forward_buckets_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    nfa_forward_buckets_size <= ap_const_lv32_1;
    nfa_initials_buckets_address <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_address;
    nfa_initials_buckets_dataout <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_dataout;
    nfa_initials_buckets_req_din <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_din;
    nfa_initials_buckets_req_write <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_req_write;
    nfa_initials_buckets_rsp_read <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_rsp_read;
    nfa_initials_buckets_size <= grp_nfa_get_initials_fu_497_nfa_initials_buckets_size;
    or_cond_fu_744_p2 <= (r_reg_440 xor accept);
    p_rec_i_fu_577_p2 <= std_logic_vector(unsigned(p_01_rec_i_reg_275) + unsigned(ap_const_lv64_1));
    r_bit_p_bsf32_hw_fu_509_bus_r <= bus_assign_reg_286;
    sample_buffer_address <= sample_buffer_addr_reg_838;
    sample_buffer_dataout <= ap_const_lv8_0;
    sample_buffer_req_din <= ap_const_logic_0;

    -- sample_buffer_req_write assign process. --
    sample_buffer_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            sample_buffer_req_write <= ap_const_logic_1;
        else 
            sample_buffer_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sample_buffer_rsp_read assign process. --
    sample_buffer_rsp_read_assign_proc : process(ap_CS_fsm, sample_buffer_rsp_empty_n)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((sample_buffer_rsp_empty_n = ap_const_logic_0)))) then 
            sample_buffer_rsp_read <= ap_const_logic_1;
        else 
            sample_buffer_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    sample_buffer_size <= ap_const_lv32_1;
    state_fu_626_p2 <= std_logic_vector(unsigned(tmp_i1_fu_614_p3) + unsigned(tmp_8_fu_622_p1));
    stop_on_first_read_read_fu_152_p2 <= stop_on_first;
    sum_fu_555_p2 <= std_logic_vector(unsigned(p_01_rec_i_reg_275) + unsigned(tmp_6_reg_833));
    tmp_18_1_i_fu_589_p2 <= "1" when (next_buckets_1_reg_244 = ap_const_lv32_0) else "0";
    tmp_18_i_fu_583_p2 <= "1" when (next_buckets_0_reg_254 = ap_const_lv32_0) else "0";
    tmp_1_fu_732_p2 <= (current_buckets_1_1_fu_727_p2 or current_buckets_0_1_fu_722_p2);
    tmp_4_fu_738_p2 <= "0" when (tmp_1_fu_732_p2 = ap_const_lv32_0) else "1";
    tmp_4_i_fu_639_p0 <= tmp_4_i_fu_639_p00(8 - 1 downto 0);
    tmp_4_i_fu_639_p00 <= std_logic_vector(resize(unsigned(nfa_symbols),14));
    tmp_4_i_fu_639_p1 <= tmp_4_i_fu_639_p10(6 - 1 downto 0);
    tmp_4_i_fu_639_p10 <= std_logic_vector(resize(unsigned(state_reg_893),14));
    tmp_4_i_fu_639_p2 <= std_logic_vector(resize(unsigned(tmp_4_i_fu_639_p0) * unsigned(tmp_4_i_fu_639_p1), 14));
    tmp_5_fu_610_p1 <= j_bucket_index1_reg_397(1 - 1 downto 0);
    tmp_5_i_cast_fu_607_p1 <= std_logic_vector(resize(unsigned(sym_reg_857),14));
    tmp_6_fu_551_p1 <= std_logic_vector(resize(unsigned(grp_sample_iterator_get_offset_fu_485_ap_return),64));
    tmp_6_i_fu_645_p2 <= std_logic_vector(unsigned(tmp_4_i_fu_639_p2) + unsigned(tmp_5_i_cast_reg_888));
    tmp_7_fu_566_p2 <= "1" when (unsigned(i_0_i_reg_264) < unsigned(sample_length)) else "0";
    tmp_7_i_cast_fu_657_p1 <= std_logic_vector(resize(unsigned(tmp_7_i_fu_650_p3),64));
    tmp_7_i_fu_650_p3 <= (tmp_6_i_reg_898 & ap_const_lv1_0);
    tmp_8_fu_622_p1 <= j_bit1_reg_407(6 - 1 downto 0);
    tmp_8_i_cast_fu_691_p1 <= std_logic_vector(resize(unsigned(tmp_8_i_fu_684_p3),64));
    tmp_8_i_fu_684_p3 <= (tmp_6_i_reg_898 & ap_const_lv1_1);
    tmp_i1_fu_614_p3 <= (tmp_5_fu_610_p1 & ap_const_lv5_0);
    tmp_i_12_fu_532_p2 <= "1" when (i_index_reg_224 = end_index) else "0";
    tmp_i_13_fu_537_p2 <= (tmp_i_fu_527_p2 and tmp_i_12_fu_532_p2);
    tmp_i_fu_527_p2 <= "1" when (i_sample_reg_234 = end_sample) else "0";
end behav;
