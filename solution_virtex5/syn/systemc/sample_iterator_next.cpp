// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sample_iterator_next.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sample_iterator_next::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sample_iterator_next::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> sample_iterator_next::ap_ST_pp0_stg0_fsm_0 = "0";
const sc_lv<32> sample_iterator_next::ap_const_lv32_1 = "1";
const sc_lv<32> sample_iterator_next::ap_const_lv32_20 = "100000";
const sc_lv<32> sample_iterator_next::ap_const_lv32_2F = "101111";
const sc_lv<17> sample_iterator_next::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<16> sample_iterator_next::ap_const_lv16_1 = "1";
const sc_lv<16> sample_iterator_next::ap_const_lv16_0 = "0000000000000000";
const sc_lv<56> sample_iterator_next::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";

sample_iterator_next::sample_iterator_next(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_index_write_assign_fu_128_p3);
    sensitive << ( ap_reg_ppstg_i_index_read_reg_153_pp0_it2 );
    sensitive << ( tmp_s_fu_104_p2 );
    sensitive << ( tmp_2_fu_110_p2 );

    SC_METHOD(thread_agg_result_sample_write_assign_fu_120_p3);
    sensitive << ( tmp_s_fu_104_p2 );
    sensitive << ( tmp_1_fu_115_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( agg_result_index_write_assign_fu_128_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( agg_result_sample_write_assign_fu_120_p3 );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_indices_address);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( tmp_7_fu_67_p1 );

    SC_METHOD(thread_indices_dataout);

    SC_METHOD(thread_indices_req_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_req_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_rsp_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_indices_size);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );

    SC_METHOD(thread_tmp_1_fu_115_p2);
    sensitive << ( ap_reg_ppstg_i_sample_read_reg_147_pp0_it2 );

    SC_METHOD(thread_tmp_2_fu_110_p2);
    sensitive << ( ap_reg_ppstg_i_index_read_reg_153_pp0_it2 );

    SC_METHOD(thread_tmp_7_fu_67_p1);
    sensitive << ( i_index );

    SC_METHOD(thread_tmp_8_cast_fu_91_p1);
    sensitive << ( indices_samples_load_new5_reg_165 );

    SC_METHOD(thread_tmp_9_fu_94_p2);
    sensitive << ( tmp_8_cast_fu_91_p1 );

    SC_METHOD(thread_tmp_cast_fu_88_p1);
    sensitive << ( ap_reg_ppstg_i_sample_read_reg_147_pp0_it2 );

    SC_METHOD(thread_tmp_s_fu_104_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( tmp_9_fu_94_p2 );

    SC_METHOD(thread_tmp_s_fu_104_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( tmp_cast_fu_88_p1 );
    sensitive << ( tmp_s_fu_104_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( indices_rsp_empty_n );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_pprstidle_pp0 );

    ap_CS_fsm = "0";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sample_iterator_next_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indices_req_din, "(port)indices_req_din");
    sc_trace(mVcdFile, indices_req_full_n, "(port)indices_req_full_n");
    sc_trace(mVcdFile, indices_req_write, "(port)indices_req_write");
    sc_trace(mVcdFile, indices_rsp_empty_n, "(port)indices_rsp_empty_n");
    sc_trace(mVcdFile, indices_rsp_read, "(port)indices_rsp_read");
    sc_trace(mVcdFile, indices_address, "(port)indices_address");
    sc_trace(mVcdFile, indices_datain, "(port)indices_datain");
    sc_trace(mVcdFile, indices_dataout, "(port)indices_dataout");
    sc_trace(mVcdFile, indices_size, "(port)indices_size");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, i_index, "(port)i_index");
    sc_trace(mVcdFile, i_sample, "(port)i_sample");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, i_sample_read_reg_147, "i_sample_read_reg_147");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_147_pp0_it1, "ap_reg_ppstg_i_sample_read_reg_147_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_i_sample_read_reg_147_pp0_it2, "ap_reg_ppstg_i_sample_read_reg_147_pp0_it2");
    sc_trace(mVcdFile, i_index_read_reg_153, "i_index_read_reg_153");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_153_pp0_it1, "ap_reg_ppstg_i_index_read_reg_153_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_i_index_read_reg_153_pp0_it2, "ap_reg_ppstg_i_index_read_reg_153_pp0_it2");
    sc_trace(mVcdFile, indices_samples_load_new5_reg_165, "indices_samples_load_new5_reg_165");
    sc_trace(mVcdFile, tmp_7_fu_67_p1, "tmp_7_fu_67_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_91_p1, "tmp_8_cast_fu_91_p1");
    sc_trace(mVcdFile, tmp_9_fu_94_p2, "tmp_9_fu_94_p2");
    sc_trace(mVcdFile, tmp_cast_fu_88_p1, "tmp_cast_fu_88_p1");
    sc_trace(mVcdFile, tmp_s_fu_104_p1, "tmp_s_fu_104_p1");
    sc_trace(mVcdFile, tmp_s_fu_104_p2, "tmp_s_fu_104_p2");
    sc_trace(mVcdFile, tmp_1_fu_115_p2, "tmp_1_fu_115_p2");
    sc_trace(mVcdFile, tmp_2_fu_110_p2, "tmp_2_fu_110_p2");
    sc_trace(mVcdFile, agg_result_index_write_assign_fu_128_p3, "agg_result_index_write_assign_fu_128_p3");
    sc_trace(mVcdFile, agg_result_sample_write_assign_fu_120_p3, "agg_result_sample_write_assign_fu_120_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
#endif

    }
}

sample_iterator_next::~sample_iterator_next() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sample_iterator_next::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_reg_ppstg_i_index_read_reg_153_pp0_it1 = i_index_read_reg_153.read();
        ap_reg_ppstg_i_index_read_reg_153_pp0_it2 = ap_reg_ppstg_i_index_read_reg_153_pp0_it1.read();
        ap_reg_ppstg_i_sample_read_reg_147_pp0_it1 = i_sample_read_reg_147.read();
        ap_reg_ppstg_i_sample_read_reg_147_pp0_it2 = ap_reg_ppstg_i_sample_read_reg_147_pp0_it1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        i_index_read_reg_153 = i_index.read();
        i_sample_read_reg_147 = i_sample.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_samples_load_new5_reg_165 = indices_datain.read().range(47, 32);
    }
}

void sample_iterator_next::thread_agg_result_index_write_assign_fu_128_p3() {
    agg_result_index_write_assign_fu_128_p3 = (!tmp_s_fu_104_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_104_p2.read()[0].to_bool())? ap_reg_ppstg_i_index_read_reg_153_pp0_it2.read(): tmp_2_fu_110_p2.read());
}

void sample_iterator_next::thread_agg_result_sample_write_assign_fu_120_p3() {
    agg_result_sample_write_assign_fu_120_p3 = (!tmp_s_fu_104_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_104_p2.read()[0].to_bool())? tmp_1_fu_115_p2.read(): ap_const_lv16_0);
}

void sample_iterator_next::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it3.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it3.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void sample_iterator_next::thread_ap_return_0() {
    ap_return_0 = agg_result_index_write_assign_fu_128_p3.read();
}

void sample_iterator_next::thread_ap_return_1() {
    ap_return_1 = agg_result_sample_write_assign_fu_120_p3.read();
}

void sample_iterator_next::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_address() {
    indices_address =  (sc_lv<32>) (tmp_7_fu_67_p1.read());
}

void sample_iterator_next::thread_indices_dataout() {
    indices_dataout = ap_const_lv56_0;
}

void sample_iterator_next::thread_indices_req_din() {
    indices_req_din = ap_const_logic_0;
}

void sample_iterator_next::thread_indices_req_write() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_req_write = ap_const_logic_1;
    } else {
        indices_req_write = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  esl_seteq<1,1,1>(indices_rsp_empty_n.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        indices_rsp_read = ap_const_logic_1;
    } else {
        indices_rsp_read = ap_const_logic_0;
    }
}

void sample_iterator_next::thread_indices_size() {
    indices_size = ap_const_lv32_1;
}

void sample_iterator_next::thread_tmp_1_fu_115_p2() {
    tmp_1_fu_115_p2 = (!ap_reg_ppstg_i_sample_read_reg_147_pp0_it2.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(ap_reg_ppstg_i_sample_read_reg_147_pp0_it2.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void sample_iterator_next::thread_tmp_2_fu_110_p2() {
    tmp_2_fu_110_p2 = (!ap_reg_ppstg_i_index_read_reg_153_pp0_it2.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(ap_reg_ppstg_i_index_read_reg_153_pp0_it2.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void sample_iterator_next::thread_tmp_7_fu_67_p1() {
    tmp_7_fu_67_p1 = esl_zext<64,16>(i_index.read());
}

void sample_iterator_next::thread_tmp_8_cast_fu_91_p1() {
    tmp_8_cast_fu_91_p1 = esl_zext<17,16>(indices_samples_load_new5_reg_165.read());
}

void sample_iterator_next::thread_tmp_9_fu_94_p2() {
    tmp_9_fu_94_p2 = (!tmp_8_cast_fu_91_p1.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_bigint<17>(tmp_8_cast_fu_91_p1.read()) + sc_biguint<17>(ap_const_lv17_1FFFF));
}

void sample_iterator_next::thread_tmp_cast_fu_88_p1() {
    tmp_cast_fu_88_p1 = esl_zext<18,16>(ap_reg_ppstg_i_sample_read_reg_147_pp0_it2.read());
}

void sample_iterator_next::thread_tmp_s_fu_104_p1() {
    tmp_s_fu_104_p1 = esl_sext<18,17>(tmp_9_fu_94_p2.read());
}

void sample_iterator_next::thread_tmp_s_fu_104_p2() {
    tmp_s_fu_104_p2 = (!tmp_cast_fu_88_p1.read().is_01() || !tmp_s_fu_104_p1.read().is_01())? sc_lv<1>(): (sc_bigint<18>(tmp_cast_fu_88_p1.read()) < sc_bigint<18>(tmp_s_fu_104_p1.read()));
}

void sample_iterator_next::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}
}

