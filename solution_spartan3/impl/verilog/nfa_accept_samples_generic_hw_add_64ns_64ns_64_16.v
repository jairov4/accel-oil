// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2(clk, reset, ce, a, b, s);

// ---- input/output ports list here ----
input clk;
input reset;
input ce;
input [64 - 1 : 0] a;
input [64 - 1 : 0] b;
output [64 - 1 : 0] s;

// ---- register and wire type variables list here ----

// wire for the primary inputs
wire [64 - 1 : 0] a_reg;
wire [64 - 1 : 0] b_reg;

// wires for each small adder
wire [4 - 1 : 0] a0_cb;
wire [4 - 1 : 0] b0_cb;
wire [8 - 1 : 4] a1_cb;
wire [8 - 1 : 4] b1_cb;
wire [12 - 1 : 8] a2_cb;
wire [12 - 1 : 8] b2_cb;
wire [16 - 1 : 12] a3_cb;
wire [16 - 1 : 12] b3_cb;
wire [20 - 1 : 16] a4_cb;
wire [20 - 1 : 16] b4_cb;
wire [24 - 1 : 20] a5_cb;
wire [24 - 1 : 20] b5_cb;
wire [28 - 1 : 24] a6_cb;
wire [28 - 1 : 24] b6_cb;
wire [32 - 1 : 28] a7_cb;
wire [32 - 1 : 28] b7_cb;
wire [36 - 1 : 32] a8_cb;
wire [36 - 1 : 32] b8_cb;
wire [40 - 1 : 36] a9_cb;
wire [40 - 1 : 36] b9_cb;
wire [44 - 1 : 40] a10_cb;
wire [44 - 1 : 40] b10_cb;
wire [48 - 1 : 44] a11_cb;
wire [48 - 1 : 44] b11_cb;
wire [52 - 1 : 48] a12_cb;
wire [52 - 1 : 48] b12_cb;
wire [56 - 1 : 52] a13_cb;
wire [56 - 1 : 52] b13_cb;
wire [60 - 1 : 56] a14_cb;
wire [60 - 1 : 56] b14_cb;
wire [64 - 1 : 60] a15_cb;
wire [64 - 1 : 60] b15_cb;

// registers for input register array
reg [4 - 1 : 0] a1_cb_regi1[1 - 1 : 0]; 
reg [4 - 1 : 0] b1_cb_regi1[1 - 1 : 0]; 
reg [4 - 1 : 0] a2_cb_regi2[2 - 1 : 0]; 
reg [4 - 1 : 0] b2_cb_regi2[2 - 1 : 0]; 
reg [4 - 1 : 0] a3_cb_regi3[3 - 1 : 0]; 
reg [4 - 1 : 0] b3_cb_regi3[3 - 1 : 0]; 
reg [4 - 1 : 0] a4_cb_regi4[4 - 1 : 0]; 
reg [4 - 1 : 0] b4_cb_regi4[4 - 1 : 0]; 
reg [4 - 1 : 0] a5_cb_regi5[5 - 1 : 0]; 
reg [4 - 1 : 0] b5_cb_regi5[5 - 1 : 0]; 
reg [4 - 1 : 0] a6_cb_regi6[6 - 1 : 0]; 
reg [4 - 1 : 0] b6_cb_regi6[6 - 1 : 0]; 
reg [4 - 1 : 0] a7_cb_regi7[7 - 1 : 0]; 
reg [4 - 1 : 0] b7_cb_regi7[7 - 1 : 0]; 
reg [4 - 1 : 0] a8_cb_regi8[8 - 1 : 0]; 
reg [4 - 1 : 0] b8_cb_regi8[8 - 1 : 0]; 
reg [4 - 1 : 0] a9_cb_regi9[9 - 1 : 0]; 
reg [4 - 1 : 0] b9_cb_regi9[9 - 1 : 0]; 
reg [4 - 1 : 0] a10_cb_regi10[10 - 1 : 0]; 
reg [4 - 1 : 0] b10_cb_regi10[10 - 1 : 0]; 
reg [4 - 1 : 0] a11_cb_regi11[11 - 1 : 0]; 
reg [4 - 1 : 0] b11_cb_regi11[11 - 1 : 0]; 
reg [4 - 1 : 0] a12_cb_regi12[12 - 1 : 0]; 
reg [4 - 1 : 0] b12_cb_regi12[12 - 1 : 0]; 
reg [4 - 1 : 0] a13_cb_regi13[13 - 1 : 0]; 
reg [4 - 1 : 0] b13_cb_regi13[13 - 1 : 0]; 
reg [4 - 1 : 0] a14_cb_regi14[14 - 1 : 0]; 
reg [4 - 1 : 0] b14_cb_regi14[14 - 1 : 0]; 
reg [4 - 1 : 0] a15_cb_regi15[15 - 1 : 0];
reg [4 - 1 : 0] b15_cb_regi15[15 - 1 : 0];

// wires for each full adder sum
wire [64 - 1 : 0] fas;

// wires and register for carry out bit
wire faccout_ini;
wire faccout0_co0; 
wire faccout1_co1; 
wire faccout2_co2; 
wire faccout3_co3; 
wire faccout4_co4; 
wire faccout5_co5; 
wire faccout6_co6; 
wire faccout7_co7; 
wire faccout8_co8; 
wire faccout9_co9; 
wire faccout10_co10; 
wire faccout11_co11; 
wire faccout12_co12; 
wire faccout13_co13; 
wire faccout14_co14; 
wire faccout15_co15;

reg faccout0_co0_reg; 
reg faccout1_co1_reg; 
reg faccout2_co2_reg; 
reg faccout3_co3_reg; 
reg faccout4_co4_reg; 
reg faccout5_co5_reg; 
reg faccout6_co6_reg; 
reg faccout7_co7_reg; 
reg faccout8_co8_reg; 
reg faccout9_co9_reg; 
reg faccout10_co10_reg; 
reg faccout11_co11_reg; 
reg faccout12_co12_reg; 
reg faccout13_co13_reg; 
reg faccout14_co14_reg; 

// registers for output register array
reg [4 - 1 : 0] s0_ca_rego0[14 - 0 : 0]; 
reg [4 - 1 : 0] s1_ca_rego1[14 - 1 : 0]; 
reg [4 - 1 : 0] s2_ca_rego2[14 - 2 : 0]; 
reg [4 - 1 : 0] s3_ca_rego3[14 - 3 : 0]; 
reg [4 - 1 : 0] s4_ca_rego4[14 - 4 : 0]; 
reg [4 - 1 : 0] s5_ca_rego5[14 - 5 : 0]; 
reg [4 - 1 : 0] s6_ca_rego6[14 - 6 : 0]; 
reg [4 - 1 : 0] s7_ca_rego7[14 - 7 : 0]; 
reg [4 - 1 : 0] s8_ca_rego8[14 - 8 : 0]; 
reg [4 - 1 : 0] s9_ca_rego9[14 - 9 : 0]; 
reg [4 - 1 : 0] s10_ca_rego10[14 - 10 : 0]; 
reg [4 - 1 : 0] s11_ca_rego11[14 - 11 : 0]; 
reg [4 - 1 : 0] s12_ca_rego12[14 - 12 : 0]; 
reg [4 - 1 : 0] s13_ca_rego13[14 - 13 : 0]; 
reg [4 - 1 : 0] s14_ca_rego14[14 - 14 : 0]; 

// wire for the temporary output
wire [64 - 1 : 0] s_tmp;

// ---- RTL code for assignment statements/always blocks/module instantiations here ----
assign a_reg = a;
assign b_reg = b;

// small adder input assigments
assign a0_cb = a_reg[4 - 1 : 0];
assign b0_cb = b_reg[4 - 1 : 0];
assign a1_cb = a_reg[8 - 1 : 4];
assign b1_cb = b_reg[8 - 1 : 4];
assign a2_cb = a_reg[12 - 1 : 8];
assign b2_cb = b_reg[12 - 1 : 8];
assign a3_cb = a_reg[16 - 1 : 12];
assign b3_cb = b_reg[16 - 1 : 12];
assign a4_cb = a_reg[20 - 1 : 16];
assign b4_cb = b_reg[20 - 1 : 16];
assign a5_cb = a_reg[24 - 1 : 20];
assign b5_cb = b_reg[24 - 1 : 20];
assign a6_cb = a_reg[28 - 1 : 24];
assign b6_cb = b_reg[28 - 1 : 24];
assign a7_cb = a_reg[32 - 1 : 28];
assign b7_cb = b_reg[32 - 1 : 28];
assign a8_cb = a_reg[36 - 1 : 32];
assign b8_cb = b_reg[36 - 1 : 32];
assign a9_cb = a_reg[40 - 1 : 36];
assign b9_cb = b_reg[40 - 1 : 36];
assign a10_cb = a_reg[44 - 1 : 40];
assign b10_cb = b_reg[44 - 1 : 40];
assign a11_cb = a_reg[48 - 1 : 44];
assign b11_cb = b_reg[48 - 1 : 44];
assign a12_cb = a_reg[52 - 1 : 48];
assign b12_cb = b_reg[52 - 1 : 48];
assign a13_cb = a_reg[56 - 1 : 52];
assign b13_cb = b_reg[56 - 1 : 52];
assign a14_cb = a_reg[60 - 1 : 56];
assign b14_cb = b_reg[60 - 1 : 56];
assign a15_cb = a_reg[64 - 1 : 60];
assign b15_cb = b_reg[64 - 1 : 60];

// input register array
always @ (posedge clk) begin
    if (ce) begin
        a1_cb_regi1 [0] <= a1_cb;
        b1_cb_regi1 [0] <= b1_cb;
        a2_cb_regi2 [0] <= a2_cb;
        b2_cb_regi2 [0] <= b2_cb;
        a3_cb_regi3 [0] <= a3_cb;
        b3_cb_regi3 [0] <= b3_cb;
        a4_cb_regi4 [0] <= a4_cb;
        b4_cb_regi4 [0] <= b4_cb;
        a5_cb_regi5 [0] <= a5_cb;
        b5_cb_regi5 [0] <= b5_cb;
        a6_cb_regi6 [0] <= a6_cb;
        b6_cb_regi6 [0] <= b6_cb;
        a7_cb_regi7 [0] <= a7_cb;
        b7_cb_regi7 [0] <= b7_cb;
        a8_cb_regi8 [0] <= a8_cb;
        b8_cb_regi8 [0] <= b8_cb;
        a9_cb_regi9 [0] <= a9_cb;
        b9_cb_regi9 [0] <= b9_cb;
        a10_cb_regi10 [0] <= a10_cb;
        b10_cb_regi10 [0] <= b10_cb;
        a11_cb_regi11 [0] <= a11_cb;
        b11_cb_regi11 [0] <= b11_cb;
        a12_cb_regi12 [0] <= a12_cb;
        b12_cb_regi12 [0] <= b12_cb;
        a13_cb_regi13 [0] <= a13_cb;
        b13_cb_regi13 [0] <= b13_cb;
        a14_cb_regi14 [0] <= a14_cb;
        b14_cb_regi14 [0] <= b14_cb;
        a15_cb_regi15 [0] <= a15_cb;
        b15_cb_regi15 [0] <= b15_cb;
        a2_cb_regi2 [1] <= a2_cb_regi2 [0];
        b2_cb_regi2 [1] <= b2_cb_regi2 [0];
        a3_cb_regi3 [1] <= a3_cb_regi3 [0];
        b3_cb_regi3 [1] <= b3_cb_regi3 [0];
        a4_cb_regi4 [1] <= a4_cb_regi4 [0];
        b4_cb_regi4 [1] <= b4_cb_regi4 [0];
        a5_cb_regi5 [1] <= a5_cb_regi5 [0];
        b5_cb_regi5 [1] <= b5_cb_regi5 [0];
        a6_cb_regi6 [1] <= a6_cb_regi6 [0];
        b6_cb_regi6 [1] <= b6_cb_regi6 [0];
        a7_cb_regi7 [1] <= a7_cb_regi7 [0];
        b7_cb_regi7 [1] <= b7_cb_regi7 [0];
        a8_cb_regi8 [1] <= a8_cb_regi8 [0];
        b8_cb_regi8 [1] <= b8_cb_regi8 [0];
        a9_cb_regi9 [1] <= a9_cb_regi9 [0];
        b9_cb_regi9 [1] <= b9_cb_regi9 [0];
        a10_cb_regi10 [1] <= a10_cb_regi10 [0];
        b10_cb_regi10 [1] <= b10_cb_regi10 [0];
        a11_cb_regi11 [1] <= a11_cb_regi11 [0];
        b11_cb_regi11 [1] <= b11_cb_regi11 [0];
        a12_cb_regi12 [1] <= a12_cb_regi12 [0];
        b12_cb_regi12 [1] <= b12_cb_regi12 [0];
        a13_cb_regi13 [1] <= a13_cb_regi13 [0];
        b13_cb_regi13 [1] <= b13_cb_regi13 [0];
        a14_cb_regi14 [1] <= a14_cb_regi14 [0];
        b14_cb_regi14 [1] <= b14_cb_regi14 [0];
        a15_cb_regi15 [1] <= a15_cb_regi15 [0];
        b15_cb_regi15 [1] <= b15_cb_regi15 [0];
        a3_cb_regi3 [2] <= a3_cb_regi3 [1];
        b3_cb_regi3 [2] <= b3_cb_regi3 [1];
        a4_cb_regi4 [2] <= a4_cb_regi4 [1];
        b4_cb_regi4 [2] <= b4_cb_regi4 [1];
        a5_cb_regi5 [2] <= a5_cb_regi5 [1];
        b5_cb_regi5 [2] <= b5_cb_regi5 [1];
        a6_cb_regi6 [2] <= a6_cb_regi6 [1];
        b6_cb_regi6 [2] <= b6_cb_regi6 [1];
        a7_cb_regi7 [2] <= a7_cb_regi7 [1];
        b7_cb_regi7 [2] <= b7_cb_regi7 [1];
        a8_cb_regi8 [2] <= a8_cb_regi8 [1];
        b8_cb_regi8 [2] <= b8_cb_regi8 [1];
        a9_cb_regi9 [2] <= a9_cb_regi9 [1];
        b9_cb_regi9 [2] <= b9_cb_regi9 [1];
        a10_cb_regi10 [2] <= a10_cb_regi10 [1];
        b10_cb_regi10 [2] <= b10_cb_regi10 [1];
        a11_cb_regi11 [2] <= a11_cb_regi11 [1];
        b11_cb_regi11 [2] <= b11_cb_regi11 [1];
        a12_cb_regi12 [2] <= a12_cb_regi12 [1];
        b12_cb_regi12 [2] <= b12_cb_regi12 [1];
        a13_cb_regi13 [2] <= a13_cb_regi13 [1];
        b13_cb_regi13 [2] <= b13_cb_regi13 [1];
        a14_cb_regi14 [2] <= a14_cb_regi14 [1];
        b14_cb_regi14 [2] <= b14_cb_regi14 [1];
        a15_cb_regi15 [2] <= a15_cb_regi15 [1];
        b15_cb_regi15 [2] <= b15_cb_regi15 [1];
        a4_cb_regi4 [3] <= a4_cb_regi4 [2];
        b4_cb_regi4 [3] <= b4_cb_regi4 [2];
        a5_cb_regi5 [3] <= a5_cb_regi5 [2];
        b5_cb_regi5 [3] <= b5_cb_regi5 [2];
        a6_cb_regi6 [3] <= a6_cb_regi6 [2];
        b6_cb_regi6 [3] <= b6_cb_regi6 [2];
        a7_cb_regi7 [3] <= a7_cb_regi7 [2];
        b7_cb_regi7 [3] <= b7_cb_regi7 [2];
        a8_cb_regi8 [3] <= a8_cb_regi8 [2];
        b8_cb_regi8 [3] <= b8_cb_regi8 [2];
        a9_cb_regi9 [3] <= a9_cb_regi9 [2];
        b9_cb_regi9 [3] <= b9_cb_regi9 [2];
        a10_cb_regi10 [3] <= a10_cb_regi10 [2];
        b10_cb_regi10 [3] <= b10_cb_regi10 [2];
        a11_cb_regi11 [3] <= a11_cb_regi11 [2];
        b11_cb_regi11 [3] <= b11_cb_regi11 [2];
        a12_cb_regi12 [3] <= a12_cb_regi12 [2];
        b12_cb_regi12 [3] <= b12_cb_regi12 [2];
        a13_cb_regi13 [3] <= a13_cb_regi13 [2];
        b13_cb_regi13 [3] <= b13_cb_regi13 [2];
        a14_cb_regi14 [3] <= a14_cb_regi14 [2];
        b14_cb_regi14 [3] <= b14_cb_regi14 [2];
        a15_cb_regi15 [3] <= a15_cb_regi15 [2];
        b15_cb_regi15 [3] <= b15_cb_regi15 [2];
        a5_cb_regi5 [4] <= a5_cb_regi5 [3];
        b5_cb_regi5 [4] <= b5_cb_regi5 [3];
        a6_cb_regi6 [4] <= a6_cb_regi6 [3];
        b6_cb_regi6 [4] <= b6_cb_regi6 [3];
        a7_cb_regi7 [4] <= a7_cb_regi7 [3];
        b7_cb_regi7 [4] <= b7_cb_regi7 [3];
        a8_cb_regi8 [4] <= a8_cb_regi8 [3];
        b8_cb_regi8 [4] <= b8_cb_regi8 [3];
        a9_cb_regi9 [4] <= a9_cb_regi9 [3];
        b9_cb_regi9 [4] <= b9_cb_regi9 [3];
        a10_cb_regi10 [4] <= a10_cb_regi10 [3];
        b10_cb_regi10 [4] <= b10_cb_regi10 [3];
        a11_cb_regi11 [4] <= a11_cb_regi11 [3];
        b11_cb_regi11 [4] <= b11_cb_regi11 [3];
        a12_cb_regi12 [4] <= a12_cb_regi12 [3];
        b12_cb_regi12 [4] <= b12_cb_regi12 [3];
        a13_cb_regi13 [4] <= a13_cb_regi13 [3];
        b13_cb_regi13 [4] <= b13_cb_regi13 [3];
        a14_cb_regi14 [4] <= a14_cb_regi14 [3];
        b14_cb_regi14 [4] <= b14_cb_regi14 [3];
        a15_cb_regi15 [4] <= a15_cb_regi15 [3];
        b15_cb_regi15 [4] <= b15_cb_regi15 [3];
        a6_cb_regi6 [5] <= a6_cb_regi6 [4];
        b6_cb_regi6 [5] <= b6_cb_regi6 [4];
        a7_cb_regi7 [5] <= a7_cb_regi7 [4];
        b7_cb_regi7 [5] <= b7_cb_regi7 [4];
        a8_cb_regi8 [5] <= a8_cb_regi8 [4];
        b8_cb_regi8 [5] <= b8_cb_regi8 [4];
        a9_cb_regi9 [5] <= a9_cb_regi9 [4];
        b9_cb_regi9 [5] <= b9_cb_regi9 [4];
        a10_cb_regi10 [5] <= a10_cb_regi10 [4];
        b10_cb_regi10 [5] <= b10_cb_regi10 [4];
        a11_cb_regi11 [5] <= a11_cb_regi11 [4];
        b11_cb_regi11 [5] <= b11_cb_regi11 [4];
        a12_cb_regi12 [5] <= a12_cb_regi12 [4];
        b12_cb_regi12 [5] <= b12_cb_regi12 [4];
        a13_cb_regi13 [5] <= a13_cb_regi13 [4];
        b13_cb_regi13 [5] <= b13_cb_regi13 [4];
        a14_cb_regi14 [5] <= a14_cb_regi14 [4];
        b14_cb_regi14 [5] <= b14_cb_regi14 [4];
        a15_cb_regi15 [5] <= a15_cb_regi15 [4];
        b15_cb_regi15 [5] <= b15_cb_regi15 [4];
        a7_cb_regi7 [6] <= a7_cb_regi7 [5];
        b7_cb_regi7 [6] <= b7_cb_regi7 [5];
        a8_cb_regi8 [6] <= a8_cb_regi8 [5];
        b8_cb_regi8 [6] <= b8_cb_regi8 [5];
        a9_cb_regi9 [6] <= a9_cb_regi9 [5];
        b9_cb_regi9 [6] <= b9_cb_regi9 [5];
        a10_cb_regi10 [6] <= a10_cb_regi10 [5];
        b10_cb_regi10 [6] <= b10_cb_regi10 [5];
        a11_cb_regi11 [6] <= a11_cb_regi11 [5];
        b11_cb_regi11 [6] <= b11_cb_regi11 [5];
        a12_cb_regi12 [6] <= a12_cb_regi12 [5];
        b12_cb_regi12 [6] <= b12_cb_regi12 [5];
        a13_cb_regi13 [6] <= a13_cb_regi13 [5];
        b13_cb_regi13 [6] <= b13_cb_regi13 [5];
        a14_cb_regi14 [6] <= a14_cb_regi14 [5];
        b14_cb_regi14 [6] <= b14_cb_regi14 [5];
        a15_cb_regi15 [6] <= a15_cb_regi15 [5];
        b15_cb_regi15 [6] <= b15_cb_regi15 [5];
        a8_cb_regi8 [7] <= a8_cb_regi8 [6];
        b8_cb_regi8 [7] <= b8_cb_regi8 [6];
        a9_cb_regi9 [7] <= a9_cb_regi9 [6];
        b9_cb_regi9 [7] <= b9_cb_regi9 [6];
        a10_cb_regi10 [7] <= a10_cb_regi10 [6];
        b10_cb_regi10 [7] <= b10_cb_regi10 [6];
        a11_cb_regi11 [7] <= a11_cb_regi11 [6];
        b11_cb_regi11 [7] <= b11_cb_regi11 [6];
        a12_cb_regi12 [7] <= a12_cb_regi12 [6];
        b12_cb_regi12 [7] <= b12_cb_regi12 [6];
        a13_cb_regi13 [7] <= a13_cb_regi13 [6];
        b13_cb_regi13 [7] <= b13_cb_regi13 [6];
        a14_cb_regi14 [7] <= a14_cb_regi14 [6];
        b14_cb_regi14 [7] <= b14_cb_regi14 [6];
        a15_cb_regi15 [7] <= a15_cb_regi15 [6];
        b15_cb_regi15 [7] <= b15_cb_regi15 [6];
        a9_cb_regi9 [8] <= a9_cb_regi9 [7];
        b9_cb_regi9 [8] <= b9_cb_regi9 [7];
        a10_cb_regi10 [8] <= a10_cb_regi10 [7];
        b10_cb_regi10 [8] <= b10_cb_regi10 [7];
        a11_cb_regi11 [8] <= a11_cb_regi11 [7];
        b11_cb_regi11 [8] <= b11_cb_regi11 [7];
        a12_cb_regi12 [8] <= a12_cb_regi12 [7];
        b12_cb_regi12 [8] <= b12_cb_regi12 [7];
        a13_cb_regi13 [8] <= a13_cb_regi13 [7];
        b13_cb_regi13 [8] <= b13_cb_regi13 [7];
        a14_cb_regi14 [8] <= a14_cb_regi14 [7];
        b14_cb_regi14 [8] <= b14_cb_regi14 [7];
        a15_cb_regi15 [8] <= a15_cb_regi15 [7];
        b15_cb_regi15 [8] <= b15_cb_regi15 [7];
        a10_cb_regi10 [9] <= a10_cb_regi10 [8];
        b10_cb_regi10 [9] <= b10_cb_regi10 [8];
        a11_cb_regi11 [9] <= a11_cb_regi11 [8];
        b11_cb_regi11 [9] <= b11_cb_regi11 [8];
        a12_cb_regi12 [9] <= a12_cb_regi12 [8];
        b12_cb_regi12 [9] <= b12_cb_regi12 [8];
        a13_cb_regi13 [9] <= a13_cb_regi13 [8];
        b13_cb_regi13 [9] <= b13_cb_regi13 [8];
        a14_cb_regi14 [9] <= a14_cb_regi14 [8];
        b14_cb_regi14 [9] <= b14_cb_regi14 [8];
        a15_cb_regi15 [9] <= a15_cb_regi15 [8];
        b15_cb_regi15 [9] <= b15_cb_regi15 [8];
        a11_cb_regi11 [10] <= a11_cb_regi11 [9];
        b11_cb_regi11 [10] <= b11_cb_regi11 [9];
        a12_cb_regi12 [10] <= a12_cb_regi12 [9];
        b12_cb_regi12 [10] <= b12_cb_regi12 [9];
        a13_cb_regi13 [10] <= a13_cb_regi13 [9];
        b13_cb_regi13 [10] <= b13_cb_regi13 [9];
        a14_cb_regi14 [10] <= a14_cb_regi14 [9];
        b14_cb_regi14 [10] <= b14_cb_regi14 [9];
        a15_cb_regi15 [10] <= a15_cb_regi15 [9];
        b15_cb_regi15 [10] <= b15_cb_regi15 [9];
        a12_cb_regi12 [11] <= a12_cb_regi12 [10];
        b12_cb_regi12 [11] <= b12_cb_regi12 [10];
        a13_cb_regi13 [11] <= a13_cb_regi13 [10];
        b13_cb_regi13 [11] <= b13_cb_regi13 [10];
        a14_cb_regi14 [11] <= a14_cb_regi14 [10];
        b14_cb_regi14 [11] <= b14_cb_regi14 [10];
        a15_cb_regi15 [11] <= a15_cb_regi15 [10];
        b15_cb_regi15 [11] <= b15_cb_regi15 [10];
        a13_cb_regi13 [12] <= a13_cb_regi13 [11];
        b13_cb_regi13 [12] <= b13_cb_regi13 [11];
        a14_cb_regi14 [12] <= a14_cb_regi14 [11];
        b14_cb_regi14 [12] <= b14_cb_regi14 [11];
        a15_cb_regi15 [12] <= a15_cb_regi15 [11];
        b15_cb_regi15 [12] <= b15_cb_regi15 [11];
        a14_cb_regi14 [13] <= a14_cb_regi14 [12];
        b14_cb_regi14 [13] <= b14_cb_regi14 [12];
        a15_cb_regi15 [13] <= a15_cb_regi15 [12];
        b15_cb_regi15 [13] <= b15_cb_regi15 [12];
        a15_cb_regi15 [14] <= a15_cb_regi15 [13];
        b15_cb_regi15 [14] <= b15_cb_regi15 [13];
    end
end

// carry out bit processing
always @ (posedge clk) begin
    if (ce) begin
        faccout0_co0_reg <= faccout0_co0;
        faccout1_co1_reg <= faccout1_co1;
        faccout2_co2_reg <= faccout2_co2;
        faccout3_co3_reg <= faccout3_co3;
        faccout4_co4_reg <= faccout4_co4;
        faccout5_co5_reg <= faccout5_co5;
        faccout6_co6_reg <= faccout6_co6;
        faccout7_co7_reg <= faccout7_co7;
        faccout8_co8_reg <= faccout8_co8;
        faccout9_co9_reg <= faccout9_co9;
        faccout10_co10_reg <= faccout10_co10;
        faccout11_co11_reg <= faccout11_co11;
        faccout12_co12_reg <= faccout12_co12;
        faccout13_co13_reg <= faccout13_co13;
        faccout14_co14_reg <= faccout14_co14;
    end
end

// small adder generation 
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u0 (
            .faa    ( a0_cb ),
            .fab    ( b0_cb ),
            .facin  ( faccout_ini ),
            .fas    ( fas[3:0] ),
            .facout ( faccout0_co0 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u1 (
            .faa    ( a1_cb_regi1[0] ),
            .fab    ( b1_cb_regi1[0] ),
            .facin  ( faccout0_co0_reg),
            .fas    ( fas[7:4] ),
            .facout ( faccout1_co1 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u2 (
            .faa    ( a2_cb_regi2[1] ),
            .fab    ( b2_cb_regi2[1] ),
            .facin  ( faccout1_co1_reg),
            .fas    ( fas[11:8] ),
            .facout ( faccout2_co2 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u3 (
            .faa    ( a3_cb_regi3[2] ),
            .fab    ( b3_cb_regi3[2] ),
            .facin  ( faccout2_co2_reg),
            .fas    ( fas[15:12] ),
            .facout ( faccout3_co3 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u4 (
            .faa    ( a4_cb_regi4[3] ),
            .fab    ( b4_cb_regi4[3] ),
            .facin  ( faccout3_co3_reg),
            .fas    ( fas[19:16] ),
            .facout ( faccout4_co4 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u5 (
            .faa    ( a5_cb_regi5[4] ),
            .fab    ( b5_cb_regi5[4] ),
            .facin  ( faccout4_co4_reg),
            .fas    ( fas[23:20] ),
            .facout ( faccout5_co5 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u6 (
            .faa    ( a6_cb_regi6[5] ),
            .fab    ( b6_cb_regi6[5] ),
            .facin  ( faccout5_co5_reg),
            .fas    ( fas[27:24] ),
            .facout ( faccout6_co6 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u7 (
            .faa    ( a7_cb_regi7[6] ),
            .fab    ( b7_cb_regi7[6] ),
            .facin  ( faccout6_co6_reg),
            .fas    ( fas[31:28] ),
            .facout ( faccout7_co7 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u8 (
            .faa    ( a8_cb_regi8[7] ),
            .fab    ( b8_cb_regi8[7] ),
            .facin  ( faccout7_co7_reg),
            .fas    ( fas[35:32] ),
            .facout ( faccout8_co8 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u9 (
            .faa    ( a9_cb_regi9[8] ),
            .fab    ( b9_cb_regi9[8] ),
            .facin  ( faccout8_co8_reg),
            .fas    ( fas[39:36] ),
            .facout ( faccout9_co9 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u10 (
            .faa    ( a10_cb_regi10[9] ),
            .fab    ( b10_cb_regi10[9] ),
            .facin  ( faccout9_co9_reg),
            .fas    ( fas[43:40] ),
            .facout ( faccout10_co10 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u11 (
            .faa    ( a11_cb_regi11[10] ),
            .fab    ( b11_cb_regi11[10] ),
            .facin  ( faccout10_co10_reg),
            .fas    ( fas[47:44] ),
            .facout ( faccout11_co11 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u12 (
            .faa    ( a12_cb_regi12[11] ),
            .fab    ( b12_cb_regi12[11] ),
            .facin  ( faccout11_co11_reg),
            .fas    ( fas[51:48] ),
            .facout ( faccout12_co12 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u13 (
            .faa    ( a13_cb_regi13[12] ),
            .fab    ( b13_cb_regi13[12] ),
            .facin  ( faccout12_co12_reg),
            .fas    ( fas[55:52] ),
            .facout ( faccout13_co13 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder u14 (
            .faa    ( a14_cb_regi14[13] ),
            .fab    ( b14_cb_regi14[13] ),
            .facin  ( faccout13_co13_reg),
            .fas    ( fas[59:56] ),
            .facout ( faccout14_co14 )
        );
        nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f u15 (
            .faa    ( a15_cb_regi15[14] ),
            .fab    ( b15_cb_regi15[14] ),
            .facin  ( faccout14_co14_reg ),
            .fas    ( fas[63 :60] ),
            .facout ( faccout15_co15 )
        );

assign faccout_ini = 1'b0;

// output register array
always @ (posedge clk) begin
    if (ce) begin
        s0_ca_rego0 [0] <= fas[4-1 : 0];
        s1_ca_rego1 [0] <= fas[8-1 : 4];
        s2_ca_rego2 [0] <= fas[12-1 : 8];
        s3_ca_rego3 [0] <= fas[16-1 : 12];
        s4_ca_rego4 [0] <= fas[20-1 : 16];
        s5_ca_rego5 [0] <= fas[24-1 : 20];
        s6_ca_rego6 [0] <= fas[28-1 : 24];
        s7_ca_rego7 [0] <= fas[32-1 : 28];
        s8_ca_rego8 [0] <= fas[36-1 : 32];
        s9_ca_rego9 [0] <= fas[40-1 : 36];
        s10_ca_rego10 [0] <= fas[44-1 : 40];
        s11_ca_rego11 [0] <= fas[48-1 : 44];
        s12_ca_rego12 [0] <= fas[52-1 : 48];
        s13_ca_rego13 [0] <= fas[56-1 : 52];
        s14_ca_rego14 [0] <= fas[60-1 : 56];
        s0_ca_rego0 [1] <= s0_ca_rego0 [0];
        s0_ca_rego0 [2] <= s0_ca_rego0 [1];
        s0_ca_rego0 [3] <= s0_ca_rego0 [2];
        s0_ca_rego0 [4] <= s0_ca_rego0 [3];
        s0_ca_rego0 [5] <= s0_ca_rego0 [4];
        s0_ca_rego0 [6] <= s0_ca_rego0 [5];
        s0_ca_rego0 [7] <= s0_ca_rego0 [6];
        s0_ca_rego0 [8] <= s0_ca_rego0 [7];
        s0_ca_rego0 [9] <= s0_ca_rego0 [8];
        s0_ca_rego0 [10] <= s0_ca_rego0 [9];
        s0_ca_rego0 [11] <= s0_ca_rego0 [10];
        s0_ca_rego0 [12] <= s0_ca_rego0 [11];
        s0_ca_rego0 [13] <= s0_ca_rego0 [12];
        s0_ca_rego0 [14] <= s0_ca_rego0 [13];
        s1_ca_rego1 [1] <= s1_ca_rego1 [0];
        s1_ca_rego1 [2] <= s1_ca_rego1 [1];
        s1_ca_rego1 [3] <= s1_ca_rego1 [2];
        s1_ca_rego1 [4] <= s1_ca_rego1 [3];
        s1_ca_rego1 [5] <= s1_ca_rego1 [4];
        s1_ca_rego1 [6] <= s1_ca_rego1 [5];
        s1_ca_rego1 [7] <= s1_ca_rego1 [6];
        s1_ca_rego1 [8] <= s1_ca_rego1 [7];
        s1_ca_rego1 [9] <= s1_ca_rego1 [8];
        s1_ca_rego1 [10] <= s1_ca_rego1 [9];
        s1_ca_rego1 [11] <= s1_ca_rego1 [10];
        s1_ca_rego1 [12] <= s1_ca_rego1 [11];
        s1_ca_rego1 [13] <= s1_ca_rego1 [12];
        s2_ca_rego2 [1] <= s2_ca_rego2 [0];
        s2_ca_rego2 [2] <= s2_ca_rego2 [1];
        s2_ca_rego2 [3] <= s2_ca_rego2 [2];
        s2_ca_rego2 [4] <= s2_ca_rego2 [3];
        s2_ca_rego2 [5] <= s2_ca_rego2 [4];
        s2_ca_rego2 [6] <= s2_ca_rego2 [5];
        s2_ca_rego2 [7] <= s2_ca_rego2 [6];
        s2_ca_rego2 [8] <= s2_ca_rego2 [7];
        s2_ca_rego2 [9] <= s2_ca_rego2 [8];
        s2_ca_rego2 [10] <= s2_ca_rego2 [9];
        s2_ca_rego2 [11] <= s2_ca_rego2 [10];
        s2_ca_rego2 [12] <= s2_ca_rego2 [11];
        s3_ca_rego3 [1] <= s3_ca_rego3 [0];
        s3_ca_rego3 [2] <= s3_ca_rego3 [1];
        s3_ca_rego3 [3] <= s3_ca_rego3 [2];
        s3_ca_rego3 [4] <= s3_ca_rego3 [3];
        s3_ca_rego3 [5] <= s3_ca_rego3 [4];
        s3_ca_rego3 [6] <= s3_ca_rego3 [5];
        s3_ca_rego3 [7] <= s3_ca_rego3 [6];
        s3_ca_rego3 [8] <= s3_ca_rego3 [7];
        s3_ca_rego3 [9] <= s3_ca_rego3 [8];
        s3_ca_rego3 [10] <= s3_ca_rego3 [9];
        s3_ca_rego3 [11] <= s3_ca_rego3 [10];
        s4_ca_rego4 [1] <= s4_ca_rego4 [0];
        s4_ca_rego4 [2] <= s4_ca_rego4 [1];
        s4_ca_rego4 [3] <= s4_ca_rego4 [2];
        s4_ca_rego4 [4] <= s4_ca_rego4 [3];
        s4_ca_rego4 [5] <= s4_ca_rego4 [4];
        s4_ca_rego4 [6] <= s4_ca_rego4 [5];
        s4_ca_rego4 [7] <= s4_ca_rego4 [6];
        s4_ca_rego4 [8] <= s4_ca_rego4 [7];
        s4_ca_rego4 [9] <= s4_ca_rego4 [8];
        s4_ca_rego4 [10] <= s4_ca_rego4 [9];
        s5_ca_rego5 [1] <= s5_ca_rego5 [0];
        s5_ca_rego5 [2] <= s5_ca_rego5 [1];
        s5_ca_rego5 [3] <= s5_ca_rego5 [2];
        s5_ca_rego5 [4] <= s5_ca_rego5 [3];
        s5_ca_rego5 [5] <= s5_ca_rego5 [4];
        s5_ca_rego5 [6] <= s5_ca_rego5 [5];
        s5_ca_rego5 [7] <= s5_ca_rego5 [6];
        s5_ca_rego5 [8] <= s5_ca_rego5 [7];
        s5_ca_rego5 [9] <= s5_ca_rego5 [8];
        s6_ca_rego6 [1] <= s6_ca_rego6 [0];
        s6_ca_rego6 [2] <= s6_ca_rego6 [1];
        s6_ca_rego6 [3] <= s6_ca_rego6 [2];
        s6_ca_rego6 [4] <= s6_ca_rego6 [3];
        s6_ca_rego6 [5] <= s6_ca_rego6 [4];
        s6_ca_rego6 [6] <= s6_ca_rego6 [5];
        s6_ca_rego6 [7] <= s6_ca_rego6 [6];
        s6_ca_rego6 [8] <= s6_ca_rego6 [7];
        s7_ca_rego7 [1] <= s7_ca_rego7 [0];
        s7_ca_rego7 [2] <= s7_ca_rego7 [1];
        s7_ca_rego7 [3] <= s7_ca_rego7 [2];
        s7_ca_rego7 [4] <= s7_ca_rego7 [3];
        s7_ca_rego7 [5] <= s7_ca_rego7 [4];
        s7_ca_rego7 [6] <= s7_ca_rego7 [5];
        s7_ca_rego7 [7] <= s7_ca_rego7 [6];
        s8_ca_rego8 [1] <= s8_ca_rego8 [0];
        s8_ca_rego8 [2] <= s8_ca_rego8 [1];
        s8_ca_rego8 [3] <= s8_ca_rego8 [2];
        s8_ca_rego8 [4] <= s8_ca_rego8 [3];
        s8_ca_rego8 [5] <= s8_ca_rego8 [4];
        s8_ca_rego8 [6] <= s8_ca_rego8 [5];
        s9_ca_rego9 [1] <= s9_ca_rego9 [0];
        s9_ca_rego9 [2] <= s9_ca_rego9 [1];
        s9_ca_rego9 [3] <= s9_ca_rego9 [2];
        s9_ca_rego9 [4] <= s9_ca_rego9 [3];
        s9_ca_rego9 [5] <= s9_ca_rego9 [4];
        s10_ca_rego10 [1] <= s10_ca_rego10 [0];
        s10_ca_rego10 [2] <= s10_ca_rego10 [1];
        s10_ca_rego10 [3] <= s10_ca_rego10 [2];
        s10_ca_rego10 [4] <= s10_ca_rego10 [3];
        s11_ca_rego11 [1] <= s11_ca_rego11 [0];
        s11_ca_rego11 [2] <= s11_ca_rego11 [1];
        s11_ca_rego11 [3] <= s11_ca_rego11 [2];
        s12_ca_rego12 [1] <= s12_ca_rego12 [0];
        s12_ca_rego12 [2] <= s12_ca_rego12 [1];
        s13_ca_rego13 [1] <= s13_ca_rego13 [0];
    end
end

// get the s_tmp, assign it to the primary output
assign s_tmp[4-1 : 0] = s0_ca_rego0[14];
assign s_tmp[8-1 : 4] = s1_ca_rego1[13];
assign s_tmp[12-1 : 8] = s2_ca_rego2[12];
assign s_tmp[16-1 : 12] = s3_ca_rego3[11];
assign s_tmp[20-1 : 16] = s4_ca_rego4[10];
assign s_tmp[24-1 : 20] = s5_ca_rego5[9];
assign s_tmp[28-1 : 24] = s6_ca_rego6[8];
assign s_tmp[32-1 : 28] = s7_ca_rego7[7];
assign s_tmp[36-1 : 32] = s8_ca_rego8[6];
assign s_tmp[40-1 : 36] = s9_ca_rego9[5];
assign s_tmp[44-1 : 40] = s10_ca_rego10[4];
assign s_tmp[48-1 : 44] = s11_ca_rego11[3];
assign s_tmp[52-1 : 48] = s12_ca_rego12[2];
assign s_tmp[56-1 : 52] = s13_ca_rego13[1];
assign s_tmp[60-1 : 56] = s14_ca_rego14[0];
assign s_tmp[64 - 1 : 60] = fas[63 :60];

assign s = s_tmp;

endmodule

// short adder
module nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder 
#(parameter
    N = 4
)(
    input  [N-1 : 0]  faa,
    input  [N-1 : 0]  fab,
    input  wire  facin,
    output [N-1 : 0]  fas,
    output wire  facout
);
assign {facout, fas} = faa + fab + facin;

endmodule

// the final stage short adder
module nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f 
#(parameter
    N = 4
)(
    input  [N-1 : 0]  faa,
    input  [N-1 : 0]  fab,
    input  wire  facin,
    output [N-1 : 0]  fas,
    output wire  facout
);
assign {facout, fas} = faa + fab + facin;

endmodule

`timescale 1 ns / 1 ps
module nfa_accept_samples_generic_hw_add_64ns_64ns_64_16(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;




nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2 nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_U(
    .clk( clk ),
    .reset( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .s( dout ));

endmodule

