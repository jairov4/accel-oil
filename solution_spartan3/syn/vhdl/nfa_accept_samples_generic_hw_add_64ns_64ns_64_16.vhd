-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================


library IEEE;
use IEEE.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2 is
port (
    clk: in std_logic;
    reset: in std_logic;
    ce: in std_logic;
    a: in std_logic_vector(63 downto 0);
    b: in std_logic_vector(63 downto 0);
    s: out std_logic_vector(63 downto 0));
end entity;

architecture behav of nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2 is
  component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder is 
    port (
      faa : IN STD_LOGIC_VECTOR (4-1 downto 0);
      fab : IN STD_LOGIC_VECTOR (4-1 downto 0);
      facin : IN STD_LOGIC_VECTOR (0 downto 0);
      fas : OUT STD_LOGIC_VECTOR (4-1 downto 0);
      facout : OUT STD_LOGIC_VECTOR (0 downto 0));
  end component;
  component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f is 
    port (
      faa : IN STD_LOGIC_VECTOR (4-1 downto 0);
      fab : IN STD_LOGIC_VECTOR (4-1 downto 0);
      facin : IN STD_LOGIC_VECTOR (0 downto 0);
      fas : OUT STD_LOGIC_VECTOR (4-1 downto 0);
      facout : OUT STD_LOGIC_VECTOR (0 downto 0));
  end component;


-- ---- register and wire type variables list here ----

-- wire for the primary inputs
  signal a_reg : std_logic_vector(63 downto 0);
  signal b_reg : std_logic_vector(63 downto 0);

-- wires for each small adder
  signal a0_cb : std_logic_vector(3 downto 0);
  signal b0_cb : std_logic_vector(3 downto 0);
  signal a1_cb : std_logic_vector(7 downto 4);
  signal b1_cb : std_logic_vector(7 downto 4);
  signal a2_cb : std_logic_vector(11 downto 8);
  signal b2_cb : std_logic_vector(11 downto 8);
  signal a3_cb : std_logic_vector(15 downto 12);
  signal b3_cb : std_logic_vector(15 downto 12);
  signal a4_cb : std_logic_vector(19 downto 16);
  signal b4_cb : std_logic_vector(19 downto 16);
  signal a5_cb : std_logic_vector(23 downto 20);
  signal b5_cb : std_logic_vector(23 downto 20);
  signal a6_cb : std_logic_vector(27 downto 24);
  signal b6_cb : std_logic_vector(27 downto 24);
  signal a7_cb : std_logic_vector(31 downto 28);
  signal b7_cb : std_logic_vector(31 downto 28);
  signal a8_cb : std_logic_vector(35 downto 32);
  signal b8_cb : std_logic_vector(35 downto 32);
  signal a9_cb : std_logic_vector(39 downto 36);
  signal b9_cb : std_logic_vector(39 downto 36);
  signal a10_cb : std_logic_vector(43 downto 40);
  signal b10_cb : std_logic_vector(43 downto 40);
  signal a11_cb : std_logic_vector(47 downto 44);
  signal b11_cb : std_logic_vector(47 downto 44);
  signal a12_cb : std_logic_vector(51 downto 48);
  signal b12_cb : std_logic_vector(51 downto 48);
  signal a13_cb : std_logic_vector(55 downto 52);
  signal b13_cb : std_logic_vector(55 downto 52);
  signal a14_cb : std_logic_vector(59 downto 56);
  signal b14_cb : std_logic_vector(59 downto 56);
  signal a15_cb : std_logic_vector(63 downto 60);
  signal b15_cb : std_logic_vector(63 downto 60);

-- registers for input register array
  type ramtypei0 is array (0 downto 0) of std_logic_vector(3 downto 0);
  signal a1_cb_regi1 : ramtypei0; 
  signal b1_cb_regi1 : ramtypei0; 
  type ramtypei1 is array (1 downto 0) of std_logic_vector(3 downto 0);
  signal a2_cb_regi2 : ramtypei1; 
  signal b2_cb_regi2 : ramtypei1; 
  type ramtypei2 is array (2 downto 0) of std_logic_vector(3 downto 0);
  signal a3_cb_regi3 : ramtypei2; 
  signal b3_cb_regi3 : ramtypei2; 
  type ramtypei3 is array (3 downto 0) of std_logic_vector(3 downto 0);
  signal a4_cb_regi4 : ramtypei3; 
  signal b4_cb_regi4 : ramtypei3; 
  type ramtypei4 is array (4 downto 0) of std_logic_vector(3 downto 0);
  signal a5_cb_regi5 : ramtypei4; 
  signal b5_cb_regi5 : ramtypei4; 
  type ramtypei5 is array (5 downto 0) of std_logic_vector(3 downto 0);
  signal a6_cb_regi6 : ramtypei5; 
  signal b6_cb_regi6 : ramtypei5; 
  type ramtypei6 is array (6 downto 0) of std_logic_vector(3 downto 0);
  signal a7_cb_regi7 : ramtypei6; 
  signal b7_cb_regi7 : ramtypei6; 
  type ramtypei7 is array (7 downto 0) of std_logic_vector(3 downto 0);
  signal a8_cb_regi8 : ramtypei7; 
  signal b8_cb_regi8 : ramtypei7; 
  type ramtypei8 is array (8 downto 0) of std_logic_vector(3 downto 0);
  signal a9_cb_regi9 : ramtypei8; 
  signal b9_cb_regi9 : ramtypei8; 
  type ramtypei9 is array (9 downto 0) of std_logic_vector(3 downto 0);
  signal a10_cb_regi10 : ramtypei9; 
  signal b10_cb_regi10 : ramtypei9; 
  type ramtypei10 is array (10 downto 0) of std_logic_vector(3 downto 0);
  signal a11_cb_regi11 : ramtypei10; 
  signal b11_cb_regi11 : ramtypei10; 
  type ramtypei11 is array (11 downto 0) of std_logic_vector(3 downto 0);
  signal a12_cb_regi12 : ramtypei11; 
  signal b12_cb_regi12 : ramtypei11; 
  type ramtypei12 is array (12 downto 0) of std_logic_vector(3 downto 0);
  signal a13_cb_regi13 : ramtypei12; 
  signal b13_cb_regi13 : ramtypei12; 
  type ramtypei13 is array (13 downto 0) of std_logic_vector(3 downto 0);
  signal a14_cb_regi14 : ramtypei13; 
  signal b14_cb_regi14 : ramtypei13; 
  type ramtypei14 is array (14 downto 0) of std_logic_vector(3 downto 0);
  signal a15_cb_regi15 : ramtypei14;
  signal b15_cb_regi15 : ramtypei14;

-- wires for each full adder sum
  signal fas : std_logic_vector(63 downto 0);

-- wires and register for carry out bit
  signal faccout_ini : std_logic_vector (0 downto 0);
  signal faccout0_co0 : std_logic_vector (0 downto 0); 
  signal faccout1_co1 : std_logic_vector (0 downto 0); 
  signal faccout2_co2 : std_logic_vector (0 downto 0); 
  signal faccout3_co3 : std_logic_vector (0 downto 0); 
  signal faccout4_co4 : std_logic_vector (0 downto 0); 
  signal faccout5_co5 : std_logic_vector (0 downto 0); 
  signal faccout6_co6 : std_logic_vector (0 downto 0); 
  signal faccout7_co7 : std_logic_vector (0 downto 0); 
  signal faccout8_co8 : std_logic_vector (0 downto 0); 
  signal faccout9_co9 : std_logic_vector (0 downto 0); 
  signal faccout10_co10 : std_logic_vector (0 downto 0); 
  signal faccout11_co11 : std_logic_vector (0 downto 0); 
  signal faccout12_co12 : std_logic_vector (0 downto 0); 
  signal faccout13_co13 : std_logic_vector (0 downto 0); 
  signal faccout14_co14 : std_logic_vector (0 downto 0); 
  signal faccout15_co15 : std_logic_vector (0 downto 0);

  signal faccout0_co0_reg : std_logic_vector (0 downto 0);
  signal faccout1_co1_reg : std_logic_vector (0 downto 0);
  signal faccout2_co2_reg : std_logic_vector (0 downto 0);
  signal faccout3_co3_reg : std_logic_vector (0 downto 0);
  signal faccout4_co4_reg : std_logic_vector (0 downto 0);
  signal faccout5_co5_reg : std_logic_vector (0 downto 0);
  signal faccout6_co6_reg : std_logic_vector (0 downto 0);
  signal faccout7_co7_reg : std_logic_vector (0 downto 0);
  signal faccout8_co8_reg : std_logic_vector (0 downto 0);
  signal faccout9_co9_reg : std_logic_vector (0 downto 0);
  signal faccout10_co10_reg : std_logic_vector (0 downto 0);
  signal faccout11_co11_reg : std_logic_vector (0 downto 0);
  signal faccout12_co12_reg : std_logic_vector (0 downto 0);
  signal faccout13_co13_reg : std_logic_vector (0 downto 0);
  signal faccout14_co14_reg : std_logic_vector (0 downto 0);

-- registers for output register array
  type ramtypeo14 is array (14 downto 0) of std_logic_vector(3 downto 0);
  signal s0_ca_rego0 : ramtypeo14; 
  type ramtypeo13 is array (13 downto 0) of std_logic_vector(3 downto 0);
  signal s1_ca_rego1 : ramtypeo13; 
  type ramtypeo12 is array (12 downto 0) of std_logic_vector(3 downto 0);
  signal s2_ca_rego2 : ramtypeo12; 
  type ramtypeo11 is array (11 downto 0) of std_logic_vector(3 downto 0);
  signal s3_ca_rego3 : ramtypeo11; 
  type ramtypeo10 is array (10 downto 0) of std_logic_vector(3 downto 0);
  signal s4_ca_rego4 : ramtypeo10; 
  type ramtypeo9 is array (9 downto 0) of std_logic_vector(3 downto 0);
  signal s5_ca_rego5 : ramtypeo9; 
  type ramtypeo8 is array (8 downto 0) of std_logic_vector(3 downto 0);
  signal s6_ca_rego6 : ramtypeo8; 
  type ramtypeo7 is array (7 downto 0) of std_logic_vector(3 downto 0);
  signal s7_ca_rego7 : ramtypeo7; 
  type ramtypeo6 is array (6 downto 0) of std_logic_vector(3 downto 0);
  signal s8_ca_rego8 : ramtypeo6; 
  type ramtypeo5 is array (5 downto 0) of std_logic_vector(3 downto 0);
  signal s9_ca_rego9 : ramtypeo5; 
  type ramtypeo4 is array (4 downto 0) of std_logic_vector(3 downto 0);
  signal s10_ca_rego10 : ramtypeo4; 
  type ramtypeo3 is array (3 downto 0) of std_logic_vector(3 downto 0);
  signal s11_ca_rego11 : ramtypeo3; 
  type ramtypeo2 is array (2 downto 0) of std_logic_vector(3 downto 0);
  signal s12_ca_rego12 : ramtypeo2; 
  type ramtypeo1 is array (1 downto 0) of std_logic_vector(3 downto 0);
  signal s13_ca_rego13 : ramtypeo1; 
  type ramtypeo0 is array (0 downto 0) of std_logic_vector(3 downto 0);
  signal s14_ca_rego14 : ramtypeo0; 

-- wire for the temporary output
  signal s_tmp : std_logic_vector(63 downto 0);

-- ---- RTL code for assignment statements/always blocks/module instantiations here ----
  begin
  a_reg <= a;
  b_reg <= b;

-- small adder input assigments
  a0_cb <= a_reg(3 downto 0);
  b0_cb <= b_reg(3 downto 0);
  a1_cb <= a_reg(7 downto 4);
  b1_cb <= b_reg(7 downto 4);
  a2_cb <= a_reg(11 downto 8);
  b2_cb <= b_reg(11 downto 8);
  a3_cb <= a_reg(15 downto 12);
  b3_cb <= b_reg(15 downto 12);
  a4_cb <= a_reg(19 downto 16);
  b4_cb <= b_reg(19 downto 16);
  a5_cb <= a_reg(23 downto 20);
  b5_cb <= b_reg(23 downto 20);
  a6_cb <= a_reg(27 downto 24);
  b6_cb <= b_reg(27 downto 24);
  a7_cb <= a_reg(31 downto 28);
  b7_cb <= b_reg(31 downto 28);
  a8_cb <= a_reg(35 downto 32);
  b8_cb <= b_reg(35 downto 32);
  a9_cb <= a_reg(39 downto 36);
  b9_cb <= b_reg(39 downto 36);
  a10_cb <= a_reg(43 downto 40);
  b10_cb <= b_reg(43 downto 40);
  a11_cb <= a_reg(47 downto 44);
  b11_cb <= b_reg(47 downto 44);
  a12_cb <= a_reg(51 downto 48);
  b12_cb <= b_reg(51 downto 48);
  a13_cb <= a_reg(55 downto 52);
  b13_cb <= b_reg(55 downto 52);
  a14_cb <= a_reg(59 downto 56);
  b14_cb <= b_reg(59 downto 56);
  a15_cb <= a_reg(63 downto 60);
  b15_cb <= b_reg(63 downto 60);

-- input register array
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
        a1_cb_regi1 (0) <= a1_cb;
        b1_cb_regi1 (0) <= b1_cb;
        a2_cb_regi2 (0) <= a2_cb;
        b2_cb_regi2 (0) <= b2_cb;
        a3_cb_regi3 (0) <= a3_cb;
        b3_cb_regi3 (0) <= b3_cb;
        a4_cb_regi4 (0) <= a4_cb;
        b4_cb_regi4 (0) <= b4_cb;
        a5_cb_regi5 (0) <= a5_cb;
        b5_cb_regi5 (0) <= b5_cb;
        a6_cb_regi6 (0) <= a6_cb;
        b6_cb_regi6 (0) <= b6_cb;
        a7_cb_regi7 (0) <= a7_cb;
        b7_cb_regi7 (0) <= b7_cb;
        a8_cb_regi8 (0) <= a8_cb;
        b8_cb_regi8 (0) <= b8_cb;
        a9_cb_regi9 (0) <= a9_cb;
        b9_cb_regi9 (0) <= b9_cb;
        a10_cb_regi10 (0) <= a10_cb;
        b10_cb_regi10 (0) <= b10_cb;
        a11_cb_regi11 (0) <= a11_cb;
        b11_cb_regi11 (0) <= b11_cb;
        a12_cb_regi12 (0) <= a12_cb;
        b12_cb_regi12 (0) <= b12_cb;
        a13_cb_regi13 (0) <= a13_cb;
        b13_cb_regi13 (0) <= b13_cb;
        a14_cb_regi14 (0) <= a14_cb;
        b14_cb_regi14 (0) <= b14_cb;
        a15_cb_regi15 (0) <= a15_cb;
        b15_cb_regi15 (0) <= b15_cb;
        a2_cb_regi2 (1) <= a2_cb_regi2 (0);
        b2_cb_regi2 (1) <= b2_cb_regi2 (0);
        a3_cb_regi3 (1) <= a3_cb_regi3 (0);
        b3_cb_regi3 (1) <= b3_cb_regi3 (0);
        a4_cb_regi4 (1) <= a4_cb_regi4 (0);
        b4_cb_regi4 (1) <= b4_cb_regi4 (0);
        a5_cb_regi5 (1) <= a5_cb_regi5 (0);
        b5_cb_regi5 (1) <= b5_cb_regi5 (0);
        a6_cb_regi6 (1) <= a6_cb_regi6 (0);
        b6_cb_regi6 (1) <= b6_cb_regi6 (0);
        a7_cb_regi7 (1) <= a7_cb_regi7 (0);
        b7_cb_regi7 (1) <= b7_cb_regi7 (0);
        a8_cb_regi8 (1) <= a8_cb_regi8 (0);
        b8_cb_regi8 (1) <= b8_cb_regi8 (0);
        a9_cb_regi9 (1) <= a9_cb_regi9 (0);
        b9_cb_regi9 (1) <= b9_cb_regi9 (0);
        a10_cb_regi10 (1) <= a10_cb_regi10 (0);
        b10_cb_regi10 (1) <= b10_cb_regi10 (0);
        a11_cb_regi11 (1) <= a11_cb_regi11 (0);
        b11_cb_regi11 (1) <= b11_cb_regi11 (0);
        a12_cb_regi12 (1) <= a12_cb_regi12 (0);
        b12_cb_regi12 (1) <= b12_cb_regi12 (0);
        a13_cb_regi13 (1) <= a13_cb_regi13 (0);
        b13_cb_regi13 (1) <= b13_cb_regi13 (0);
        a14_cb_regi14 (1) <= a14_cb_regi14 (0);
        b14_cb_regi14 (1) <= b14_cb_regi14 (0);
        a15_cb_regi15 (1) <= a15_cb_regi15 (0);
        b15_cb_regi15 (1) <= b15_cb_regi15 (0);
        a3_cb_regi3 (2) <= a3_cb_regi3 (1);
        b3_cb_regi3 (2) <= b3_cb_regi3 (1);
        a4_cb_regi4 (2) <= a4_cb_regi4 (1);
        b4_cb_regi4 (2) <= b4_cb_regi4 (1);
        a5_cb_regi5 (2) <= a5_cb_regi5 (1);
        b5_cb_regi5 (2) <= b5_cb_regi5 (1);
        a6_cb_regi6 (2) <= a6_cb_regi6 (1);
        b6_cb_regi6 (2) <= b6_cb_regi6 (1);
        a7_cb_regi7 (2) <= a7_cb_regi7 (1);
        b7_cb_regi7 (2) <= b7_cb_regi7 (1);
        a8_cb_regi8 (2) <= a8_cb_regi8 (1);
        b8_cb_regi8 (2) <= b8_cb_regi8 (1);
        a9_cb_regi9 (2) <= a9_cb_regi9 (1);
        b9_cb_regi9 (2) <= b9_cb_regi9 (1);
        a10_cb_regi10 (2) <= a10_cb_regi10 (1);
        b10_cb_regi10 (2) <= b10_cb_regi10 (1);
        a11_cb_regi11 (2) <= a11_cb_regi11 (1);
        b11_cb_regi11 (2) <= b11_cb_regi11 (1);
        a12_cb_regi12 (2) <= a12_cb_regi12 (1);
        b12_cb_regi12 (2) <= b12_cb_regi12 (1);
        a13_cb_regi13 (2) <= a13_cb_regi13 (1);
        b13_cb_regi13 (2) <= b13_cb_regi13 (1);
        a14_cb_regi14 (2) <= a14_cb_regi14 (1);
        b14_cb_regi14 (2) <= b14_cb_regi14 (1);
        a15_cb_regi15 (2) <= a15_cb_regi15 (1);
        b15_cb_regi15 (2) <= b15_cb_regi15 (1);
        a4_cb_regi4 (3) <= a4_cb_regi4 (2);
        b4_cb_regi4 (3) <= b4_cb_regi4 (2);
        a5_cb_regi5 (3) <= a5_cb_regi5 (2);
        b5_cb_regi5 (3) <= b5_cb_regi5 (2);
        a6_cb_regi6 (3) <= a6_cb_regi6 (2);
        b6_cb_regi6 (3) <= b6_cb_regi6 (2);
        a7_cb_regi7 (3) <= a7_cb_regi7 (2);
        b7_cb_regi7 (3) <= b7_cb_regi7 (2);
        a8_cb_regi8 (3) <= a8_cb_regi8 (2);
        b8_cb_regi8 (3) <= b8_cb_regi8 (2);
        a9_cb_regi9 (3) <= a9_cb_regi9 (2);
        b9_cb_regi9 (3) <= b9_cb_regi9 (2);
        a10_cb_regi10 (3) <= a10_cb_regi10 (2);
        b10_cb_regi10 (3) <= b10_cb_regi10 (2);
        a11_cb_regi11 (3) <= a11_cb_regi11 (2);
        b11_cb_regi11 (3) <= b11_cb_regi11 (2);
        a12_cb_regi12 (3) <= a12_cb_regi12 (2);
        b12_cb_regi12 (3) <= b12_cb_regi12 (2);
        a13_cb_regi13 (3) <= a13_cb_regi13 (2);
        b13_cb_regi13 (3) <= b13_cb_regi13 (2);
        a14_cb_regi14 (3) <= a14_cb_regi14 (2);
        b14_cb_regi14 (3) <= b14_cb_regi14 (2);
        a15_cb_regi15 (3) <= a15_cb_regi15 (2);
        b15_cb_regi15 (3) <= b15_cb_regi15 (2);
        a5_cb_regi5 (4) <= a5_cb_regi5 (3);
        b5_cb_regi5 (4) <= b5_cb_regi5 (3);
        a6_cb_regi6 (4) <= a6_cb_regi6 (3);
        b6_cb_regi6 (4) <= b6_cb_regi6 (3);
        a7_cb_regi7 (4) <= a7_cb_regi7 (3);
        b7_cb_regi7 (4) <= b7_cb_regi7 (3);
        a8_cb_regi8 (4) <= a8_cb_regi8 (3);
        b8_cb_regi8 (4) <= b8_cb_regi8 (3);
        a9_cb_regi9 (4) <= a9_cb_regi9 (3);
        b9_cb_regi9 (4) <= b9_cb_regi9 (3);
        a10_cb_regi10 (4) <= a10_cb_regi10 (3);
        b10_cb_regi10 (4) <= b10_cb_regi10 (3);
        a11_cb_regi11 (4) <= a11_cb_regi11 (3);
        b11_cb_regi11 (4) <= b11_cb_regi11 (3);
        a12_cb_regi12 (4) <= a12_cb_regi12 (3);
        b12_cb_regi12 (4) <= b12_cb_regi12 (3);
        a13_cb_regi13 (4) <= a13_cb_regi13 (3);
        b13_cb_regi13 (4) <= b13_cb_regi13 (3);
        a14_cb_regi14 (4) <= a14_cb_regi14 (3);
        b14_cb_regi14 (4) <= b14_cb_regi14 (3);
        a15_cb_regi15 (4) <= a15_cb_regi15 (3);
        b15_cb_regi15 (4) <= b15_cb_regi15 (3);
        a6_cb_regi6 (5) <= a6_cb_regi6 (4);
        b6_cb_regi6 (5) <= b6_cb_regi6 (4);
        a7_cb_regi7 (5) <= a7_cb_regi7 (4);
        b7_cb_regi7 (5) <= b7_cb_regi7 (4);
        a8_cb_regi8 (5) <= a8_cb_regi8 (4);
        b8_cb_regi8 (5) <= b8_cb_regi8 (4);
        a9_cb_regi9 (5) <= a9_cb_regi9 (4);
        b9_cb_regi9 (5) <= b9_cb_regi9 (4);
        a10_cb_regi10 (5) <= a10_cb_regi10 (4);
        b10_cb_regi10 (5) <= b10_cb_regi10 (4);
        a11_cb_regi11 (5) <= a11_cb_regi11 (4);
        b11_cb_regi11 (5) <= b11_cb_regi11 (4);
        a12_cb_regi12 (5) <= a12_cb_regi12 (4);
        b12_cb_regi12 (5) <= b12_cb_regi12 (4);
        a13_cb_regi13 (5) <= a13_cb_regi13 (4);
        b13_cb_regi13 (5) <= b13_cb_regi13 (4);
        a14_cb_regi14 (5) <= a14_cb_regi14 (4);
        b14_cb_regi14 (5) <= b14_cb_regi14 (4);
        a15_cb_regi15 (5) <= a15_cb_regi15 (4);
        b15_cb_regi15 (5) <= b15_cb_regi15 (4);
        a7_cb_regi7 (6) <= a7_cb_regi7 (5);
        b7_cb_regi7 (6) <= b7_cb_regi7 (5);
        a8_cb_regi8 (6) <= a8_cb_regi8 (5);
        b8_cb_regi8 (6) <= b8_cb_regi8 (5);
        a9_cb_regi9 (6) <= a9_cb_regi9 (5);
        b9_cb_regi9 (6) <= b9_cb_regi9 (5);
        a10_cb_regi10 (6) <= a10_cb_regi10 (5);
        b10_cb_regi10 (6) <= b10_cb_regi10 (5);
        a11_cb_regi11 (6) <= a11_cb_regi11 (5);
        b11_cb_regi11 (6) <= b11_cb_regi11 (5);
        a12_cb_regi12 (6) <= a12_cb_regi12 (5);
        b12_cb_regi12 (6) <= b12_cb_regi12 (5);
        a13_cb_regi13 (6) <= a13_cb_regi13 (5);
        b13_cb_regi13 (6) <= b13_cb_regi13 (5);
        a14_cb_regi14 (6) <= a14_cb_regi14 (5);
        b14_cb_regi14 (6) <= b14_cb_regi14 (5);
        a15_cb_regi15 (6) <= a15_cb_regi15 (5);
        b15_cb_regi15 (6) <= b15_cb_regi15 (5);
        a8_cb_regi8 (7) <= a8_cb_regi8 (6);
        b8_cb_regi8 (7) <= b8_cb_regi8 (6);
        a9_cb_regi9 (7) <= a9_cb_regi9 (6);
        b9_cb_regi9 (7) <= b9_cb_regi9 (6);
        a10_cb_regi10 (7) <= a10_cb_regi10 (6);
        b10_cb_regi10 (7) <= b10_cb_regi10 (6);
        a11_cb_regi11 (7) <= a11_cb_regi11 (6);
        b11_cb_regi11 (7) <= b11_cb_regi11 (6);
        a12_cb_regi12 (7) <= a12_cb_regi12 (6);
        b12_cb_regi12 (7) <= b12_cb_regi12 (6);
        a13_cb_regi13 (7) <= a13_cb_regi13 (6);
        b13_cb_regi13 (7) <= b13_cb_regi13 (6);
        a14_cb_regi14 (7) <= a14_cb_regi14 (6);
        b14_cb_regi14 (7) <= b14_cb_regi14 (6);
        a15_cb_regi15 (7) <= a15_cb_regi15 (6);
        b15_cb_regi15 (7) <= b15_cb_regi15 (6);
        a9_cb_regi9 (8) <= a9_cb_regi9 (7);
        b9_cb_regi9 (8) <= b9_cb_regi9 (7);
        a10_cb_regi10 (8) <= a10_cb_regi10 (7);
        b10_cb_regi10 (8) <= b10_cb_regi10 (7);
        a11_cb_regi11 (8) <= a11_cb_regi11 (7);
        b11_cb_regi11 (8) <= b11_cb_regi11 (7);
        a12_cb_regi12 (8) <= a12_cb_regi12 (7);
        b12_cb_regi12 (8) <= b12_cb_regi12 (7);
        a13_cb_regi13 (8) <= a13_cb_regi13 (7);
        b13_cb_regi13 (8) <= b13_cb_regi13 (7);
        a14_cb_regi14 (8) <= a14_cb_regi14 (7);
        b14_cb_regi14 (8) <= b14_cb_regi14 (7);
        a15_cb_regi15 (8) <= a15_cb_regi15 (7);
        b15_cb_regi15 (8) <= b15_cb_regi15 (7);
        a10_cb_regi10 (9) <= a10_cb_regi10 (8);
        b10_cb_regi10 (9) <= b10_cb_regi10 (8);
        a11_cb_regi11 (9) <= a11_cb_regi11 (8);
        b11_cb_regi11 (9) <= b11_cb_regi11 (8);
        a12_cb_regi12 (9) <= a12_cb_regi12 (8);
        b12_cb_regi12 (9) <= b12_cb_regi12 (8);
        a13_cb_regi13 (9) <= a13_cb_regi13 (8);
        b13_cb_regi13 (9) <= b13_cb_regi13 (8);
        a14_cb_regi14 (9) <= a14_cb_regi14 (8);
        b14_cb_regi14 (9) <= b14_cb_regi14 (8);
        a15_cb_regi15 (9) <= a15_cb_regi15 (8);
        b15_cb_regi15 (9) <= b15_cb_regi15 (8);
        a11_cb_regi11 (10) <= a11_cb_regi11 (9);
        b11_cb_regi11 (10) <= b11_cb_regi11 (9);
        a12_cb_regi12 (10) <= a12_cb_regi12 (9);
        b12_cb_regi12 (10) <= b12_cb_regi12 (9);
        a13_cb_regi13 (10) <= a13_cb_regi13 (9);
        b13_cb_regi13 (10) <= b13_cb_regi13 (9);
        a14_cb_regi14 (10) <= a14_cb_regi14 (9);
        b14_cb_regi14 (10) <= b14_cb_regi14 (9);
        a15_cb_regi15 (10) <= a15_cb_regi15 (9);
        b15_cb_regi15 (10) <= b15_cb_regi15 (9);
        a12_cb_regi12 (11) <= a12_cb_regi12 (10);
        b12_cb_regi12 (11) <= b12_cb_regi12 (10);
        a13_cb_regi13 (11) <= a13_cb_regi13 (10);
        b13_cb_regi13 (11) <= b13_cb_regi13 (10);
        a14_cb_regi14 (11) <= a14_cb_regi14 (10);
        b14_cb_regi14 (11) <= b14_cb_regi14 (10);
        a15_cb_regi15 (11) <= a15_cb_regi15 (10);
        b15_cb_regi15 (11) <= b15_cb_regi15 (10);
        a13_cb_regi13 (12) <= a13_cb_regi13 (11);
        b13_cb_regi13 (12) <= b13_cb_regi13 (11);
        a14_cb_regi14 (12) <= a14_cb_regi14 (11);
        b14_cb_regi14 (12) <= b14_cb_regi14 (11);
        a15_cb_regi15 (12) <= a15_cb_regi15 (11);
        b15_cb_regi15 (12) <= b15_cb_regi15 (11);
        a14_cb_regi14 (13) <= a14_cb_regi14 (12);
        b14_cb_regi14 (13) <= b14_cb_regi14 (12);
        a15_cb_regi15 (13) <= a15_cb_regi15 (12);
        b15_cb_regi15 (13) <= b15_cb_regi15 (12);
        a15_cb_regi15 (14) <= a15_cb_regi15 (13);
        b15_cb_regi15 (14) <= b15_cb_regi15 (13);
      end if;
    end if;
  end process;

-- carry out bit processing
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
      faccout0_co0_reg <= faccout0_co0;
      faccout1_co1_reg <= faccout1_co1;
      faccout2_co2_reg <= faccout2_co2;
      faccout3_co3_reg <= faccout3_co3;
      faccout4_co4_reg <= faccout4_co4;
      faccout5_co5_reg <= faccout5_co5;
      faccout6_co6_reg <= faccout6_co6;
      faccout7_co7_reg <= faccout7_co7;
      faccout8_co8_reg <= faccout8_co8;
      faccout9_co9_reg <= faccout9_co9;
      faccout10_co10_reg <= faccout10_co10;
      faccout11_co11_reg <= faccout11_co11;
      faccout12_co12_reg <= faccout12_co12;
      faccout13_co13_reg <= faccout13_co13;
      faccout14_co14_reg <= faccout14_co14;
      end if;
    end if;
  end process;


-- small adder generation 
  u0 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a0_cb,
          fab    => b0_cb,
          facin  => faccout_ini,
          fas    => fas(3 downto 0),
          facout => faccout0_co0);
  u1 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a1_cb_regi1(0),
          fab    => b1_cb_regi1(0),
          facin  => faccout0_co0_reg,
          fas    => fas(7 downto 4),
          facout => faccout1_co1);
  u2 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a2_cb_regi2(1),
          fab    => b2_cb_regi2(1),
          facin  => faccout1_co1_reg,
          fas    => fas(11 downto 8),
          facout => faccout2_co2);
  u3 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a3_cb_regi3(2),
          fab    => b3_cb_regi3(2),
          facin  => faccout2_co2_reg,
          fas    => fas(15 downto 12),
          facout => faccout3_co3);
  u4 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a4_cb_regi4(3),
          fab    => b4_cb_regi4(3),
          facin  => faccout3_co3_reg,
          fas    => fas(19 downto 16),
          facout => faccout4_co4);
  u5 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a5_cb_regi5(4),
          fab    => b5_cb_regi5(4),
          facin  => faccout4_co4_reg,
          fas    => fas(23 downto 20),
          facout => faccout5_co5);
  u6 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a6_cb_regi6(5),
          fab    => b6_cb_regi6(5),
          facin  => faccout5_co5_reg,
          fas    => fas(27 downto 24),
          facout => faccout6_co6);
  u7 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a7_cb_regi7(6),
          fab    => b7_cb_regi7(6),
          facin  => faccout6_co6_reg,
          fas    => fas(31 downto 28),
          facout => faccout7_co7);
  u8 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a8_cb_regi8(7),
          fab    => b8_cb_regi8(7),
          facin  => faccout7_co7_reg,
          fas    => fas(35 downto 32),
          facout => faccout8_co8);
  u9 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a9_cb_regi9(8),
          fab    => b9_cb_regi9(8),
          facin  => faccout8_co8_reg,
          fas    => fas(39 downto 36),
          facout => faccout9_co9);
  u10 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a10_cb_regi10(9),
          fab    => b10_cb_regi10(9),
          facin  => faccout9_co9_reg,
          fas    => fas(43 downto 40),
          facout => faccout10_co10);
  u11 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a11_cb_regi11(10),
          fab    => b11_cb_regi11(10),
          facin  => faccout10_co10_reg,
          fas    => fas(47 downto 44),
          facout => faccout11_co11);
  u12 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a12_cb_regi12(11),
          fab    => b12_cb_regi12(11),
          facin  => faccout11_co11_reg,
          fas    => fas(51 downto 48),
          facout => faccout12_co12);
  u13 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a13_cb_regi13(12),
          fab    => b13_cb_regi13(12),
          facin  => faccout12_co12_reg,
          fas    => fas(55 downto 52),
          facout => faccout13_co13);
  u14 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder
      port map
          (faa    => a14_cb_regi14(13),
          fab    => b14_cb_regi14(13),
          facin  => faccout13_co13_reg,
          fas    => fas(59 downto 56),
          facout => faccout14_co14);
    u15 : nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f
        port map
            (faa    => a15_cb_regi15(14),
            fab    => b15_cb_regi15(14),
            facin  => faccout14_co14_reg,
            fas    => fas(63 downto 60),
            facout => faccout15_co15);

  faccout_ini <= "0";

-- output register array
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
        s0_ca_rego0 (0) <= fas(3 downto 0);
        s1_ca_rego1 (0) <= fas(7 downto 4);
        s2_ca_rego2 (0) <= fas(11 downto 8);
        s3_ca_rego3 (0) <= fas(15 downto 12);
        s4_ca_rego4 (0) <= fas(19 downto 16);
        s5_ca_rego5 (0) <= fas(23 downto 20);
        s6_ca_rego6 (0) <= fas(27 downto 24);
        s7_ca_rego7 (0) <= fas(31 downto 28);
        s8_ca_rego8 (0) <= fas(35 downto 32);
        s9_ca_rego9 (0) <= fas(39 downto 36);
        s10_ca_rego10 (0) <= fas(43 downto 40);
        s11_ca_rego11 (0) <= fas(47 downto 44);
        s12_ca_rego12 (0) <= fas(51 downto 48);
        s13_ca_rego13 (0) <= fas(55 downto 52);
        s14_ca_rego14 (0) <= fas(59 downto 56);
        s0_ca_rego0 (1) <= s0_ca_rego0 (0);
        s0_ca_rego0 (2) <= s0_ca_rego0 (1);
        s0_ca_rego0 (3) <= s0_ca_rego0 (2);
        s0_ca_rego0 (4) <= s0_ca_rego0 (3);
        s0_ca_rego0 (5) <= s0_ca_rego0 (4);
        s0_ca_rego0 (6) <= s0_ca_rego0 (5);
        s0_ca_rego0 (7) <= s0_ca_rego0 (6);
        s0_ca_rego0 (8) <= s0_ca_rego0 (7);
        s0_ca_rego0 (9) <= s0_ca_rego0 (8);
        s0_ca_rego0 (10) <= s0_ca_rego0 (9);
        s0_ca_rego0 (11) <= s0_ca_rego0 (10);
        s0_ca_rego0 (12) <= s0_ca_rego0 (11);
        s0_ca_rego0 (13) <= s0_ca_rego0 (12);
        s0_ca_rego0 (14) <= s0_ca_rego0 (13);
        s1_ca_rego1 (1) <= s1_ca_rego1 (0);
        s1_ca_rego1 (2) <= s1_ca_rego1 (1);
        s1_ca_rego1 (3) <= s1_ca_rego1 (2);
        s1_ca_rego1 (4) <= s1_ca_rego1 (3);
        s1_ca_rego1 (5) <= s1_ca_rego1 (4);
        s1_ca_rego1 (6) <= s1_ca_rego1 (5);
        s1_ca_rego1 (7) <= s1_ca_rego1 (6);
        s1_ca_rego1 (8) <= s1_ca_rego1 (7);
        s1_ca_rego1 (9) <= s1_ca_rego1 (8);
        s1_ca_rego1 (10) <= s1_ca_rego1 (9);
        s1_ca_rego1 (11) <= s1_ca_rego1 (10);
        s1_ca_rego1 (12) <= s1_ca_rego1 (11);
        s1_ca_rego1 (13) <= s1_ca_rego1 (12);
        s2_ca_rego2 (1) <= s2_ca_rego2 (0);
        s2_ca_rego2 (2) <= s2_ca_rego2 (1);
        s2_ca_rego2 (3) <= s2_ca_rego2 (2);
        s2_ca_rego2 (4) <= s2_ca_rego2 (3);
        s2_ca_rego2 (5) <= s2_ca_rego2 (4);
        s2_ca_rego2 (6) <= s2_ca_rego2 (5);
        s2_ca_rego2 (7) <= s2_ca_rego2 (6);
        s2_ca_rego2 (8) <= s2_ca_rego2 (7);
        s2_ca_rego2 (9) <= s2_ca_rego2 (8);
        s2_ca_rego2 (10) <= s2_ca_rego2 (9);
        s2_ca_rego2 (11) <= s2_ca_rego2 (10);
        s2_ca_rego2 (12) <= s2_ca_rego2 (11);
        s3_ca_rego3 (1) <= s3_ca_rego3 (0);
        s3_ca_rego3 (2) <= s3_ca_rego3 (1);
        s3_ca_rego3 (3) <= s3_ca_rego3 (2);
        s3_ca_rego3 (4) <= s3_ca_rego3 (3);
        s3_ca_rego3 (5) <= s3_ca_rego3 (4);
        s3_ca_rego3 (6) <= s3_ca_rego3 (5);
        s3_ca_rego3 (7) <= s3_ca_rego3 (6);
        s3_ca_rego3 (8) <= s3_ca_rego3 (7);
        s3_ca_rego3 (9) <= s3_ca_rego3 (8);
        s3_ca_rego3 (10) <= s3_ca_rego3 (9);
        s3_ca_rego3 (11) <= s3_ca_rego3 (10);
        s4_ca_rego4 (1) <= s4_ca_rego4 (0);
        s4_ca_rego4 (2) <= s4_ca_rego4 (1);
        s4_ca_rego4 (3) <= s4_ca_rego4 (2);
        s4_ca_rego4 (4) <= s4_ca_rego4 (3);
        s4_ca_rego4 (5) <= s4_ca_rego4 (4);
        s4_ca_rego4 (6) <= s4_ca_rego4 (5);
        s4_ca_rego4 (7) <= s4_ca_rego4 (6);
        s4_ca_rego4 (8) <= s4_ca_rego4 (7);
        s4_ca_rego4 (9) <= s4_ca_rego4 (8);
        s4_ca_rego4 (10) <= s4_ca_rego4 (9);
        s5_ca_rego5 (1) <= s5_ca_rego5 (0);
        s5_ca_rego5 (2) <= s5_ca_rego5 (1);
        s5_ca_rego5 (3) <= s5_ca_rego5 (2);
        s5_ca_rego5 (4) <= s5_ca_rego5 (3);
        s5_ca_rego5 (5) <= s5_ca_rego5 (4);
        s5_ca_rego5 (6) <= s5_ca_rego5 (5);
        s5_ca_rego5 (7) <= s5_ca_rego5 (6);
        s5_ca_rego5 (8) <= s5_ca_rego5 (7);
        s5_ca_rego5 (9) <= s5_ca_rego5 (8);
        s6_ca_rego6 (1) <= s6_ca_rego6 (0);
        s6_ca_rego6 (2) <= s6_ca_rego6 (1);
        s6_ca_rego6 (3) <= s6_ca_rego6 (2);
        s6_ca_rego6 (4) <= s6_ca_rego6 (3);
        s6_ca_rego6 (5) <= s6_ca_rego6 (4);
        s6_ca_rego6 (6) <= s6_ca_rego6 (5);
        s6_ca_rego6 (7) <= s6_ca_rego6 (6);
        s6_ca_rego6 (8) <= s6_ca_rego6 (7);
        s7_ca_rego7 (1) <= s7_ca_rego7 (0);
        s7_ca_rego7 (2) <= s7_ca_rego7 (1);
        s7_ca_rego7 (3) <= s7_ca_rego7 (2);
        s7_ca_rego7 (4) <= s7_ca_rego7 (3);
        s7_ca_rego7 (5) <= s7_ca_rego7 (4);
        s7_ca_rego7 (6) <= s7_ca_rego7 (5);
        s7_ca_rego7 (7) <= s7_ca_rego7 (6);
        s8_ca_rego8 (1) <= s8_ca_rego8 (0);
        s8_ca_rego8 (2) <= s8_ca_rego8 (1);
        s8_ca_rego8 (3) <= s8_ca_rego8 (2);
        s8_ca_rego8 (4) <= s8_ca_rego8 (3);
        s8_ca_rego8 (5) <= s8_ca_rego8 (4);
        s8_ca_rego8 (6) <= s8_ca_rego8 (5);
        s9_ca_rego9 (1) <= s9_ca_rego9 (0);
        s9_ca_rego9 (2) <= s9_ca_rego9 (1);
        s9_ca_rego9 (3) <= s9_ca_rego9 (2);
        s9_ca_rego9 (4) <= s9_ca_rego9 (3);
        s9_ca_rego9 (5) <= s9_ca_rego9 (4);
        s10_ca_rego10 (1) <= s10_ca_rego10 (0);
        s10_ca_rego10 (2) <= s10_ca_rego10 (1);
        s10_ca_rego10 (3) <= s10_ca_rego10 (2);
        s10_ca_rego10 (4) <= s10_ca_rego10 (3);
        s11_ca_rego11 (1) <= s11_ca_rego11 (0);
        s11_ca_rego11 (2) <= s11_ca_rego11 (1);
        s11_ca_rego11 (3) <= s11_ca_rego11 (2);
        s12_ca_rego12 (1) <= s12_ca_rego12 (0);
        s12_ca_rego12 (2) <= s12_ca_rego12 (1);
        s13_ca_rego13 (1) <= s13_ca_rego13 (0);
      end if;
    end if;
  end process;

-- get the s_tmp, assign it to the primary output
  s_tmp(3 downto 0) <= s0_ca_rego0(14);
  s_tmp(7 downto 4) <= s1_ca_rego1(13);
  s_tmp(11 downto 8) <= s2_ca_rego2(12);
  s_tmp(15 downto 12) <= s3_ca_rego3(11);
  s_tmp(19 downto 16) <= s4_ca_rego4(10);
  s_tmp(23 downto 20) <= s5_ca_rego5(9);
  s_tmp(27 downto 24) <= s6_ca_rego6(8);
  s_tmp(31 downto 28) <= s7_ca_rego7(7);
  s_tmp(35 downto 32) <= s8_ca_rego8(6);
  s_tmp(39 downto 36) <= s9_ca_rego9(5);
  s_tmp(43 downto 40) <= s10_ca_rego10(4);
  s_tmp(47 downto 44) <= s11_ca_rego11(3);
  s_tmp(51 downto 48) <= s12_ca_rego12(2);
  s_tmp(55 downto 52) <= s13_ca_rego13(1);
  s_tmp(59 downto 56) <= s14_ca_rego14(0);
  s_tmp(63 downto 60) <= fas(63 downto 60);

  s <= s_tmp;

end architecture;

-- short adder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder is
generic(N : natural :=4);
port (
    faa : IN STD_LOGIC_VECTOR (N-1 downto 0);
    fab : IN STD_LOGIC_VECTOR (N-1 downto 0);
    facin : IN STD_LOGIC_VECTOR (0 downto 0);
    fas : OUT STD_LOGIC_VECTOR (N-1 downto 0);
    facout : OUT STD_LOGIC_VECTOR (0 downto 0));
end;

architecture behav of nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder is
    signal tmp : STD_LOGIC_VECTOR (N downto 0);
begin

  tmp <= std_logic_vector(unsigned(std_logic_vector(unsigned(std_logic_vector(resize(unsigned(faa),N+1))) + unsigned(fab))) + unsigned(facin));
  fas <= tmp(N-1 downto 0 );
  facout <= tmp(N downto N);

end behav;

-- the final stage short adder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f is
generic(N : natural :=4);
port (
    faa : IN STD_LOGIC_VECTOR (N-1 downto 0);
    fab : IN STD_LOGIC_VECTOR (N-1 downto 0);
    facin : IN STD_LOGIC_VECTOR (0 downto 0);
    fas : OUT STD_LOGIC_VECTOR (N-1 downto 0);
    facout : OUT STD_LOGIC_VECTOR (0 downto 0));
end;

architecture behav of nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_fadder_f is
    signal tmp : STD_LOGIC_VECTOR (N downto 0);
begin

  tmp <= std_logic_vector(unsigned(std_logic_vector(unsigned(std_logic_vector(resize(unsigned(faa),N+1))) + unsigned(fab))) + unsigned(facin));
  fas <= tmp(N-1 downto 0 );
  facout <= tmp(N downto N);

end behav;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nfa_accept_samples_generic_hw_add_64ns_64ns_64_16 is
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER);
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR(din0_WIDTH - 1 DOWNTO 0);
        din1 : IN STD_LOGIC_VECTOR(din1_WIDTH - 1 DOWNTO 0);
        dout : OUT STD_LOGIC_VECTOR(dout_WIDTH - 1 DOWNTO 0));
end entity;

architecture arch of nfa_accept_samples_generic_hw_add_64ns_64ns_64_16 is
    component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2 is
        port (
            clk : IN STD_LOGIC;
            reset : IN STD_LOGIC;
            ce : IN STD_LOGIC;
            a : IN STD_LOGIC_VECTOR;
            b : IN STD_LOGIC_VECTOR;
            s : OUT STD_LOGIC_VECTOR);
    end component;




begin
    nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2_U :  component nfa_accept_samples_generic_hw_add_64ns_64ns_64_16_AddSubnS_2
    port map (
        clk => clk,
        reset => reset,
        ce => ce,
        a => din0,
        b => din1,
        s => dout);

end architecture;


